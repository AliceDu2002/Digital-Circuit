// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\HDL_FIFO.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_FIFO
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/cca/Merge/HDL_FIFO
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_FIFO
          (clk,
           reset,
           enb,
           In,
           Push,
           Pop,
           Out,
           Empty);


  input   clk;
  input   reset;
  input   enb;
  input   [31:0] In;  // uint32
  input   Push;
  input   Pop;
  output  [31:0] Out;  // uint32
  output  Empty;  // ufix1


  reg [6:0] fifo_front_indx;  // ufix7
  reg [6:0] fifo_front_dir;  // ufix7
  reg [6:0] fifo_back_indx;  // ufix7
  reg [6:0] fifo_back_dir;  // ufix7
  reg [6:0] fifo_sample_count;  // ufix7
  wire [6:0] fifo_front_indx_next;  // ufix7
  wire [6:0] fifo_front_dir_next;  // ufix7
  wire [6:0] fifo_back_indx_next;  // ufix7
  wire [6:0] fifo_back_dir_next;  // ufix7
  wire [6:0] fifo_sample_count_next;  // ufix7
  wire fifo_out3;
  wire fifo_out4;
  wire fifo_write_enable;
  wire fifo_read_enable;
  wire [6:0] fifo_front_indx_temp;  // ufix7
  wire [6:0] fifo_back_indx_temp;  // ufix7
  wire [6:0] w_waddr;  // ufix7
  wire w_we;  // ufix1
  wire [6:0] w_raddr;  // ufix7
  wire w_full;  // ufix1
  wire [6:0] w_num;  // ufix7
  wire w_cz;
  wire w_const;  // ufix1
  wire w_mux1;  // ufix1
  reg  w_d1;  // ufix1
  wire [31:0] w_waddr_1;  // uint32
  reg [31:0] w_d2;  // uint32
  wire [31:0] w_out;  // uint32


  // FIFO logic controller
  always @(posedge clk or posedge reset)
    begin : fifo_process
      if (reset == 1'b1) begin
        fifo_front_indx <= 7'b0000000;
        fifo_front_dir <= 7'b0000001;
        fifo_back_indx <= 7'b0000000;
        fifo_back_dir <= 7'b0000001;
        fifo_sample_count <= 7'b0000000;
      end
      else begin
        if (enb) begin
          fifo_front_indx <= fifo_front_indx_next;
          fifo_front_dir <= fifo_front_dir_next;
          fifo_back_indx <= fifo_back_indx_next;
          fifo_back_dir <= fifo_back_dir_next;
          fifo_sample_count <= fifo_sample_count_next;
        end
      end
    end

  assign fifo_out4 = fifo_sample_count == 7'b1100100;
  assign fifo_out3 = fifo_sample_count == 7'b0000000;
  assign fifo_write_enable = Push && (Pop || ( ! fifo_out4));
  assign fifo_read_enable = Pop && ( ! fifo_out3);
  assign fifo_front_indx_temp = (fifo_read_enable ? fifo_front_indx + fifo_front_dir :
              fifo_front_indx);
  assign fifo_front_dir_next = (fifo_front_indx_temp == 7'b1100011 ? 7'b0011101 :
              7'b0000001);
  assign fifo_back_indx_temp = (fifo_write_enable ? fifo_back_indx + fifo_back_dir :
              fifo_back_indx);
  assign fifo_back_dir_next = (fifo_back_indx_temp == 7'b1100011 ? 7'b0011101 :
              7'b0000001);
  assign fifo_sample_count_next = (fifo_write_enable && ( ! fifo_read_enable) ? fifo_sample_count + 7'b0000001 :
              (( ! fifo_write_enable) && fifo_read_enable ? fifo_sample_count + 7'b1111111 :
              fifo_sample_count));
  assign w_waddr = fifo_back_indx;
  assign w_we = fifo_write_enable;
  assign w_raddr = fifo_front_indx;
  assign Empty = fifo_out3;
  assign w_full = fifo_out4;
  assign w_num = fifo_sample_count;
  assign fifo_front_indx_next = fifo_front_indx_temp;
  assign fifo_back_indx_next = fifo_back_indx_temp;



  assign w_cz = w_num > 7'b0000000;



  assign w_const = 1'b0;



  assign w_mux1 = (w_cz == 1'b0 ? w_const :
              Pop);



  always @(posedge clk or posedge reset)
    begin : f_d1_process
      if (reset == 1'b1) begin
        w_d1 <= 1'b0;
      end
      else begin
        if (enb) begin
          w_d1 <= w_mux1;
        end
      end
    end



  // us1: Upsample by 1, Sample offset 0 
  // us2: Upsample by 1, Sample offset 0 
  // us3: Upsample by 1, Sample offset 0 
  SimpleDualPortRAM_generic_block1 #(.AddrWidth(7),
                                     .DataWidth(32)
                                     )
                                   u_HDL_FIFO_ram (.clk(clk),
                                                   .enb(enb),
                                                   .wr_din(In),
                                                   .wr_addr(w_waddr),
                                                   .wr_en(w_we),  // ufix1
                                                   .rd_addr(w_raddr),
                                                   .rd_dout(w_waddr_1)
                                                   );

  always @(posedge clk or posedge reset)
    begin : f_d2_process
      if (reset == 1'b1) begin
        w_d2 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb && w_d1) begin
          w_d2 <= w_waddr_1;
        end
      end
    end



  assign w_out = (w_d1 == 1'b0 ? w_d2 :
              w_waddr_1);



  assign Out = w_out;

endmodule  // HDL_FIFO

