// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\BlobDetector.v
// Created: 2022-12-23 11:30:03
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.27961e-07
// Target subsystem base rate: 1.27961e-07
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1.27961e-07
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// pixelOutR                     ce_out        1.27961e-07
// pixelOutG                     ce_out        1.27961e-07
// pixelOutB                     ce_out        1.27961e-07
// ctrlOut_hStart                ce_out        1.27961e-07
// ctrlOut_hEnd                  ce_out        1.27961e-07
// ctrlOut_vStart                ce_out        1.27961e-07
// ctrlOut_vEnd                  ce_out        1.27961e-07
// ctrlOut_valid                 ce_out        1.27961e-07
// x_o                           ce_out        1.27961e-07
// y_o                           ce_out        1.27961e-07
// area_o                        ce_out        1.27961e-07
// bbox_x1_o                     ce_out        1.27961e-07
// bbox_y1_o                     ce_out        1.27961e-07
// bbox_x2_o                     ce_out        1.27961e-07
// bbox_y2_o                     ce_out        1.27961e-07
// fbidx_o                       ce_out        1.27961e-07
// num_o                         ce_out        1.27961e-07
// data_ready_o                  ce_out        1.27961e-07
// totalNum_o                    ce_out        1.27961e-07
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: BlobDetector
// Source Path: BlobAnalysisHDL/BlobDetector
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module BlobDetector
          (clk,
           reset,
           clk_enable,
           pixelInR,
           pixelInG,
           pixelInB,
           ctrlIn_hStart,
           ctrlIn_hEnd,
           ctrlIn_vStart,
           ctrlIn_vEnd,
           ctrlIn_valid,
           GradThresh,
           AreaThresh,
           CloseOp,
           VideoMode,
           blobIndex,
           ce_out,
           pixelOutR,
           pixelOutG,
           pixelOutB,
           ctrlOut_hStart,
           ctrlOut_hEnd,
           ctrlOut_vStart,
           ctrlOut_vEnd,
           ctrlOut_valid,
           x_o,
           y_o,
           area_o,
           bbox_x1_o,
           bbox_y1_o,
           bbox_x2_o,
           bbox_y2_o,
           fbidx_o,
           num_o,
           data_ready_o,
           totalNum_o);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [7:0] pixelInR;  // uint8
  input   [7:0] pixelInG;  // uint8
  input   [7:0] pixelInB;  // uint8
  input   ctrlIn_hStart;
  input   ctrlIn_hEnd;
  input   ctrlIn_vStart;
  input   ctrlIn_vEnd;
  input   ctrlIn_valid;
  input   [7:0] GradThresh;  // uint8
  input   [31:0] AreaThresh;  // uint32
  input   CloseOp;
  input   [7:0] VideoMode;  // uint8
  input   [9:0] blobIndex;  // ufix10
  output  ce_out;
  output  [7:0] pixelOutR;  // uint8
  output  [7:0] pixelOutG;  // uint8
  output  [7:0] pixelOutB;  // uint8
  output  ctrlOut_hStart;
  output  ctrlOut_hEnd;
  output  ctrlOut_vStart;
  output  ctrlOut_vEnd;
  output  ctrlOut_valid;
  output  [15:0] x_o;  // uint16
  output  [15:0] y_o;  // uint16
  output  [16:0] area_o;  // ufix17
  output  [8:0] bbox_x1_o;  // ufix9
  output  [7:0] bbox_y1_o;  // uint8
  output  [8:0] bbox_x2_o;  // ufix9
  output  [7:0] bbox_y2_o;  // uint8
  output  [9:0] fbidx_o;  // ufix10
  output  [15:0] num_o;  // uint16
  output  data_ready_o;
  output  [15:0] totalNum_o;  // uint16


  wire enb;
  reg  Delay7_out1_hStart;
  reg  Delay7_out1_hEnd;
  reg  Delay7_out1_vStart;
  reg  Delay7_out1_vEnd;
  reg  Delay7_out1_valid;
  wire FrameBoundary_out1;
  wire [31:0] FrameBoundary_out2;  // uint32
  wire [7:0] FrameBoundary_out3;  // uint8
  wire [7:0] Vector_Concatenate_out1 [0:2];  // uint8 [3]
  reg [7:0] thresh_vid_in [0:2];  // uint8 [3]
  wire [7:0] Color_Space_Converter_out1;  // uint8
  wire Color_Space_Converter_out2_hStart;
  wire Color_Space_Converter_out2_hEnd;
  wire Color_Space_Converter_out2_vStart;
  wire Color_Space_Converter_out2_vEnd;
  wire Color_Space_Converter_out2_valid;
  wire [7:0] CCA_Algorithm_out1_0;  // uint8
  wire [7:0] CCA_Algorithm_out1_1;  // uint8
  wire [7:0] CCA_Algorithm_out1_2;  // uint8
  wire CCA_Algorithm_out2_hStart;
  wire CCA_Algorithm_out2_hEnd;
  wire CCA_Algorithm_out2_vStart;
  wire CCA_Algorithm_out2_vEnd;
  wire CCA_Algorithm_out2_valid;
  wire [7:0] CCA_Algorithm_out3_0;  // uint8
  wire [7:0] CCA_Algorithm_out3_1;  // uint8
  wire [7:0] CCA_Algorithm_out3_2;  // uint8
  wire [15:0] xcoord;  // ufix16_En5
  wire [15:0] ycoord;  // ufix16_En5
  wire [16:0] area;  // ufix17
  wire [33:0] CCA_Algorithm_out7;  // ufix34
  wire [15:0] number;  // uint16
  wire valid;
  wire last;
  wire [15:0] CCA_Algorithm_out12;  // uint16
  wire [7:0] Pixel_Stream_Aligner_out1_0;  // uint8
  wire [7:0] Pixel_Stream_Aligner_out1_1;  // uint8
  wire [7:0] Pixel_Stream_Aligner_out1_2;  // uint8
  wire [7:0] Pixel_Stream_Aligner_out2_0;  // uint8
  wire [7:0] Pixel_Stream_Aligner_out2_1;  // uint8
  wire [7:0] Pixel_Stream_Aligner_out2_2;  // uint8
  wire Pixel_Stream_Aligner_out3_hStart;
  wire Pixel_Stream_Aligner_out3_hEnd;
  wire Pixel_Stream_Aligner_out3_vStart;
  wire Pixel_Stream_Aligner_out3_vEnd;
  wire Pixel_Stream_Aligner_out3_valid;
  wire [7:0] Pixel_Stream_Aligner_out1 [0:2];  // uint8 [3]
  wire [7:0] Pixel_Stream_Aligner_out2 [0:2];  // uint8 [3]
  wire [7:0] Delay16_out_1;  // uint8
  reg [7:0] Delay16_1_reg [0:10];  // ufix8 [11]
  wire [7:0] Delay16_out_2;  // uint8
  wire [7:0] Delay16_out_3;  // uint8
  reg [7:0] Delay16_1_reg_1 [0:10];  // ufix8 [11]
  reg [7:0] Delay16_1_reg_2 [0:10];  // ufix8 [11]
  wire [7:0] Delay16_1_reg_next [0:10];  // ufix8 [11]
  wire [7:0] Delay16_1_reg_next_1 [0:10];  // ufix8 [11]
  wire [7:0] Delay16_1_reg_next_2 [0:10];  // ufix8 [11]
  wire [7:0] Delay16_out1 [0:2];  // uint8 [3]
  wire [7:0] Multiport_Switch_out1 [0:2];  // uint8 [3]
  reg [7:0] Delay10_out1 [0:2];  // uint8 [3]
  wire [7:0] Delay10_out1_0;  // uint8
  reg [7:0] delayMatch_reg [0:10];  // ufix8 [11]
  wire [7:0] delayMatch_reg_next [0:10];  // ufix8 [11]
  wire [7:0] Selector_out1;  // uint8
  wire [7:0] Delay10_out1_1;  // uint8
  reg [7:0] delayMatch1_reg [0:10];  // ufix8 [11]
  wire [7:0] delayMatch1_reg_next [0:10];  // ufix8 [11]
  wire [7:0] Selector1_out1;  // uint8
  wire [7:0] Delay10_out1_2;  // uint8
  reg [7:0] delayMatch2_reg [0:10];  // ufix8 [11]
  wire [7:0] delayMatch2_reg_next [0:10];  // ufix8 [11]
  wire [7:0] Selector2_out1;  // uint8
  reg  Delay11_out1_hStart;
  reg  [0:10] alpha_reg;  // ufix1 [11]
  wire [0:10] alpha_reg_next;  // ufix1 [11]
  wire Delay11_out1_hStart_1;
  reg  Delay11_out1_hEnd;
  reg  [0:10] alpha_reg_1;  // ufix1 [11]
  wire [0:10] alpha_reg_next_1;  // ufix1 [11]
  wire Delay11_out1_hEnd_1;
  reg  Delay11_out1_vStart;
  reg  [0:10] alpha_reg_2;  // ufix1 [11]
  wire [0:10] alpha_reg_next_2;  // ufix1 [11]
  wire Delay11_out1_vStart_1;
  reg  Delay11_out1_vEnd;
  reg  [0:10] alpha_reg_3;  // ufix1 [11]
  wire [0:10] alpha_reg_next_3;  // ufix1 [11]
  wire Delay11_out1_vEnd_1;
  reg  Delay11_out1_valid;
  reg  [0:10] alpha_reg_4;  // ufix1 [11]
  wire [0:10] alpha_reg_next_4;  // ufix1 [11]
  wire Delay11_out1_valid_1;
  wire [9:0] Decrement_Real_World_out1;  // ufix10
  wire [15:0] CacheResultForXfer_out1;  // uint16
  wire [15:0] CacheResultForXfer_out2;  // uint16
  wire [16:0] CacheResultForXfer_out3;  // ufix17
  wire [8:0] CacheResultForXfer_out4;  // ufix9
  wire [7:0] CacheResultForXfer_out5;  // uint8
  wire [8:0] CacheResultForXfer_out6;  // ufix9
  wire [7:0] CacheResultForXfer_out7;  // uint8
  reg [15:0] Delay4_out1;  // uint16
  reg [15:0] Delay1_out1;  // uint16
  reg [16:0] Delay2_out1;  // ufix17
  reg [8:0] Delay3_out1;  // ufix9
  reg [7:0] Delay5_out1;  // uint8
  reg [8:0] Delay9_out1;  // ufix9
  reg [7:0] Delay13_out1;  // uint8
  reg [9:0] Delay12_reg [0:1];  // ufix10 [2]
  wire [9:0] Delay12_reg_next [0:1];  // ufix10 [2]
  wire [9:0] Delay12_out1;  // ufix10
  reg [9:0] delayMatch4_reg [0:10];  // ufix10 [11]
  wire [9:0] delayMatch4_reg_next [0:10];  // ufix10 [11]
  wire [9:0] Delay12_out1_1;  // ufix10
  reg [15:0] Delay8_out1;  // uint16
  reg [15:0] delayMatch5_reg [0:10];  // ufix16 [11]
  wire [15:0] delayMatch5_reg_next [0:10];  // ufix16 [11]
  wire [15:0] Delay8_out1_1;  // uint16
  wire vStart;
  wire Hold_Signal_out1;
  reg  [0:1] Delay14_reg;  // ufix1 [2]
  wire [0:1] Delay14_reg_next;  // ufix1 [2]
  wire Delay14_out1;
  reg  [0:10] delayMatch6_reg;  // ufix1 [11]
  wire [0:10] delayMatch6_reg_next;  // ufix1 [11]
  wire Delay14_out1_1;
  reg [15:0] Delay15_out1;  // uint16
  reg [15:0] delayMatch7_reg [0:10];  // ufix16 [11]
  wire [15:0] delayMatch7_reg_next [0:10];  // ufix16 [11]
  wire [15:0] Delay15_out1_1;  // uint16


  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        Delay7_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_hStart <= ctrlIn_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        Delay7_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_hEnd <= ctrlIn_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Delay7_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_vStart <= ctrlIn_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        Delay7_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_vEnd <= ctrlIn_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        Delay7_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_valid <= ctrlIn_valid;
        end
      end
    end



  FrameBoundary u_FrameBoundary (.clk(clk),
                                 .reset(reset),
                                 .enb(clk_enable),
                                 .CloseOpIn(CloseOp),
                                 .AreaThresh(AreaThresh),  // uint32
                                 .VMi(VideoMode),  // uint8
                                 .ctrl_vStart(Delay7_out1_vStart),
                                 .ctrl_valid(Delay7_out1_valid),
                                 .CloseOpOut(FrameBoundary_out1),
                                 .AreaThreshOut(FrameBoundary_out2),  // uint32
                                 .VMo(FrameBoundary_out3)  // uint8
                                 );

  assign Vector_Concatenate_out1[0] = pixelInR;
  assign Vector_Concatenate_out1[1] = pixelInG;
  assign Vector_Concatenate_out1[2] = pixelInB;

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        thresh_vid_in[0] <= 8'b00000000;
        thresh_vid_in[1] <= 8'b00000000;
        thresh_vid_in[2] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          thresh_vid_in[0] <= Vector_Concatenate_out1[0];
          thresh_vid_in[1] <= Vector_Concatenate_out1[1];
          thresh_vid_in[2] <= Vector_Concatenate_out1[2];
        end
      end
    end



  Color_Space_Converter u_Color_Space_Converter (.clk(clk),
                                                 .reset(reset),
                                                 .enb(clk_enable),
                                                 .in0_0(thresh_vid_in[0]),  // uint8
                                                 .in0_1(thresh_vid_in[1]),  // uint8
                                                 .in0_2(thresh_vid_in[2]),  // uint8
                                                 .in1_hStart(Delay7_out1_hStart),
                                                 .in1_hEnd(Delay7_out1_hEnd),
                                                 .in1_vStart(Delay7_out1_vStart),
                                                 .in1_vEnd(Delay7_out1_vEnd),
                                                 .in1_valid(Delay7_out1_valid),
                                                 .out0(Color_Space_Converter_out1),  // uint8
                                                 .out1_hStart(Color_Space_Converter_out2_hStart),
                                                 .out1_hEnd(Color_Space_Converter_out2_hEnd),
                                                 .out1_vStart(Color_Space_Converter_out2_vStart),
                                                 .out1_vEnd(Color_Space_Converter_out2_vEnd),
                                                 .out1_valid(Color_Space_Converter_out2_valid)
                                                 );

  CCA_Algorithm u_CCA_Algorithm (.clk(clk),
                                 .reset(reset),
                                 .enb(clk_enable),
                                 .Video_i(Color_Space_Converter_out1),  // uint8
                                 .thresh(GradThresh),  // uint8
                                 .Ctrl_i_hStart(Color_Space_Converter_out2_hStart),
                                 .Ctrl_i_hEnd(Color_Space_Converter_out2_hEnd),
                                 .Ctrl_i_vStart(Color_Space_Converter_out2_vStart),
                                 .Ctrl_i_vEnd(Color_Space_Converter_out2_vEnd),
                                 .Ctrl_i_valid(Color_Space_Converter_out2_valid),
                                 .CloseOpOut(FrameBoundary_out1),
                                 .AreaMin(FrameBoundary_out2),  // uint32
                                 .LabelVideo_o_0(CCA_Algorithm_out1_0),  // uint8
                                 .LabelVideo_o_1(CCA_Algorithm_out1_1),  // uint8
                                 .LabelVideo_o_2(CCA_Algorithm_out1_2),  // uint8
                                 .Ctrl_o_hStart(CCA_Algorithm_out2_hStart),
                                 .Ctrl_o_hEnd(CCA_Algorithm_out2_hEnd),
                                 .Ctrl_o_vStart(CCA_Algorithm_out2_vStart),
                                 .Ctrl_o_vEnd(CCA_Algorithm_out2_vEnd),
                                 .Ctrl_o_valid(CCA_Algorithm_out2_valid),
                                 .BWVideo_o_0(CCA_Algorithm_out3_0),  // uint8
                                 .BWVideo_o_1(CCA_Algorithm_out3_1),  // uint8
                                 .BWVideo_o_2(CCA_Algorithm_out3_2),  // uint8
                                 .x_o(xcoord),  // ufix16_En5
                                 .y_o(ycoord),  // ufix16_En5
                                 .area_o(area),  // ufix17
                                 .bbox_o(CCA_Algorithm_out7),  // ufix34
                                 .num_o(number),  // uint16
                                 .valid_o(valid),
                                 .last_o(last),
                                 .totalNum_o(CCA_Algorithm_out12)  // uint16
                                 );

  Pixel_Stream_Aligner_block u_Pixel_Stream_Aligner (.clk(clk),
                                                     .reset(reset),
                                                     .enb(clk_enable),
                                                     .in0_0(thresh_vid_in[0]),  // uint8
                                                     .in0_1(thresh_vid_in[1]),  // uint8
                                                     .in0_2(thresh_vid_in[2]),  // uint8
                                                     .in1_hStart(Delay7_out1_hStart),
                                                     .in1_hEnd(Delay7_out1_hEnd),
                                                     .in1_vStart(Delay7_out1_vStart),
                                                     .in1_vEnd(Delay7_out1_vEnd),
                                                     .in1_valid(Delay7_out1_valid),
                                                     .in2_0(CCA_Algorithm_out1_0),  // uint8
                                                     .in2_1(CCA_Algorithm_out1_1),  // uint8
                                                     .in2_2(CCA_Algorithm_out1_2),  // uint8
                                                     .in3_hStart(CCA_Algorithm_out2_hStart),
                                                     .in3_hEnd(CCA_Algorithm_out2_hEnd),
                                                     .in3_vStart(CCA_Algorithm_out2_vStart),
                                                     .in3_vEnd(CCA_Algorithm_out2_vEnd),
                                                     .in3_valid(CCA_Algorithm_out2_valid),
                                                     .out0_0(Pixel_Stream_Aligner_out1_0),  // uint8
                                                     .out0_1(Pixel_Stream_Aligner_out1_1),  // uint8
                                                     .out0_2(Pixel_Stream_Aligner_out1_2),  // uint8
                                                     .out1_0(Pixel_Stream_Aligner_out2_0),  // uint8
                                                     .out1_1(Pixel_Stream_Aligner_out2_1),  // uint8
                                                     .out1_2(Pixel_Stream_Aligner_out2_2),  // uint8
                                                     .out2_hStart(Pixel_Stream_Aligner_out3_hStart),
                                                     .out2_hEnd(Pixel_Stream_Aligner_out3_hEnd),
                                                     .out2_vStart(Pixel_Stream_Aligner_out3_vStart),
                                                     .out2_vEnd(Pixel_Stream_Aligner_out3_vEnd),
                                                     .out2_valid(Pixel_Stream_Aligner_out3_valid)
                                                     );

  assign Pixel_Stream_Aligner_out1[0] = Pixel_Stream_Aligner_out1_0;
  assign Pixel_Stream_Aligner_out1[1] = Pixel_Stream_Aligner_out1_1;
  assign Pixel_Stream_Aligner_out1[2] = Pixel_Stream_Aligner_out1_2;

  assign Pixel_Stream_Aligner_out2[0] = Pixel_Stream_Aligner_out2_0;
  assign Pixel_Stream_Aligner_out2[1] = Pixel_Stream_Aligner_out2_1;
  assign Pixel_Stream_Aligner_out2[2] = Pixel_Stream_Aligner_out2_2;

  always @(posedge clk or posedge reset)
    begin : Delay16_1_process
      if (reset == 1'b1) begin
        Delay16_1_reg[0] <= 8'b00000000;
        Delay16_1_reg[1] <= 8'b00000000;
        Delay16_1_reg[2] <= 8'b00000000;
        Delay16_1_reg[3] <= 8'b00000000;
        Delay16_1_reg[4] <= 8'b00000000;
        Delay16_1_reg[5] <= 8'b00000000;
        Delay16_1_reg[6] <= 8'b00000000;
        Delay16_1_reg[7] <= 8'b00000000;
        Delay16_1_reg[8] <= 8'b00000000;
        Delay16_1_reg[9] <= 8'b00000000;
        Delay16_1_reg[10] <= 8'b00000000;
        Delay16_1_reg_1[0] <= 8'b00000000;
        Delay16_1_reg_1[1] <= 8'b00000000;
        Delay16_1_reg_1[2] <= 8'b00000000;
        Delay16_1_reg_1[3] <= 8'b00000000;
        Delay16_1_reg_1[4] <= 8'b00000000;
        Delay16_1_reg_1[5] <= 8'b00000000;
        Delay16_1_reg_1[6] <= 8'b00000000;
        Delay16_1_reg_1[7] <= 8'b00000000;
        Delay16_1_reg_1[8] <= 8'b00000000;
        Delay16_1_reg_1[9] <= 8'b00000000;
        Delay16_1_reg_1[10] <= 8'b00000000;
        Delay16_1_reg_2[0] <= 8'b00000000;
        Delay16_1_reg_2[1] <= 8'b00000000;
        Delay16_1_reg_2[2] <= 8'b00000000;
        Delay16_1_reg_2[3] <= 8'b00000000;
        Delay16_1_reg_2[4] <= 8'b00000000;
        Delay16_1_reg_2[5] <= 8'b00000000;
        Delay16_1_reg_2[6] <= 8'b00000000;
        Delay16_1_reg_2[7] <= 8'b00000000;
        Delay16_1_reg_2[8] <= 8'b00000000;
        Delay16_1_reg_2[9] <= 8'b00000000;
        Delay16_1_reg_2[10] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay16_1_reg[0] <= Delay16_1_reg_next[0];
          Delay16_1_reg[1] <= Delay16_1_reg_next[1];
          Delay16_1_reg[2] <= Delay16_1_reg_next[2];
          Delay16_1_reg[3] <= Delay16_1_reg_next[3];
          Delay16_1_reg[4] <= Delay16_1_reg_next[4];
          Delay16_1_reg[5] <= Delay16_1_reg_next[5];
          Delay16_1_reg[6] <= Delay16_1_reg_next[6];
          Delay16_1_reg[7] <= Delay16_1_reg_next[7];
          Delay16_1_reg[8] <= Delay16_1_reg_next[8];
          Delay16_1_reg[9] <= Delay16_1_reg_next[9];
          Delay16_1_reg[10] <= Delay16_1_reg_next[10];
          Delay16_1_reg_1[0] <= Delay16_1_reg_next_1[0];
          Delay16_1_reg_1[1] <= Delay16_1_reg_next_1[1];
          Delay16_1_reg_1[2] <= Delay16_1_reg_next_1[2];
          Delay16_1_reg_1[3] <= Delay16_1_reg_next_1[3];
          Delay16_1_reg_1[4] <= Delay16_1_reg_next_1[4];
          Delay16_1_reg_1[5] <= Delay16_1_reg_next_1[5];
          Delay16_1_reg_1[6] <= Delay16_1_reg_next_1[6];
          Delay16_1_reg_1[7] <= Delay16_1_reg_next_1[7];
          Delay16_1_reg_1[8] <= Delay16_1_reg_next_1[8];
          Delay16_1_reg_1[9] <= Delay16_1_reg_next_1[9];
          Delay16_1_reg_1[10] <= Delay16_1_reg_next_1[10];
          Delay16_1_reg_2[0] <= Delay16_1_reg_next_2[0];
          Delay16_1_reg_2[1] <= Delay16_1_reg_next_2[1];
          Delay16_1_reg_2[2] <= Delay16_1_reg_next_2[2];
          Delay16_1_reg_2[3] <= Delay16_1_reg_next_2[3];
          Delay16_1_reg_2[4] <= Delay16_1_reg_next_2[4];
          Delay16_1_reg_2[5] <= Delay16_1_reg_next_2[5];
          Delay16_1_reg_2[6] <= Delay16_1_reg_next_2[6];
          Delay16_1_reg_2[7] <= Delay16_1_reg_next_2[7];
          Delay16_1_reg_2[8] <= Delay16_1_reg_next_2[8];
          Delay16_1_reg_2[9] <= Delay16_1_reg_next_2[9];
          Delay16_1_reg_2[10] <= Delay16_1_reg_next_2[10];
        end
      end
    end

  assign Delay16_1_reg_next[0] = CCA_Algorithm_out3_0;
  assign Delay16_1_reg_next[1] = Delay16_1_reg[0];
  assign Delay16_1_reg_next[2] = Delay16_1_reg[1];
  assign Delay16_1_reg_next[3] = Delay16_1_reg[2];
  assign Delay16_1_reg_next[4] = Delay16_1_reg[3];
  assign Delay16_1_reg_next[5] = Delay16_1_reg[4];
  assign Delay16_1_reg_next[6] = Delay16_1_reg[5];
  assign Delay16_1_reg_next[7] = Delay16_1_reg[6];
  assign Delay16_1_reg_next[8] = Delay16_1_reg[7];
  assign Delay16_1_reg_next[9] = Delay16_1_reg[8];
  assign Delay16_1_reg_next[10] = Delay16_1_reg[9];
  assign Delay16_out_1 = Delay16_1_reg[10];
  assign Delay16_1_reg_next_1[0] = CCA_Algorithm_out3_1;
  assign Delay16_1_reg_next_1[1] = Delay16_1_reg_1[0];
  assign Delay16_1_reg_next_1[2] = Delay16_1_reg_1[1];
  assign Delay16_1_reg_next_1[3] = Delay16_1_reg_1[2];
  assign Delay16_1_reg_next_1[4] = Delay16_1_reg_1[3];
  assign Delay16_1_reg_next_1[5] = Delay16_1_reg_1[4];
  assign Delay16_1_reg_next_1[6] = Delay16_1_reg_1[5];
  assign Delay16_1_reg_next_1[7] = Delay16_1_reg_1[6];
  assign Delay16_1_reg_next_1[8] = Delay16_1_reg_1[7];
  assign Delay16_1_reg_next_1[9] = Delay16_1_reg_1[8];
  assign Delay16_1_reg_next_1[10] = Delay16_1_reg_1[9];
  assign Delay16_out_2 = Delay16_1_reg_1[10];
  assign Delay16_1_reg_next_2[0] = CCA_Algorithm_out3_2;
  assign Delay16_1_reg_next_2[1] = Delay16_1_reg_2[0];
  assign Delay16_1_reg_next_2[2] = Delay16_1_reg_2[1];
  assign Delay16_1_reg_next_2[3] = Delay16_1_reg_2[2];
  assign Delay16_1_reg_next_2[4] = Delay16_1_reg_2[3];
  assign Delay16_1_reg_next_2[5] = Delay16_1_reg_2[4];
  assign Delay16_1_reg_next_2[6] = Delay16_1_reg_2[5];
  assign Delay16_1_reg_next_2[7] = Delay16_1_reg_2[6];
  assign Delay16_1_reg_next_2[8] = Delay16_1_reg_2[7];
  assign Delay16_1_reg_next_2[9] = Delay16_1_reg_2[8];
  assign Delay16_1_reg_next_2[10] = Delay16_1_reg_2[9];
  assign Delay16_out_3 = Delay16_1_reg_2[10];



  assign Delay16_out1[0] = Delay16_out_1;
  assign Delay16_out1[1] = Delay16_out_2;
  assign Delay16_out1[2] = Delay16_out_3;

  assign Multiport_Switch_out1[0] = (FrameBoundary_out3 == 8'b00000000 ? Pixel_Stream_Aligner_out1[0] :
              (FrameBoundary_out3 == 8'b00000001 ? Pixel_Stream_Aligner_out2[0] :
              Delay16_out1[0]));
  assign Multiport_Switch_out1[1] = (FrameBoundary_out3 == 8'b00000000 ? Pixel_Stream_Aligner_out1[1] :
              (FrameBoundary_out3 == 8'b00000001 ? Pixel_Stream_Aligner_out2[1] :
              Delay16_out1[1]));
  assign Multiport_Switch_out1[2] = (FrameBoundary_out3 == 8'b00000000 ? Pixel_Stream_Aligner_out1[2] :
              (FrameBoundary_out3 == 8'b00000001 ? Pixel_Stream_Aligner_out2[2] :
              Delay16_out1[2]));



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1[0] <= 8'b00000000;
        Delay10_out1[1] <= 8'b00000000;
        Delay10_out1[2] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay10_out1[0] <= Multiport_Switch_out1[0];
          Delay10_out1[1] <= Multiport_Switch_out1[1];
          Delay10_out1[2] <= Multiport_Switch_out1[2];
        end
      end
    end



  assign Delay10_out1_0 = Delay10_out1[0];

  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 8'b00000000;
        delayMatch_reg[1] <= 8'b00000000;
        delayMatch_reg[2] <= 8'b00000000;
        delayMatch_reg[3] <= 8'b00000000;
        delayMatch_reg[4] <= 8'b00000000;
        delayMatch_reg[5] <= 8'b00000000;
        delayMatch_reg[6] <= 8'b00000000;
        delayMatch_reg[7] <= 8'b00000000;
        delayMatch_reg[8] <= 8'b00000000;
        delayMatch_reg[9] <= 8'b00000000;
        delayMatch_reg[10] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
          delayMatch_reg[4] <= delayMatch_reg_next[4];
          delayMatch_reg[5] <= delayMatch_reg_next[5];
          delayMatch_reg[6] <= delayMatch_reg_next[6];
          delayMatch_reg[7] <= delayMatch_reg_next[7];
          delayMatch_reg[8] <= delayMatch_reg_next[8];
          delayMatch_reg[9] <= delayMatch_reg_next[9];
          delayMatch_reg[10] <= delayMatch_reg_next[10];
        end
      end
    end

  assign Selector_out1 = delayMatch_reg[10];
  assign delayMatch_reg_next[0] = Delay10_out1_0;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];
  assign delayMatch_reg_next[4] = delayMatch_reg[3];
  assign delayMatch_reg_next[5] = delayMatch_reg[4];
  assign delayMatch_reg_next[6] = delayMatch_reg[5];
  assign delayMatch_reg_next[7] = delayMatch_reg[6];
  assign delayMatch_reg_next[8] = delayMatch_reg[7];
  assign delayMatch_reg_next[9] = delayMatch_reg[8];
  assign delayMatch_reg_next[10] = delayMatch_reg[9];



  assign pixelOutR = Selector_out1;

  assign Delay10_out1_1 = Delay10_out1[1];

  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg[0] <= 8'b00000000;
        delayMatch1_reg[1] <= 8'b00000000;
        delayMatch1_reg[2] <= 8'b00000000;
        delayMatch1_reg[3] <= 8'b00000000;
        delayMatch1_reg[4] <= 8'b00000000;
        delayMatch1_reg[5] <= 8'b00000000;
        delayMatch1_reg[6] <= 8'b00000000;
        delayMatch1_reg[7] <= 8'b00000000;
        delayMatch1_reg[8] <= 8'b00000000;
        delayMatch1_reg[9] <= 8'b00000000;
        delayMatch1_reg[10] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
          delayMatch1_reg[2] <= delayMatch1_reg_next[2];
          delayMatch1_reg[3] <= delayMatch1_reg_next[3];
          delayMatch1_reg[4] <= delayMatch1_reg_next[4];
          delayMatch1_reg[5] <= delayMatch1_reg_next[5];
          delayMatch1_reg[6] <= delayMatch1_reg_next[6];
          delayMatch1_reg[7] <= delayMatch1_reg_next[7];
          delayMatch1_reg[8] <= delayMatch1_reg_next[8];
          delayMatch1_reg[9] <= delayMatch1_reg_next[9];
          delayMatch1_reg[10] <= delayMatch1_reg_next[10];
        end
      end
    end

  assign Selector1_out1 = delayMatch1_reg[10];
  assign delayMatch1_reg_next[0] = Delay10_out1_1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];
  assign delayMatch1_reg_next[2] = delayMatch1_reg[1];
  assign delayMatch1_reg_next[3] = delayMatch1_reg[2];
  assign delayMatch1_reg_next[4] = delayMatch1_reg[3];
  assign delayMatch1_reg_next[5] = delayMatch1_reg[4];
  assign delayMatch1_reg_next[6] = delayMatch1_reg[5];
  assign delayMatch1_reg_next[7] = delayMatch1_reg[6];
  assign delayMatch1_reg_next[8] = delayMatch1_reg[7];
  assign delayMatch1_reg_next[9] = delayMatch1_reg[8];
  assign delayMatch1_reg_next[10] = delayMatch1_reg[9];



  assign pixelOutG = Selector1_out1;

  assign Delay10_out1_2 = Delay10_out1[2];

  always @(posedge clk or posedge reset)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        delayMatch2_reg[0] <= 8'b00000000;
        delayMatch2_reg[1] <= 8'b00000000;
        delayMatch2_reg[2] <= 8'b00000000;
        delayMatch2_reg[3] <= 8'b00000000;
        delayMatch2_reg[4] <= 8'b00000000;
        delayMatch2_reg[5] <= 8'b00000000;
        delayMatch2_reg[6] <= 8'b00000000;
        delayMatch2_reg[7] <= 8'b00000000;
        delayMatch2_reg[8] <= 8'b00000000;
        delayMatch2_reg[9] <= 8'b00000000;
        delayMatch2_reg[10] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          delayMatch2_reg[0] <= delayMatch2_reg_next[0];
          delayMatch2_reg[1] <= delayMatch2_reg_next[1];
          delayMatch2_reg[2] <= delayMatch2_reg_next[2];
          delayMatch2_reg[3] <= delayMatch2_reg_next[3];
          delayMatch2_reg[4] <= delayMatch2_reg_next[4];
          delayMatch2_reg[5] <= delayMatch2_reg_next[5];
          delayMatch2_reg[6] <= delayMatch2_reg_next[6];
          delayMatch2_reg[7] <= delayMatch2_reg_next[7];
          delayMatch2_reg[8] <= delayMatch2_reg_next[8];
          delayMatch2_reg[9] <= delayMatch2_reg_next[9];
          delayMatch2_reg[10] <= delayMatch2_reg_next[10];
        end
      end
    end

  assign Selector2_out1 = delayMatch2_reg[10];
  assign delayMatch2_reg_next[0] = Delay10_out1_2;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];
  assign delayMatch2_reg_next[2] = delayMatch2_reg[1];
  assign delayMatch2_reg_next[3] = delayMatch2_reg[2];
  assign delayMatch2_reg_next[4] = delayMatch2_reg[3];
  assign delayMatch2_reg_next[5] = delayMatch2_reg[4];
  assign delayMatch2_reg_next[6] = delayMatch2_reg[5];
  assign delayMatch2_reg_next[7] = delayMatch2_reg[6];
  assign delayMatch2_reg_next[8] = delayMatch2_reg[7];
  assign delayMatch2_reg_next[9] = delayMatch2_reg[8];
  assign delayMatch2_reg_next[10] = delayMatch2_reg[9];



  assign pixelOutB = Selector2_out1;

  always @(posedge clk or posedge reset)
    begin : c_5_process
      if (reset == 1'b1) begin
        Delay11_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1_hStart <= Pixel_Stream_Aligner_out3_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_6_process
      if (reset == 1'b1) begin
        alpha_reg[0] <= 1'b0;
        alpha_reg[1] <= 1'b0;
        alpha_reg[2] <= 1'b0;
        alpha_reg[3] <= 1'b0;
        alpha_reg[4] <= 1'b0;
        alpha_reg[5] <= 1'b0;
        alpha_reg[6] <= 1'b0;
        alpha_reg[7] <= 1'b0;
        alpha_reg[8] <= 1'b0;
        alpha_reg[9] <= 1'b0;
        alpha_reg[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg[0] <= alpha_reg_next[0];
          alpha_reg[1] <= alpha_reg_next[1];
          alpha_reg[2] <= alpha_reg_next[2];
          alpha_reg[3] <= alpha_reg_next[3];
          alpha_reg[4] <= alpha_reg_next[4];
          alpha_reg[5] <= alpha_reg_next[5];
          alpha_reg[6] <= alpha_reg_next[6];
          alpha_reg[7] <= alpha_reg_next[7];
          alpha_reg[8] <= alpha_reg_next[8];
          alpha_reg[9] <= alpha_reg_next[9];
          alpha_reg[10] <= alpha_reg_next[10];
        end
      end
    end

  assign Delay11_out1_hStart_1 = alpha_reg[10];
  assign alpha_reg_next[0] = Delay11_out1_hStart;
  assign alpha_reg_next[1] = alpha_reg[0];
  assign alpha_reg_next[2] = alpha_reg[1];
  assign alpha_reg_next[3] = alpha_reg[2];
  assign alpha_reg_next[4] = alpha_reg[3];
  assign alpha_reg_next[5] = alpha_reg[4];
  assign alpha_reg_next[6] = alpha_reg[5];
  assign alpha_reg_next[7] = alpha_reg[6];
  assign alpha_reg_next[8] = alpha_reg[7];
  assign alpha_reg_next[9] = alpha_reg[8];
  assign alpha_reg_next[10] = alpha_reg[9];



  assign ctrlOut_hStart = Delay11_out1_hStart_1;

  always @(posedge clk or posedge reset)
    begin : c_7_process
      if (reset == 1'b1) begin
        Delay11_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1_hEnd <= Pixel_Stream_Aligner_out3_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_8_process
      if (reset == 1'b1) begin
        alpha_reg_1[0] <= 1'b0;
        alpha_reg_1[1] <= 1'b0;
        alpha_reg_1[2] <= 1'b0;
        alpha_reg_1[3] <= 1'b0;
        alpha_reg_1[4] <= 1'b0;
        alpha_reg_1[5] <= 1'b0;
        alpha_reg_1[6] <= 1'b0;
        alpha_reg_1[7] <= 1'b0;
        alpha_reg_1[8] <= 1'b0;
        alpha_reg_1[9] <= 1'b0;
        alpha_reg_1[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_1[0] <= alpha_reg_next_1[0];
          alpha_reg_1[1] <= alpha_reg_next_1[1];
          alpha_reg_1[2] <= alpha_reg_next_1[2];
          alpha_reg_1[3] <= alpha_reg_next_1[3];
          alpha_reg_1[4] <= alpha_reg_next_1[4];
          alpha_reg_1[5] <= alpha_reg_next_1[5];
          alpha_reg_1[6] <= alpha_reg_next_1[6];
          alpha_reg_1[7] <= alpha_reg_next_1[7];
          alpha_reg_1[8] <= alpha_reg_next_1[8];
          alpha_reg_1[9] <= alpha_reg_next_1[9];
          alpha_reg_1[10] <= alpha_reg_next_1[10];
        end
      end
    end

  assign Delay11_out1_hEnd_1 = alpha_reg_1[10];
  assign alpha_reg_next_1[0] = Delay11_out1_hEnd;
  assign alpha_reg_next_1[1] = alpha_reg_1[0];
  assign alpha_reg_next_1[2] = alpha_reg_1[1];
  assign alpha_reg_next_1[3] = alpha_reg_1[2];
  assign alpha_reg_next_1[4] = alpha_reg_1[3];
  assign alpha_reg_next_1[5] = alpha_reg_1[4];
  assign alpha_reg_next_1[6] = alpha_reg_1[5];
  assign alpha_reg_next_1[7] = alpha_reg_1[6];
  assign alpha_reg_next_1[8] = alpha_reg_1[7];
  assign alpha_reg_next_1[9] = alpha_reg_1[8];
  assign alpha_reg_next_1[10] = alpha_reg_1[9];



  assign ctrlOut_hEnd = Delay11_out1_hEnd_1;

  always @(posedge clk or posedge reset)
    begin : c_9_process
      if (reset == 1'b1) begin
        Delay11_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1_vStart <= Pixel_Stream_Aligner_out3_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_10_process
      if (reset == 1'b1) begin
        alpha_reg_2[0] <= 1'b0;
        alpha_reg_2[1] <= 1'b0;
        alpha_reg_2[2] <= 1'b0;
        alpha_reg_2[3] <= 1'b0;
        alpha_reg_2[4] <= 1'b0;
        alpha_reg_2[5] <= 1'b0;
        alpha_reg_2[6] <= 1'b0;
        alpha_reg_2[7] <= 1'b0;
        alpha_reg_2[8] <= 1'b0;
        alpha_reg_2[9] <= 1'b0;
        alpha_reg_2[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_2[0] <= alpha_reg_next_2[0];
          alpha_reg_2[1] <= alpha_reg_next_2[1];
          alpha_reg_2[2] <= alpha_reg_next_2[2];
          alpha_reg_2[3] <= alpha_reg_next_2[3];
          alpha_reg_2[4] <= alpha_reg_next_2[4];
          alpha_reg_2[5] <= alpha_reg_next_2[5];
          alpha_reg_2[6] <= alpha_reg_next_2[6];
          alpha_reg_2[7] <= alpha_reg_next_2[7];
          alpha_reg_2[8] <= alpha_reg_next_2[8];
          alpha_reg_2[9] <= alpha_reg_next_2[9];
          alpha_reg_2[10] <= alpha_reg_next_2[10];
        end
      end
    end

  assign Delay11_out1_vStart_1 = alpha_reg_2[10];
  assign alpha_reg_next_2[0] = Delay11_out1_vStart;
  assign alpha_reg_next_2[1] = alpha_reg_2[0];
  assign alpha_reg_next_2[2] = alpha_reg_2[1];
  assign alpha_reg_next_2[3] = alpha_reg_2[2];
  assign alpha_reg_next_2[4] = alpha_reg_2[3];
  assign alpha_reg_next_2[5] = alpha_reg_2[4];
  assign alpha_reg_next_2[6] = alpha_reg_2[5];
  assign alpha_reg_next_2[7] = alpha_reg_2[6];
  assign alpha_reg_next_2[8] = alpha_reg_2[7];
  assign alpha_reg_next_2[9] = alpha_reg_2[8];
  assign alpha_reg_next_2[10] = alpha_reg_2[9];



  assign ctrlOut_vStart = Delay11_out1_vStart_1;

  always @(posedge clk or posedge reset)
    begin : c_11_process
      if (reset == 1'b1) begin
        Delay11_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1_vEnd <= Pixel_Stream_Aligner_out3_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_12_process
      if (reset == 1'b1) begin
        alpha_reg_3[0] <= 1'b0;
        alpha_reg_3[1] <= 1'b0;
        alpha_reg_3[2] <= 1'b0;
        alpha_reg_3[3] <= 1'b0;
        alpha_reg_3[4] <= 1'b0;
        alpha_reg_3[5] <= 1'b0;
        alpha_reg_3[6] <= 1'b0;
        alpha_reg_3[7] <= 1'b0;
        alpha_reg_3[8] <= 1'b0;
        alpha_reg_3[9] <= 1'b0;
        alpha_reg_3[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_3[0] <= alpha_reg_next_3[0];
          alpha_reg_3[1] <= alpha_reg_next_3[1];
          alpha_reg_3[2] <= alpha_reg_next_3[2];
          alpha_reg_3[3] <= alpha_reg_next_3[3];
          alpha_reg_3[4] <= alpha_reg_next_3[4];
          alpha_reg_3[5] <= alpha_reg_next_3[5];
          alpha_reg_3[6] <= alpha_reg_next_3[6];
          alpha_reg_3[7] <= alpha_reg_next_3[7];
          alpha_reg_3[8] <= alpha_reg_next_3[8];
          alpha_reg_3[9] <= alpha_reg_next_3[9];
          alpha_reg_3[10] <= alpha_reg_next_3[10];
        end
      end
    end

  assign Delay11_out1_vEnd_1 = alpha_reg_3[10];
  assign alpha_reg_next_3[0] = Delay11_out1_vEnd;
  assign alpha_reg_next_3[1] = alpha_reg_3[0];
  assign alpha_reg_next_3[2] = alpha_reg_3[1];
  assign alpha_reg_next_3[3] = alpha_reg_3[2];
  assign alpha_reg_next_3[4] = alpha_reg_3[3];
  assign alpha_reg_next_3[5] = alpha_reg_3[4];
  assign alpha_reg_next_3[6] = alpha_reg_3[5];
  assign alpha_reg_next_3[7] = alpha_reg_3[6];
  assign alpha_reg_next_3[8] = alpha_reg_3[7];
  assign alpha_reg_next_3[9] = alpha_reg_3[8];
  assign alpha_reg_next_3[10] = alpha_reg_3[9];



  assign ctrlOut_vEnd = Delay11_out1_vEnd_1;

  always @(posedge clk or posedge reset)
    begin : c_13_process
      if (reset == 1'b1) begin
        Delay11_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out1_valid <= Pixel_Stream_Aligner_out3_valid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_14_process
      if (reset == 1'b1) begin
        alpha_reg_4[0] <= 1'b0;
        alpha_reg_4[1] <= 1'b0;
        alpha_reg_4[2] <= 1'b0;
        alpha_reg_4[3] <= 1'b0;
        alpha_reg_4[4] <= 1'b0;
        alpha_reg_4[5] <= 1'b0;
        alpha_reg_4[6] <= 1'b0;
        alpha_reg_4[7] <= 1'b0;
        alpha_reg_4[8] <= 1'b0;
        alpha_reg_4[9] <= 1'b0;
        alpha_reg_4[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_4[0] <= alpha_reg_next_4[0];
          alpha_reg_4[1] <= alpha_reg_next_4[1];
          alpha_reg_4[2] <= alpha_reg_next_4[2];
          alpha_reg_4[3] <= alpha_reg_next_4[3];
          alpha_reg_4[4] <= alpha_reg_next_4[4];
          alpha_reg_4[5] <= alpha_reg_next_4[5];
          alpha_reg_4[6] <= alpha_reg_next_4[6];
          alpha_reg_4[7] <= alpha_reg_next_4[7];
          alpha_reg_4[8] <= alpha_reg_next_4[8];
          alpha_reg_4[9] <= alpha_reg_next_4[9];
          alpha_reg_4[10] <= alpha_reg_next_4[10];
        end
      end
    end

  assign Delay11_out1_valid_1 = alpha_reg_4[10];
  assign alpha_reg_next_4[0] = Delay11_out1_valid;
  assign alpha_reg_next_4[1] = alpha_reg_4[0];
  assign alpha_reg_next_4[2] = alpha_reg_4[1];
  assign alpha_reg_next_4[3] = alpha_reg_4[2];
  assign alpha_reg_next_4[4] = alpha_reg_4[3];
  assign alpha_reg_next_4[5] = alpha_reg_4[4];
  assign alpha_reg_next_4[6] = alpha_reg_4[5];
  assign alpha_reg_next_4[7] = alpha_reg_4[6];
  assign alpha_reg_next_4[8] = alpha_reg_4[7];
  assign alpha_reg_next_4[9] = alpha_reg_4[8];
  assign alpha_reg_next_4[10] = alpha_reg_4[9];



  assign ctrlOut_valid = Delay11_out1_valid_1;

  assign Decrement_Real_World_out1 = blobIndex - 10'b0000000001;



  CacheResultForXfer u_CacheResultForXfer (.clk(clk),
                                           .reset(reset),
                                           .enb(clk_enable),
                                           .x_i(xcoord),  // ufix16_En5
                                           .y_i(ycoord),  // ufix16_En5
                                           .area_i(area),  // ufix17
                                           .bbox_i(CCA_Algorithm_out7),  // ufix34
                                           .valid_i(valid),
                                           .last_i(last),
                                           .getidx_i(Decrement_Real_World_out1),  // ufix10
                                           .x_o(CacheResultForXfer_out1),  // uint16
                                           .y_o(CacheResultForXfer_out2),  // uint16
                                           .area_o(CacheResultForXfer_out3),  // ufix17
                                           .bbx1_o(CacheResultForXfer_out4),  // ufix9
                                           .bby1_o(CacheResultForXfer_out5),  // uint8
                                           .bbx2_o(CacheResultForXfer_out6),  // ufix9
                                           .bby2_o(CacheResultForXfer_out7)  // uint8
                                           );

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= CacheResultForXfer_out1;
        end
      end
    end



  assign x_o = Delay4_out1;

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= CacheResultForXfer_out2;
        end
      end
    end



  assign y_o = Delay1_out1;

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= CacheResultForXfer_out3;
        end
      end
    end



  assign area_o = Delay2_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= CacheResultForXfer_out4;
        end
      end
    end



  assign bbox_x1_o = Delay3_out1;

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= CacheResultForXfer_out5;
        end
      end
    end



  assign bbox_y1_o = Delay5_out1;

  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= CacheResultForXfer_out6;
        end
      end
    end



  assign bbox_x2_o = Delay9_out1;

  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= CacheResultForXfer_out7;
        end
      end
    end



  assign bbox_y2_o = Delay13_out1;

  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_reg[0] <= 10'b0000000000;
        Delay12_reg[1] <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          Delay12_reg[0] <= Delay12_reg_next[0];
          Delay12_reg[1] <= Delay12_reg_next[1];
        end
      end
    end

  assign Delay12_out1 = Delay12_reg[1];
  assign Delay12_reg_next[0] = blobIndex;
  assign Delay12_reg_next[1] = Delay12_reg[0];



  always @(posedge clk or posedge reset)
    begin : delayMatch4_process
      if (reset == 1'b1) begin
        delayMatch4_reg[0] <= 10'b0000000000;
        delayMatch4_reg[1] <= 10'b0000000000;
        delayMatch4_reg[2] <= 10'b0000000000;
        delayMatch4_reg[3] <= 10'b0000000000;
        delayMatch4_reg[4] <= 10'b0000000000;
        delayMatch4_reg[5] <= 10'b0000000000;
        delayMatch4_reg[6] <= 10'b0000000000;
        delayMatch4_reg[7] <= 10'b0000000000;
        delayMatch4_reg[8] <= 10'b0000000000;
        delayMatch4_reg[9] <= 10'b0000000000;
        delayMatch4_reg[10] <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          delayMatch4_reg[0] <= delayMatch4_reg_next[0];
          delayMatch4_reg[1] <= delayMatch4_reg_next[1];
          delayMatch4_reg[2] <= delayMatch4_reg_next[2];
          delayMatch4_reg[3] <= delayMatch4_reg_next[3];
          delayMatch4_reg[4] <= delayMatch4_reg_next[4];
          delayMatch4_reg[5] <= delayMatch4_reg_next[5];
          delayMatch4_reg[6] <= delayMatch4_reg_next[6];
          delayMatch4_reg[7] <= delayMatch4_reg_next[7];
          delayMatch4_reg[8] <= delayMatch4_reg_next[8];
          delayMatch4_reg[9] <= delayMatch4_reg_next[9];
          delayMatch4_reg[10] <= delayMatch4_reg_next[10];
        end
      end
    end

  assign Delay12_out1_1 = delayMatch4_reg[10];
  assign delayMatch4_reg_next[0] = Delay12_out1;
  assign delayMatch4_reg_next[1] = delayMatch4_reg[0];
  assign delayMatch4_reg_next[2] = delayMatch4_reg[1];
  assign delayMatch4_reg_next[3] = delayMatch4_reg[2];
  assign delayMatch4_reg_next[4] = delayMatch4_reg[3];
  assign delayMatch4_reg_next[5] = delayMatch4_reg[4];
  assign delayMatch4_reg_next[6] = delayMatch4_reg[5];
  assign delayMatch4_reg_next[7] = delayMatch4_reg[6];
  assign delayMatch4_reg_next[8] = delayMatch4_reg[7];
  assign delayMatch4_reg_next[9] = delayMatch4_reg[8];
  assign delayMatch4_reg_next[10] = delayMatch4_reg[9];



  assign fbidx_o = Delay12_out1_1;

  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= number;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delayMatch5_process
      if (reset == 1'b1) begin
        delayMatch5_reg[0] <= 16'b0000000000000000;
        delayMatch5_reg[1] <= 16'b0000000000000000;
        delayMatch5_reg[2] <= 16'b0000000000000000;
        delayMatch5_reg[3] <= 16'b0000000000000000;
        delayMatch5_reg[4] <= 16'b0000000000000000;
        delayMatch5_reg[5] <= 16'b0000000000000000;
        delayMatch5_reg[6] <= 16'b0000000000000000;
        delayMatch5_reg[7] <= 16'b0000000000000000;
        delayMatch5_reg[8] <= 16'b0000000000000000;
        delayMatch5_reg[9] <= 16'b0000000000000000;
        delayMatch5_reg[10] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch5_reg[0] <= delayMatch5_reg_next[0];
          delayMatch5_reg[1] <= delayMatch5_reg_next[1];
          delayMatch5_reg[2] <= delayMatch5_reg_next[2];
          delayMatch5_reg[3] <= delayMatch5_reg_next[3];
          delayMatch5_reg[4] <= delayMatch5_reg_next[4];
          delayMatch5_reg[5] <= delayMatch5_reg_next[5];
          delayMatch5_reg[6] <= delayMatch5_reg_next[6];
          delayMatch5_reg[7] <= delayMatch5_reg_next[7];
          delayMatch5_reg[8] <= delayMatch5_reg_next[8];
          delayMatch5_reg[9] <= delayMatch5_reg_next[9];
          delayMatch5_reg[10] <= delayMatch5_reg_next[10];
        end
      end
    end

  assign Delay8_out1_1 = delayMatch5_reg[10];
  assign delayMatch5_reg_next[0] = Delay8_out1;
  assign delayMatch5_reg_next[1] = delayMatch5_reg[0];
  assign delayMatch5_reg_next[2] = delayMatch5_reg[1];
  assign delayMatch5_reg_next[3] = delayMatch5_reg[2];
  assign delayMatch5_reg_next[4] = delayMatch5_reg[3];
  assign delayMatch5_reg_next[5] = delayMatch5_reg[4];
  assign delayMatch5_reg_next[6] = delayMatch5_reg[5];
  assign delayMatch5_reg_next[7] = delayMatch5_reg[6];
  assign delayMatch5_reg_next[8] = delayMatch5_reg[7];
  assign delayMatch5_reg_next[9] = delayMatch5_reg[8];
  assign delayMatch5_reg_next[10] = delayMatch5_reg[9];



  assign num_o = Delay8_out1_1;

  assign vStart = Color_Space_Converter_out2_vStart;

  Hold_Signal_block1 u_Hold_Signal (.clk(clk),
                                    .reset(reset),
                                    .enb(clk_enable),
                                    .triggerStart(last),
                                    .triggerEnd(vStart),
                                    .Signal(Hold_Signal_out1)
                                    );

  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_reg[0] <= 1'b0;
        Delay14_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay14_reg[0] <= Delay14_reg_next[0];
          Delay14_reg[1] <= Delay14_reg_next[1];
        end
      end
    end

  assign Delay14_out1 = Delay14_reg[1];
  assign Delay14_reg_next[0] = Hold_Signal_out1;
  assign Delay14_reg_next[1] = Delay14_reg[0];



  always @(posedge clk or posedge reset)
    begin : delayMatch6_process
      if (reset == 1'b1) begin
        delayMatch6_reg[0] <= 1'b0;
        delayMatch6_reg[1] <= 1'b0;
        delayMatch6_reg[2] <= 1'b0;
        delayMatch6_reg[3] <= 1'b0;
        delayMatch6_reg[4] <= 1'b0;
        delayMatch6_reg[5] <= 1'b0;
        delayMatch6_reg[6] <= 1'b0;
        delayMatch6_reg[7] <= 1'b0;
        delayMatch6_reg[8] <= 1'b0;
        delayMatch6_reg[9] <= 1'b0;
        delayMatch6_reg[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          delayMatch6_reg[0] <= delayMatch6_reg_next[0];
          delayMatch6_reg[1] <= delayMatch6_reg_next[1];
          delayMatch6_reg[2] <= delayMatch6_reg_next[2];
          delayMatch6_reg[3] <= delayMatch6_reg_next[3];
          delayMatch6_reg[4] <= delayMatch6_reg_next[4];
          delayMatch6_reg[5] <= delayMatch6_reg_next[5];
          delayMatch6_reg[6] <= delayMatch6_reg_next[6];
          delayMatch6_reg[7] <= delayMatch6_reg_next[7];
          delayMatch6_reg[8] <= delayMatch6_reg_next[8];
          delayMatch6_reg[9] <= delayMatch6_reg_next[9];
          delayMatch6_reg[10] <= delayMatch6_reg_next[10];
        end
      end
    end

  assign Delay14_out1_1 = delayMatch6_reg[10];
  assign delayMatch6_reg_next[0] = Delay14_out1;
  assign delayMatch6_reg_next[1] = delayMatch6_reg[0];
  assign delayMatch6_reg_next[2] = delayMatch6_reg[1];
  assign delayMatch6_reg_next[3] = delayMatch6_reg[2];
  assign delayMatch6_reg_next[4] = delayMatch6_reg[3];
  assign delayMatch6_reg_next[5] = delayMatch6_reg[4];
  assign delayMatch6_reg_next[6] = delayMatch6_reg[5];
  assign delayMatch6_reg_next[7] = delayMatch6_reg[6];
  assign delayMatch6_reg_next[8] = delayMatch6_reg[7];
  assign delayMatch6_reg_next[9] = delayMatch6_reg[8];
  assign delayMatch6_reg_next[10] = delayMatch6_reg[9];



  assign data_ready_o = Delay14_out1_1;

  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay15_out1 <= CCA_Algorithm_out12;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : delayMatch7_process
      if (reset == 1'b1) begin
        delayMatch7_reg[0] <= 16'b0000000000000000;
        delayMatch7_reg[1] <= 16'b0000000000000000;
        delayMatch7_reg[2] <= 16'b0000000000000000;
        delayMatch7_reg[3] <= 16'b0000000000000000;
        delayMatch7_reg[4] <= 16'b0000000000000000;
        delayMatch7_reg[5] <= 16'b0000000000000000;
        delayMatch7_reg[6] <= 16'b0000000000000000;
        delayMatch7_reg[7] <= 16'b0000000000000000;
        delayMatch7_reg[8] <= 16'b0000000000000000;
        delayMatch7_reg[9] <= 16'b0000000000000000;
        delayMatch7_reg[10] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch7_reg[0] <= delayMatch7_reg_next[0];
          delayMatch7_reg[1] <= delayMatch7_reg_next[1];
          delayMatch7_reg[2] <= delayMatch7_reg_next[2];
          delayMatch7_reg[3] <= delayMatch7_reg_next[3];
          delayMatch7_reg[4] <= delayMatch7_reg_next[4];
          delayMatch7_reg[5] <= delayMatch7_reg_next[5];
          delayMatch7_reg[6] <= delayMatch7_reg_next[6];
          delayMatch7_reg[7] <= delayMatch7_reg_next[7];
          delayMatch7_reg[8] <= delayMatch7_reg_next[8];
          delayMatch7_reg[9] <= delayMatch7_reg_next[9];
          delayMatch7_reg[10] <= delayMatch7_reg_next[10];
        end
      end
    end

  assign Delay15_out1_1 = delayMatch7_reg[10];
  assign delayMatch7_reg_next[0] = Delay15_out1;
  assign delayMatch7_reg_next[1] = delayMatch7_reg[0];
  assign delayMatch7_reg_next[2] = delayMatch7_reg[1];
  assign delayMatch7_reg_next[3] = delayMatch7_reg[2];
  assign delayMatch7_reg_next[4] = delayMatch7_reg[3];
  assign delayMatch7_reg_next[5] = delayMatch7_reg[4];
  assign delayMatch7_reg_next[6] = delayMatch7_reg[5];
  assign delayMatch7_reg_next[7] = delayMatch7_reg[6];
  assign delayMatch7_reg_next[8] = delayMatch7_reg[7];
  assign delayMatch7_reg_next[9] = delayMatch7_reg[8];
  assign delayMatch7_reg_next[10] = delayMatch7_reg[9];



  assign totalNum_o = Delay15_out1_1;

  assign ce_out = clk_enable;

endmodule  // BlobDetector

