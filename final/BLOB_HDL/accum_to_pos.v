// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\accum_to_pos.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: accum_to_pos
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/cca/accum_to_pos
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module accum_to_pos
          (clk,
           reset,
           enb,
           x_accum,
           y_accum,
           npoints,
           x_o,
           y_o);


  input   clk;
  input   reset;
  input   enb;
  input   [23:0] x_accum;  // ufix24
  input   [23:0] y_accum;  // ufix24
  input   [16:0] npoints;  // ufix17
  output  [55:0] x_o;  // ufix56_En30
  output  [55:0] y_o;  // ufix56_En30


  wire [47:0] mergedInput;  // ufix48
  reg [47:0] mergedDelay_regin;  // ufix48
  reg [4:0] mergedDelay_waddr;  // ufix5
  wire mergedDelay_wrenb;  // ufix1
  reg [4:0] mergedDelay_raddr;  // ufix5
  wire [47:0] mergedDelay_regout;  // ufix48
  reg [47:0] mergedOutput;  // ufix48
  wire [23:0] slicedInput;  // ufix24
  reg [23:0] delayMatch_reg [0:13];  // ufix24 [14]
  wire [23:0] delayMatch_reg_next [0:13];  // ufix24 [14]
  wire [23:0] Integer_Delay2_out1;  // ufix24
  wire [31:0] Data_Type_Conversion3_out1;  // ufix32
  wire [31:0] Math_Reciprocal1_out1;  // ufix32
  wire [31:0] Data_Type_Conversion2_out1;  // ufix32_En30
  wire [55:0] Integer_Delay_out1;  // ufix56_En30
  wire [23:0] slicedInput_1;  // ufix24
  reg [23:0] delayMatch1_reg [0:13];  // ufix24 [14]
  wire [23:0] delayMatch1_reg_next [0:13];  // ufix24 [14]
  wire [23:0] Integer_Delay3_out1;  // ufix24
  wire [55:0] Integer_Delay1_out1;  // ufix56_En30


  assign mergedInput = {x_accum, y_accum};



  // Input register for RAM-based shift register mergedDelay
  always @(posedge clk or posedge reset)
    begin : mergedDelay_reginc_process
      if (reset == 1'b1) begin
        mergedDelay_regin <= 48'h000000000000;
      end
      else begin
        if (enb) begin
          mergedDelay_regin <= mergedInput;
        end
      end
    end



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 26
  // Write address counter for RAM-based shift register mergedDelay
  always @(posedge clk or posedge reset)
    begin : mergedDelay_wr_process
      if (reset == 1'b1) begin
        mergedDelay_waddr <= 5'b00000;
      end
      else begin
        if (enb) begin
          if (mergedDelay_waddr >= 5'b11010) begin
            mergedDelay_waddr <= 5'b00000;
          end
          else begin
            mergedDelay_waddr <= mergedDelay_waddr + 5'b00001;
          end
        end
      end
    end



  assign mergedDelay_wrenb = 1'b1;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 26
  // Read address counter for RAM-based shift register mergedDelay
  always @(posedge clk or posedge reset)
    begin : mergedDelay_rd_process
      if (reset == 1'b1) begin
        mergedDelay_raddr <= 5'b00001;
      end
      else begin
        if (enb) begin
          if (mergedDelay_raddr >= 5'b11010) begin
            mergedDelay_raddr <= 5'b00000;
          end
          else begin
            mergedDelay_raddr <= mergedDelay_raddr + 5'b00001;
          end
        end
      end
    end



  SimpleDualPortRAM_generic_block1 #(.AddrWidth(5),
                                     .DataWidth(48)
                                     )
                                   u_ShiftRegisterRAM (.clk(clk),
                                                       .enb(enb),
                                                       .wr_din(mergedDelay_regin),
                                                       .wr_addr(mergedDelay_waddr),
                                                       .wr_en(mergedDelay_wrenb),  // ufix1
                                                       .rd_addr(mergedDelay_raddr),
                                                       .rd_dout(mergedDelay_regout)
                                                       );

  // Output register for RAM-based shift register mergedDelay
  always @(posedge clk or posedge reset)
    begin : mergedDelay_regoutc_process
      if (reset == 1'b1) begin
        mergedOutput <= 48'h000000000000;
      end
      else begin
        if (enb) begin
          mergedOutput <= mergedDelay_regout;
        end
      end
    end



  assign slicedInput = mergedOutput[47:24];



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 24'b000000000000000000000000;
        delayMatch_reg[1] <= 24'b000000000000000000000000;
        delayMatch_reg[2] <= 24'b000000000000000000000000;
        delayMatch_reg[3] <= 24'b000000000000000000000000;
        delayMatch_reg[4] <= 24'b000000000000000000000000;
        delayMatch_reg[5] <= 24'b000000000000000000000000;
        delayMatch_reg[6] <= 24'b000000000000000000000000;
        delayMatch_reg[7] <= 24'b000000000000000000000000;
        delayMatch_reg[8] <= 24'b000000000000000000000000;
        delayMatch_reg[9] <= 24'b000000000000000000000000;
        delayMatch_reg[10] <= 24'b000000000000000000000000;
        delayMatch_reg[11] <= 24'b000000000000000000000000;
        delayMatch_reg[12] <= 24'b000000000000000000000000;
        delayMatch_reg[13] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
          delayMatch_reg[4] <= delayMatch_reg_next[4];
          delayMatch_reg[5] <= delayMatch_reg_next[5];
          delayMatch_reg[6] <= delayMatch_reg_next[6];
          delayMatch_reg[7] <= delayMatch_reg_next[7];
          delayMatch_reg[8] <= delayMatch_reg_next[8];
          delayMatch_reg[9] <= delayMatch_reg_next[9];
          delayMatch_reg[10] <= delayMatch_reg_next[10];
          delayMatch_reg[11] <= delayMatch_reg_next[11];
          delayMatch_reg[12] <= delayMatch_reg_next[12];
          delayMatch_reg[13] <= delayMatch_reg_next[13];
        end
      end
    end

  assign Integer_Delay2_out1 = delayMatch_reg[13];
  assign delayMatch_reg_next[0] = slicedInput;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];
  assign delayMatch_reg_next[4] = delayMatch_reg[3];
  assign delayMatch_reg_next[5] = delayMatch_reg[4];
  assign delayMatch_reg_next[6] = delayMatch_reg[5];
  assign delayMatch_reg_next[7] = delayMatch_reg[6];
  assign delayMatch_reg_next[8] = delayMatch_reg[7];
  assign delayMatch_reg_next[9] = delayMatch_reg[8];
  assign delayMatch_reg_next[10] = delayMatch_reg[9];
  assign delayMatch_reg_next[11] = delayMatch_reg[10];
  assign delayMatch_reg_next[12] = delayMatch_reg[11];
  assign delayMatch_reg_next[13] = delayMatch_reg[12];



  nfp_convert_fix_17_En0_to_single u_BlobAnalysisHDL_BlobDetector_CCA_Algorithm_cca_accum_to_pos_nfp_convert_fix_17_En0_to_single (.clk(clk),
                                                                                                                                   .reset(reset),
                                                                                                                                   .enb(enb),
                                                                                                                                   .nfp_in(npoints),  // ufix17
                                                                                                                                   .nfp_out(Data_Type_Conversion3_out1)  // single
                                                                                                                                   );

  nfp_recip_single u_nfp_recip_comp (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .nfp_in(Data_Type_Conversion3_out1),  // single
                                     .nfp_out(Math_Reciprocal1_out1)  // single
                                     );

  nfp_convert_single_to_fix_32_En30 u_BlobAnalysisHDL_BlobDetector_CCA_Algorithm_cca_accum_to_pos_nfp_convert_single_to_fix_32_En30 (.clk(clk),
                                                                                                                                     .reset(reset),
                                                                                                                                     .enb(enb),
                                                                                                                                     .nfp_in(Math_Reciprocal1_out1),  // single
                                                                                                                                     .nfp_out(Data_Type_Conversion2_out1)  // ufix32_En30
                                                                                                                                     );

  assign Integer_Delay_out1 = Integer_Delay2_out1 * Data_Type_Conversion2_out1;



  assign x_o = Integer_Delay_out1;

  assign slicedInput_1 = mergedOutput[23:0];



  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg[0] <= 24'b000000000000000000000000;
        delayMatch1_reg[1] <= 24'b000000000000000000000000;
        delayMatch1_reg[2] <= 24'b000000000000000000000000;
        delayMatch1_reg[3] <= 24'b000000000000000000000000;
        delayMatch1_reg[4] <= 24'b000000000000000000000000;
        delayMatch1_reg[5] <= 24'b000000000000000000000000;
        delayMatch1_reg[6] <= 24'b000000000000000000000000;
        delayMatch1_reg[7] <= 24'b000000000000000000000000;
        delayMatch1_reg[8] <= 24'b000000000000000000000000;
        delayMatch1_reg[9] <= 24'b000000000000000000000000;
        delayMatch1_reg[10] <= 24'b000000000000000000000000;
        delayMatch1_reg[11] <= 24'b000000000000000000000000;
        delayMatch1_reg[12] <= 24'b000000000000000000000000;
        delayMatch1_reg[13] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
          delayMatch1_reg[2] <= delayMatch1_reg_next[2];
          delayMatch1_reg[3] <= delayMatch1_reg_next[3];
          delayMatch1_reg[4] <= delayMatch1_reg_next[4];
          delayMatch1_reg[5] <= delayMatch1_reg_next[5];
          delayMatch1_reg[6] <= delayMatch1_reg_next[6];
          delayMatch1_reg[7] <= delayMatch1_reg_next[7];
          delayMatch1_reg[8] <= delayMatch1_reg_next[8];
          delayMatch1_reg[9] <= delayMatch1_reg_next[9];
          delayMatch1_reg[10] <= delayMatch1_reg_next[10];
          delayMatch1_reg[11] <= delayMatch1_reg_next[11];
          delayMatch1_reg[12] <= delayMatch1_reg_next[12];
          delayMatch1_reg[13] <= delayMatch1_reg_next[13];
        end
      end
    end

  assign Integer_Delay3_out1 = delayMatch1_reg[13];
  assign delayMatch1_reg_next[0] = slicedInput_1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];
  assign delayMatch1_reg_next[2] = delayMatch1_reg[1];
  assign delayMatch1_reg_next[3] = delayMatch1_reg[2];
  assign delayMatch1_reg_next[4] = delayMatch1_reg[3];
  assign delayMatch1_reg_next[5] = delayMatch1_reg[4];
  assign delayMatch1_reg_next[6] = delayMatch1_reg[5];
  assign delayMatch1_reg_next[7] = delayMatch1_reg[6];
  assign delayMatch1_reg_next[8] = delayMatch1_reg[7];
  assign delayMatch1_reg_next[9] = delayMatch1_reg[8];
  assign delayMatch1_reg_next[10] = delayMatch1_reg[9];
  assign delayMatch1_reg_next[11] = delayMatch1_reg[10];
  assign delayMatch1_reg_next[12] = delayMatch1_reg[11];
  assign delayMatch1_reg_next[13] = delayMatch1_reg[12];



  assign Integer_Delay1_out1 = Integer_Delay3_out1 * Data_Type_Conversion2_out1;



  assign y_o = Integer_Delay1_out1;

endmodule  // accum_to_pos

