// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\Color_Space_Converter.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Color_Space_Converter
// Source Path: BlobAnalysisHDL/BlobDetector/Color Space Converter
// Hierarchy Level: 1
// 
// Color Space Converter
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Color_Space_Converter
          (clk,
           reset,
           enb,
           in0_0,
           in0_1,
           in0_2,
           in1_hStart,
           in1_hEnd,
           in1_vStart,
           in1_vEnd,
           in1_valid,
           out0,
           out1_hStart,
           out1_hEnd,
           out1_vStart,
           out1_vEnd,
           out1_valid);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] in0_0;  // uint8
  input   [7:0] in0_1;  // uint8
  input   [7:0] in0_2;  // uint8
  input   in1_hStart;
  input   in1_hEnd;
  input   in1_vStart;
  input   in1_vEnd;
  input   in1_valid;
  output  [7:0] out0;  // uint8
  output  out1_hStart;
  output  out1_hEnd;
  output  out1_vStart;
  output  out1_vEnd;
  output  out1_valid;


  wire [7:0] pixelIn [0:2];  // uint8 [3]
  reg [7:0] pixelInReg [0:2];  // uint8 [3]
  reg  hStartInReg;
  reg  hEndInReg;
  reg  vStartInReg;
  reg  vEndInReg;
  reg  validInReg;
  wire [7:0] pixelOut;  // uint8
  wire hStartOut;
  wire hEndOut;
  wire vStartOut;
  wire vEndOut;
  wire validOut;


  assign pixelIn[0] = in0_0;
  assign pixelIn[1] = in0_1;
  assign pixelIn[2] = in0_2;

  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        pixelInReg[0] <= 8'b00000000;
        pixelInReg[1] <= 8'b00000000;
        pixelInReg[2] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          pixelInReg[0] <= pixelIn[0];
          pixelInReg[1] <= pixelIn[1];
          pixelInReg[2] <= pixelIn[2];
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        hStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          hStartInReg <= in1_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        hEndInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndInReg <= in1_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        vStartInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          vStartInReg <= in1_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_4_process
      if (reset == 1'b1) begin
        vEndInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          vEndInReg <= in1_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_5_process
      if (reset == 1'b1) begin
        validInReg <= 1'b0;
      end
      else begin
        if (enb) begin
          validInReg <= in1_valid;
        end
      end
    end



  RGB2INTENSITY u_rgb2intensityNet_inst (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .R(pixelInReg[0]),  // uint8
                                         .G(pixelInReg[1]),  // uint8
                                         .B(pixelInReg[2]),  // uint8
                                         .hStartIn(hStartInReg),
                                         .hEndIn(hEndInReg),
                                         .vStartIn(vStartInReg),
                                         .vEndIn(vEndInReg),
                                         .validIn(validInReg),
                                         .Intensity(pixelOut),  // uint8
                                         .hStartOut(hStartOut),
                                         .hEndOut(hEndOut),
                                         .vStartOut(vStartOut),
                                         .vEndOut(vEndOut),
                                         .validOut(validOut)
                                         );

  assign out0 = pixelOut;

  assign out1_hStart = hStartOut;

  assign out1_hEnd = hEndOut;

  assign out1_vStart = vStartOut;

  assign out1_vEnd = vEndOut;

  assign out1_valid = validOut;

endmodule  // Color_Space_Converter

