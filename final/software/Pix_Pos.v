// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\Pix_Pos.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Pix_Pos
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/TimingSubsystem/Pix_Pos
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Pix_Pos
          (clk,
           reset,
           enb,
           Ctrl_i_hEnd,
           Ctrl_i_valid,
           Rst,
           Column,
           Row);


  input   clk;
  input   reset;
  input   enb;
  input   Ctrl_i_hEnd;
  input   Ctrl_i_valid;
  input   Rst;
  output  [8:0] Column;  // ufix9
  output  [7:0] Row;  // uint8


  wire valid;
  wire [8:0] count_step;  // ufix9
  wire [8:0] count_from;  // ufix9
  wire [8:0] count_reset;  // ufix9
  reg [8:0] column_1;  // ufix9
  wire [8:0] count;  // ufix9
  wire need_to_wrap;
  wire [8:0] count_value;  // ufix9
  wire [8:0] count_1;  // ufix9
  wire [8:0] count_2;  // ufix9
  wire [8:0] column_2;  // ufix9
  wire hEnd;
  wire Logical_Operator_out1;
  wire [7:0] count_step_1;  // uint8
  wire [7:0] count_from_1;  // uint8
  wire [7:0] count_reset_1;  // uint8
  reg [7:0] row_1;  // uint8
  wire [7:0] count_3;  // uint8
  wire need_to_wrap_1;
  wire [7:0] count_value_1;  // uint8
  wire [7:0] count_4;  // uint8
  wire [7:0] count_5;  // uint8
  wire [7:0] row_2;  // uint8


  assign valid = Ctrl_i_valid;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 319
  assign count_step = 9'b000000001;



  assign count_from = 9'b000000000;



  assign count_reset = 9'b000000000;



  assign count = column_1 + count_step;



  assign need_to_wrap = column_1 == 9'b100111111;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (valid == 1'b0 ? column_1 :
              count_value);



  assign count_2 = (Rst == 1'b0 ? count_1 :
              count_reset);



  always @(posedge clk or posedge reset)
    begin : ColumnCntr_process
      if (reset == 1'b1) begin
        column_1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          column_1 <= count_2;
        end
      end
    end



  assign column_2 = column_1;

  assign Column = column_2;

  assign hEnd = Ctrl_i_hEnd;

  assign Logical_Operator_out1 = hEnd & valid;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 239
  assign count_step_1 = 8'b00000001;



  assign count_from_1 = 8'b00000000;



  assign count_reset_1 = 8'b00000000;



  assign count_3 = row_1 + count_step_1;



  assign need_to_wrap_1 = row_1 == 8'b11101111;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_3 :
              count_from_1);



  assign count_4 = (Logical_Operator_out1 == 1'b0 ? row_1 :
              count_value_1);



  assign count_5 = (Rst == 1'b0 ? count_4 :
              count_reset_1);



  always @(posedge clk or posedge reset)
    begin : RowCntr_process
      if (reset == 1'b1) begin
        row_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          row_1 <= count_5;
        end
      end
    end



  assign row_2 = row_1;

  assign Row = row_2;

endmodule  // Pix_Pos

