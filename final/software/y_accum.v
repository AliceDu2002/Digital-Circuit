// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\y_accum.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: y_accum
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/cca/y_accum
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module y_accum
          (clk,
           reset,
           enb,
           Inc,
           Rst,
           En,
           blobIdx,
           Cnt);


  input   clk;
  input   reset;
  input   enb;
  input   [23:0] Inc;  // ufix24
  input   Rst;
  input   En;
  input   [9:0] blobIdx;  // ufix10
  output  [23:0] Cnt;  // ufix24


  reg  wren;
  reg  wren_1;
  wire wren_2;
  wire NOT_out1;
  reg [9:0] wraddr;  // ufix10
  wire Relational_Operator_relop1;
  reg  sameIdx;
  wire Logical_Operator1_out1;
  reg [23:0] xincr;  // ufix24
  wire [23:0] zero_out1;  // ufix24
  wire [23:0] din;  // ufix24
  reg [23:0] incrVal;  // ufix24
  wire [23:0] rdout;  // ufix24
  wire [23:0] dataAccumVal;  // ufix24
  wire [24:0] Add_1;  // ufix25
  wire [24:0] Add_2;  // ufix25
  wire [24:0] incraccum;  // ufix25
  wire [23:0] incraccum_dtc;  // ufix24
  wire [23:0] din_1;  // ufix24
  wire [23:0] wrout;  // ufix24


  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        wren <= 1'b0;
      end
      else begin
        if (enb) begin
          wren <= Rst;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        wren_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          wren_1 <= En;
        end
      end
    end



  assign wren_2 = wren | wren_1;



  assign NOT_out1 =  ~ wren_2;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        wraddr <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          wraddr <= blobIdx;
        end
      end
    end



  assign Relational_Operator_relop1 = wraddr == blobIdx;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        sameIdx <= 1'b0;
      end
      else begin
        if (enb) begin
          sameIdx <= Relational_Operator_relop1;
        end
      end
    end



  assign Logical_Operator1_out1 = wren | NOT_out1;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        xincr <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          xincr <= Inc;
        end
      end
    end



  assign zero_out1 = 24'b000000000000000000000000;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        incrVal <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          incrVal <= din;
        end
      end
    end



  assign dataAccumVal = (sameIdx == 1'b0 ? rdout :
              incrVal);



  assign Add_1 = {1'b0, dataAccumVal};
  assign Add_2 = {1'b0, xincr};
  assign incraccum = Add_1 + Add_2;



  assign incraccum_dtc = incraccum[23:0];



  assign din = (Logical_Operator1_out1 == 1'b0 ? incraccum_dtc :
              zero_out1);



  assign din_1 = din;

  DualPortRAM_generic #(.AddrWidth(10),
                        .DataWidth(24)
                        )
                      u_Dual_Port_RAM_System (.clk(clk),
                                              .enb(enb),
                                              .wr_din(din_1),
                                              .wr_addr(wraddr),
                                              .wr_en(wren_2),
                                              .rd_addr(blobIdx),
                                              .wr_dout(wrout),
                                              .rd_dout(rdout)
                                              );

  assign Cnt = rdout;

endmodule  // y_accum

