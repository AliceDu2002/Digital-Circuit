// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\nfp_recip_single.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_recip_single
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/cca/accum_to_pos/nfp_recip_single
// Hierarchy Level: 4
// 
// {Latency Strategy = "Max", Denormal Handling = "off"}
// {Radix = "2"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_recip_single
          (clk,
           reset,
           enb,
           nfp_in,
           nfp_out);


  input   clk;
  input   reset;
  input   enb;
  input   [31:0] nfp_in;  // ufix32
  output  [31:0] nfp_out;  // ufix32


  wire Constant8_out1;  // ufix1
  wire [5:0] Constant7_out1;  // ufix6
  wire Relational_Operator_relop1;
  reg  Delay4_out1;  // ufix1
  wire Logical_Operator_out1;  // ufix1
  wire [5:0] Add_out1;  // ufix6
  reg [5:0] Delay3_out1;  // ufix6
  wire [5:0] Add_1;  // ufix6
  reg  Delay1_out1;  // ufix1
  wire aSign;  // ufix1
  wire [7:0] aExponent;  // ufix8
  wire [22:0] aMantissa;  // ufix23
  reg  [0:29] Delay21_P30_reg;  // ufix1 [30]
  wire [0:29] Delay21_P30_reg_next;  // ufix1 [30]
  wire Delay21_P30_out1;  // ufix1
  wire Constant1_out1;  // ufix1
  wire Switch1_out1;  // ufix1
  reg  Delay3_out1_1;  // ufix1
  reg [7:0] Delay1_P1_out1;  // ufix8
  wire aExponent_cfType_Exponent_I_out1;  // ufix1
  wire aExponent_0_out1;  // ufix1
  reg [22:0] Delay2_P1_out1;  // ufix23
  wire [22:0] Constant_out1;  // ufix23
  wire [22:0] Switch_out1;  // ufix23
  wire aMantissa_0_out1;  // ufix1
  wire alphaaExponent_0_aMantissa_out1;  // ufix1
  wire alphaaExponent_cfType_Exponent_out1;  // ufix1
  reg  [0:28] Delay8_P30_reg;  // ufix1 [29]
  wire [0:28] Delay8_P30_reg_next;  // ufix1 [29]
  wire Delay8_P30_out1;  // ufix1
  wire [1:0] alpha0_out1;  // ufix2
  wire alphaExponent_0_cfType_Exp_out1;
  wire alpha1_out1;  // ufix1
  wire alpha0_out1_1;  // ufix1
  wire if_Exponent_0_cfType_Exp_out1;  // ufix1
  wire [23:0] Bit_Concat1_out1;  // ufix24
  reg [23:0] Delay1_P2_out1;  // ufix24
  wire [25:0] Bit_Concat_out1;  // ufix26
  wire signed [25:0] reinterpretcast_bitconcat_fi_0_out1;  // sfix26
  reg signed [25:0] Delay4_P3_out1;  // sfix26
  wire [22:0] BitSlice_out1;  // ufix23
  wire bitsliceget_mant_a_cfType_Man_out1;
  wire signed [9:0] c2_out1;  // sfix10
  wire [7:0] Delay1_P1_out1_dtc;  // uint8
  wire [7:0] C_out1;  // uint8
  wire [7:0] if_Exponent_0_out1;  // uint8
  reg [7:0] Delay2_P2_out1;  // uint8
  wire signed [9:0] DTC_out1;  // sfix10
  reg signed [9:0] Delay3_P3_out1;  // sfix10
  reg signed [9:0] Delay3_P4_out1;  // sfix10
  wire signed [9:0] c1_out1;  // sfix10
  reg  Delay2_P4_out1;
  wire signed [9:0] sub1_out1;  // sfix10
  wire signed [9:0] sub2_out1;  // sfix10
  wire signed [9:0] s0_out1;  // sfix10
  reg signed [9:0] Delay_P29_out1;  // sfix10
  wire relop2_out1;
  wire relop3_out1;
  wire [4:0] C3_out1;  // ufix5
  wire relop1_out1;
  wire [4:0] C1_out1_1;  // ufix5
  wire [4:0] C_out1_1;  // ufix5
  wire [4:0] s1_out1;  // ufix5
  wire [4:0] s3_out1;  // ufix5
  wire [4:0] C5_out1;  // ufix5
  wire [4:0] s4_out1;  // ufix5
  reg [4:0] Delay11_P5_28_reg [0:23];  // ufix5 [24]
  wire [4:0] Delay11_P5_28_reg_next [0:23];  // ufix5 [24]
  wire [4:0] Delay11_P5_28_out1;  // ufix5
  wire shift_length_1_out1;
  wire shift_length_1_out1_1;
  wire C_out1_2;  // ufix1
  reg  Delay_P5_out1;  // ufix1
  wire signed [25:0] C1_out1_2;  // sfix26
  wire signed [25:0] C_out1_3;  // sfix26
  wire signed [25:0] if_bitsliceget_mant_a_cfType_Ma_out1;  // sfix26
  reg signed [25:0] Delay1_P4_out1;  // sfix26
  wire signed [26:0] Unary_Minus_in0;  // sfix27
  wire signed [26:0] Unary_Minus_1;  // sfix27
  wire signed [25:0] Unary_Minus_out1;  // sfix26
  reg signed [25:0] Delay_P4_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1;  // sfix26
  wire signed [25:0] bitsll_R_1_out1;  // sfix26
  reg signed [25:0] Delay1_P5_out1;  // sfix26
  reg signed [25:0] Delay2_P5_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_1;  // sfix26
  wire Bit_Slice_out1;  // ufix1
  wire Logical_Operator_out1_1;
  wire [1:0] Bit_Concat_out1_1;  // ufix2
  reg [1:0] Delay3_P6_out1;  // ufix2
  wire signed [25:0] if_tmp_0_1_out1;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_1;  // sfix26
  reg signed [25:0] Delay4_P6_out1;  // sfix26
  reg signed [25:0] Delay5_P6_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_2;  // sfix26
  wire Bit_Slice_out1_1;  // ufix1
  wire Logical_Operator_out1_2;
  wire [2:0] Bit_Concat_out1_2;  // ufix3
  reg [2:0] Delay6_P7_out1;  // ufix3
  wire signed [25:0] if_tmp_0_1_out1_1;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_2;  // sfix26
  reg signed [25:0] Delay7_P7_out1;  // sfix26
  reg signed [25:0] Delay8_P7_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_3;  // sfix26
  wire Bit_Slice_out1_2;  // ufix1
  wire Logical_Operator_out1_3;
  wire [3:0] Bit_Concat_out1_3;  // ufix4
  reg [3:0] Delay9_P8_out1;  // ufix4
  wire signed [25:0] if_tmp_0_1_out1_2;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_3;  // sfix26
  reg signed [25:0] Delay10_P8_out1;  // sfix26
  reg signed [25:0] Delay11_P8_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_4;  // sfix26
  wire Bit_Slice_out1_3;  // ufix1
  wire Logical_Operator_out1_4;
  wire [4:0] Bit_Concat_out1_4;  // ufix5
  reg [4:0] Delay_P9_out1;  // ufix5
  wire signed [25:0] if_tmp_0_1_out1_3;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_4;  // sfix26
  reg signed [25:0] Delay1_P9_out1;  // sfix26
  reg signed [25:0] Delay2_P9_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_5;  // sfix26
  wire Bit_Slice_out1_4;  // ufix1
  wire Logical_Operator_out1_5;
  wire [5:0] Bit_Concat_out1_5;  // ufix6
  reg [5:0] Delay_P10_out1;  // ufix6
  wire signed [25:0] if_tmp_0_1_out1_4;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_5;  // sfix26
  reg signed [25:0] Delay1_P10_out1;  // sfix26
  reg signed [25:0] Delay2_P10_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_6;  // sfix26
  wire Bit_Slice_out1_5;  // ufix1
  wire Logical_Operator_out1_6;
  wire [6:0] Bit_Concat_out1_6;  // ufix7
  reg [6:0] Delay3_P11_out1;  // ufix7
  wire signed [25:0] if_tmp_0_1_out1_5;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_6;  // sfix26
  reg signed [25:0] Delay4_P11_out1;  // sfix26
  reg signed [25:0] Delay5_P11_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_7;  // sfix26
  wire Bit_Slice_out1_6;  // ufix1
  wire Logical_Operator_out1_7;
  wire [7:0] Bit_Concat_out1_7;  // uint8
  reg [7:0] Delay6_P12_out1;  // uint8
  wire signed [25:0] if_tmp_0_1_out1_6;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_7;  // sfix26
  reg signed [25:0] Delay7_P12_out1;  // sfix26
  reg signed [25:0] Delay8_P12_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_8;  // sfix26
  wire Bit_Slice_out1_7;  // ufix1
  wire Logical_Operator_out1_8;
  wire [8:0] Bit_Concat_out1_8;  // ufix9
  reg [8:0] Delay9_P13_out1;  // ufix9
  wire signed [25:0] if_tmp_0_1_out1_7;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_8;  // sfix26
  reg signed [25:0] Delay10_P13_out1;  // sfix26
  reg signed [25:0] Delay11_P13_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_9;  // sfix26
  wire Bit_Slice_out1_8;  // ufix1
  wire Logical_Operator_out1_9;
  wire [9:0] Bit_Concat_out1_9;  // ufix10
  reg [9:0] Delay3_P14_out1;  // ufix10
  wire signed [25:0] if_tmp_0_1_out1_8;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_9;  // sfix26
  reg signed [25:0] Delay4_P14_out1;  // sfix26
  reg signed [25:0] Delay5_P14_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_10;  // sfix26
  wire Bit_Slice_out1_9;  // ufix1
  wire Logical_Operator_out1_10;
  wire [10:0] Bit_Concat_out1_10;  // ufix11
  reg [10:0] Delay_P15_out1;  // ufix11
  wire signed [25:0] if_tmp_0_1_out1_9;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_10;  // sfix26
  reg signed [25:0] Delay1_P15_out1;  // sfix26
  reg signed [25:0] Delay2_P15_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_11;  // sfix26
  wire Bit_Slice_out1_10;  // ufix1
  wire Logical_Operator_out1_11;
  wire [11:0] Bit_Concat_out1_11;  // ufix12
  reg [11:0] Delay3_P16_out1;  // ufix12
  wire signed [25:0] if_tmp_0_1_out1_10;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_11;  // sfix26
  reg signed [25:0] Delay4_P16_out1;  // sfix26
  reg signed [25:0] Delay5_P16_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_12;  // sfix26
  wire Bit_Slice_out1_11;  // ufix1
  wire Logical_Operator_out1_12;
  wire [12:0] Bit_Concat_out1_12;  // ufix13
  reg [12:0] Delay6_P17_out1;  // ufix13
  wire signed [25:0] if_tmp_0_1_out1_11;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_12;  // sfix26
  reg signed [25:0] Delay7_P17_out1;  // sfix26
  reg signed [25:0] Delay8_P17_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_13;  // sfix26
  wire Bit_Slice_out1_12;  // ufix1
  wire Logical_Operator_out1_13;
  wire [13:0] Bit_Concat_out1_13;  // ufix14
  reg [13:0] Delay9_P18_out1;  // ufix14
  wire signed [25:0] if_tmp_0_1_out1_12;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_13;  // sfix26
  reg signed [25:0] Delay10_P18_out1;  // sfix26
  reg signed [25:0] Delay11_P18_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_14;  // sfix26
  wire Bit_Slice_out1_13;  // ufix1
  wire Logical_Operator_out1_14;
  wire [14:0] Bit_Concat_out1_14;  // ufix15
  reg [14:0] Delay6_P19_out1;  // ufix15
  wire signed [25:0] if_tmp_0_1_out1_13;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_14;  // sfix26
  reg signed [25:0] Delay7_P19_out1;  // sfix26
  reg signed [25:0] Delay8_P19_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_15;  // sfix26
  wire Bit_Slice_out1_14;  // ufix1
  wire Logical_Operator_out1_15;
  wire [15:0] Bit_Concat_out1_15;  // uint16
  reg [15:0] Delay_P20_out1;  // uint16
  wire signed [25:0] if_tmp_0_1_out1_14;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_15;  // sfix26
  reg signed [25:0] Delay1_P20_out1;  // sfix26
  reg signed [25:0] Delay2_P20_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_16;  // sfix26
  wire Bit_Slice_out1_15;  // ufix1
  wire Logical_Operator_out1_16;
  wire [16:0] Bit_Concat_out1_16;  // ufix17
  reg [16:0] Delay3_P21_out1;  // ufix17
  wire signed [25:0] if_tmp_0_1_out1_15;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_16;  // sfix26
  reg signed [25:0] Delay4_P21_out1;  // sfix26
  reg signed [25:0] Delay5_P21_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_17;  // sfix26
  wire Bit_Slice_out1_16;  // ufix1
  wire Logical_Operator_out1_17;
  wire [17:0] Bit_Concat_out1_17;  // ufix18
  reg [17:0] Delay6_P22_out1;  // ufix18
  wire signed [25:0] if_tmp_0_1_out1_16;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_17;  // sfix26
  reg signed [25:0] Delay7_P22_out1;  // sfix26
  reg signed [25:0] Delay8_P22_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_18;  // sfix26
  wire Bit_Slice_out1_17;  // ufix1
  wire Logical_Operator_out1_18;
  wire [18:0] Bit_Concat_out1_18;  // ufix19
  reg [18:0] Delay9_P23_out1;  // ufix19
  wire signed [25:0] if_tmp_0_1_out1_17;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_18;  // sfix26
  reg signed [25:0] Delay10_P23_out1;  // sfix26
  reg signed [25:0] Delay11_P23_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_19;  // sfix26
  wire Bit_Slice_out1_18;  // ufix1
  wire Logical_Operator_out1_19;
  wire [19:0] Bit_Concat_out1_19;  // ufix20
  reg [19:0] Delay9_P24_out1;  // ufix20
  wire signed [25:0] if_tmp_0_1_out1_18;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_19;  // sfix26
  reg signed [25:0] Delay10_P24_out1;  // sfix26
  reg signed [25:0] Delay11_P24_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_20;  // sfix26
  wire Bit_Slice_out1_19;  // ufix1
  wire Logical_Operator_out1_20;
  wire [20:0] Bit_Concat_out1_20;  // ufix21
  reg [20:0] Delay_P25_out1;  // ufix21
  wire signed [25:0] if_tmp_0_1_out1_19;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_20;  // sfix26
  reg signed [25:0] Delay1_P25_out1;  // sfix26
  reg signed [25:0] Delay2_P25_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_21;  // sfix26
  wire Bit_Slice_out1_20;  // ufix1
  wire Logical_Operator_out1_21;
  wire [21:0] Bit_Concat_out1_21;  // ufix22
  reg [21:0] Delay3_P26_out1;  // ufix22
  wire signed [25:0] if_tmp_0_1_out1_20;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_21;  // sfix26
  reg signed [25:0] Delay4_P26_out1;  // sfix26
  reg signed [25:0] Delay5_P26_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_22;  // sfix26
  wire Bit_Slice_out1_21;  // ufix1
  wire Logical_Operator_out1_22;
  wire [22:0] Bit_Concat_out1_22;  // ufix23
  reg [22:0] Delay6_P27_out1;  // ufix23
  wire signed [25:0] if_tmp_0_1_out1_21;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_22;  // sfix26
  reg signed [25:0] Delay7_P27_out1;  // sfix26
  reg signed [25:0] Delay8_P27_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_23;  // sfix26
  wire Bit_Slice_out1_22;  // ufix1
  wire Logical_Operator_out1_23;
  wire [23:0] Bit_Concat_out1_23;  // ufix24
  reg [23:0] Delay9_P28_out1;  // ufix24
  wire signed [25:0] if_tmp_0_1_out1_22;  // sfix26
  wire signed [25:0] bitsll_R_1_out1_23;  // sfix26
  reg signed [25:0] Delay10_P28_out1;  // sfix26
  reg signed [25:0] Delay11_P28_out1;  // sfix26
  wire signed [25:0] R_mant_b_norm_out1_24;  // sfix26
  wire Bit_Slice_out1_23;  // ufix1
  wire Logical_Operator_out1_24;
  wire [24:0] Bit_Concat_out1_24;  // ufix25
  reg [24:0] Delay6_P29_out1;  // ufix25
  wire [24:0] C_out1_4;  // ufix25
  wire [24:0] if_shift_length_1_out1;  // ufix25
  wire [24:0] bitsrl_Q_1_out1;  // ufix25
  wire [24:0] if_shift_length_1_out1_1;  // ufix25
  wire [23:0] BitSlice_out1_1;  // ufix24
  reg [23:0] Delay9_P30_out1;  // ufix24
  wire BitSlice1_out1;  // ufix1
  wire signed [25:0] if_tmp_0_1_out1_23;  // sfix26
  wire Bit_Slice10_out1;  // ufix1
  wire Bit_Slice9_out1;  // ufix1
  wire Bit_Slice7_out1;  // ufix1
  wire Bit_Slice8_out1;  // ufix1
  wire Bit_Slice11_out1;  // ufix1
  wire [2:0] Bit_Slice_out1_24;  // ufix3
  wire Constant_out1_1;  // ufix1
  wire [3:0] Bit_Concat_out1_25;  // ufix4
  wire Bit_Slice_out1_25;  // ufix1
  wire Bit_Slice1_out1;  // ufix1
  wire Logical_Operator_out1_25;
  wire Switch6_out1;
  wire Bit_Slice2_out1;  // ufix1
  wire Logical_Operator1_out1;
  wire Bit_Slice3_out1;  // ufix1
  wire Logical_Operator2_out1;
  wire Switch7_out1;
  wire Switch3_out1;
  wire [3:0] Bit_Slice1_out1_1;  // ufix4
  wire Bit_Slice_out1_26;  // ufix1
  wire Logical_Operator3_out1;
  wire Bit_Slice1_out1_2;  // ufix1
  wire Logical_Operator_out1_26;
  wire Switch6_out1_1;
  wire Bit_Slice2_out1_1;  // ufix1
  wire Logical_Operator1_out1_1;
  wire Bit_Slice3_out1_1;  // ufix1
  wire Logical_Operator2_out1_1;
  wire Switch7_out1_1;
  wire Switch3_out1_1;
  wire Switch6_out1_2;
  wire [3:0] Bit_Slice2_out1_2;  // ufix4
  wire Bit_Slice_out1_27;  // ufix1
  wire Logical_Operator3_out1_1;
  wire Bit_Slice1_out1_3;  // ufix1
  wire Logical_Operator_out1_27;
  wire Switch6_out1_3;
  wire Bit_Slice2_out1_3;  // ufix1
  wire Logical_Operator1_out1_2;
  wire Bit_Slice3_out1_2;  // ufix1
  wire Logical_Operator2_out1_2;
  wire Switch7_out1_2;
  wire Switch3_out1_2;
  wire [3:0] Bit_Slice3_out1_3;  // ufix4
  wire Bit_Slice_out1_28;  // ufix1
  wire Logical_Operator3_out1_2;
  wire Bit_Slice1_out1_4;  // ufix1
  wire Logical_Operator_out1_28;
  wire Switch6_out1_4;
  wire Bit_Slice2_out1_4;  // ufix1
  wire Logical_Operator1_out1_3;
  wire Bit_Slice3_out1_4;  // ufix1
  wire Logical_Operator2_out1_3;
  wire Switch7_out1_3;
  wire Switch3_out1_3;
  wire Switch7_out1_4;
  wire Switch3_out1_4;
  wire [3:0] Bit_Slice4_out1;  // ufix4
  wire Bit_Slice_out1_29;  // ufix1
  wire Logical_Operator3_out1_3;
  wire Bit_Slice1_out1_5;  // ufix1
  wire Logical_Operator_out1_29;
  wire Switch6_out1_5;
  wire Bit_Slice2_out1_5;  // ufix1
  wire Logical_Operator1_out1_4;
  wire Bit_Slice3_out1_5;  // ufix1
  wire Logical_Operator2_out1_4;
  wire Switch7_out1_5;
  wire Switch3_out1_5;
  wire [3:0] Bit_Slice5_out1;  // ufix4
  wire Bit_Slice_out1_30;  // ufix1
  wire Logical_Operator3_out1_4;
  wire Bit_Slice1_out1_6;  // ufix1
  wire Logical_Operator_out1_30;
  wire Switch6_out1_6;
  wire Bit_Slice2_out1_6;  // ufix1
  wire Logical_Operator1_out1_5;
  wire Bit_Slice3_out1_6;  // ufix1
  wire Logical_Operator2_out1_5;
  wire Switch7_out1_6;
  wire Switch3_out1_6;
  wire Switch4_out1;
  wire Logical_Operator_out1_31;
  wire [1:0] Bit_Slice6_out1;  // ufix2
  wire Bit_Slice_out1_31;  // ufix1
  wire Logical_Operator3_out1_5;
  wire Bit_Slice1_out1_7;  // ufix1
  wire Logical_Operator_out1_32;
  wire Switch7_out1_7;
  reg signed [25:0] Delay7_P29_out1;  // sfix26
  wire R_0_out1;
  wire Switch1_out1_1;
  wire Switch2_out1;
  wire sticky_bitsll_Q_Q_WordLen_out1;
  wire BitSlice_out1_2;  // ufix1
  reg  Delay10_P30_out1;
  wire alphabitget_Mant_tmp_2_0_out1;
  wire alphabitget_Mant_tmp_1_0_out1;
  wire alpha0_out1_2;  // ufix1
  wire [24:0] Bit_Concat_out1_26;  // ufix25
  wire [24:0] alpha2_out1;  // ufix25
  wire [24:0] Mant_tmp_2_out1;  // ufix25
  wire [24:0] if_bitget_Mant_tmp_1_0_out1;  // ufix25
  wire BitSlice2_out1;  // ufix1
  wire [7:0] DTC2_out1;  // uint8
  wire [7:0] C2_out1_1;  // uint8
  wire [7:0] s2_out1;  // uint8
  wire [7:0] C4_out1;  // uint8
  wire [7:0] s5_out1;  // uint8
  reg [7:0] Delay8_P30_reg_1 [0:24];  // ufix8 [25]
  wire [7:0] Delay8_P30_reg_next_1 [0:24];  // ufix8 [25]
  wire [7:0] Delay8_P30_out1_1;  // uint8
  wire [7:0] alpha1_out1_1;  // uint8
  wire [7:0] Exp_1_out1;  // uint8
  wire [7:0] if_bitget_Mant_tmp_Mant_tmp_Wor_out1;  // uint8
  reg  Delay30_P2_out1;  // ufix1
  wire [7:0] C2_out1_2;  // ufix8
  reg  Delay31_P2_out1;  // ufix1
  reg [7:0] Delay10_P2_out1;  // ufix8
  wire [7:0] C_out1_5;  // ufix8
  wire [7:0] if_mant_a_0_out1;  // ufix8
  wire [7:0] if_exp_a_cfType_Exponent_Inf_out1;  // ufix8
  reg [7:0] Delay18_P30_reg [0:27];  // ufix8 [28]
  wire [7:0] Delay18_P30_reg_next [0:27];  // ufix8 [28]
  wire [7:0] Delay18_P30_out1;  // ufix8
  wire [7:0] if_aExponent_cfType_Exponent_out1;  // ufix8
  wire [7:0] Constant3_out1;  // ufix8
  wire [7:0] Switch6_out1_7;  // ufix8
  reg [7:0] Delay4_out1_1;  // ufix8
  wire Compare_To_Zero_out1;
  wire Logical_Operator_out1_33;
  wire [22:0] BitSlice3_out1;  // ufix23
  wire [22:0] C_out1_6;  // ufix23
  wire [22:0] if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1;  // ufix23
  wire [22:0] C3_out1_1;  // ufix23
  reg [22:0] Delay9_P2_out1;  // ufix23
  wire [22:0] if_exp_a_cfType_Exponent_Inf_1_out1;  // ufix23
  reg [22:0] Delay15_P30_reg [0:27];  // ufix23 [28]
  wire [22:0] Delay15_P30_reg_next [0:27];  // ufix23 [28]
  wire [22:0] Delay15_P30_out1;  // ufix23
  wire [22:0] if_aExponent_cfType_Exponent_1_out1;  // ufix23
  wire [22:0] Constant2_out1;  // ufix23
  wire [22:0] Switch5_out1;  // ufix23
  reg [22:0] Delay5_out1;  // ufix23
  wire [31:0] nfp_out_pack;  // ufix32


  assign Constant8_out1 = 1'b1;



  assign Constant7_out1 = 6'b011101;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b1;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Relational_Operator_relop1;
        end
      end
    end



  assign Logical_Operator_out1 = Constant8_out1 & Delay4_out1;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Add_out1;
        end
      end
    end



  assign Add_1 = {5'b0, Logical_Operator_out1};
  assign Add_out1 = Delay3_out1 + Add_1;



  assign Relational_Operator_relop1 = Add_out1 <= Constant7_out1;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b1;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Relational_Operator_relop1;
        end
      end
    end



  // Split 32 bit word into FP sign, exponent, mantissa
  assign aSign = nfp_in[31];
  assign aExponent = nfp_in[30:23];
  assign aMantissa = nfp_in[22:0];



  always @(posedge clk or posedge reset)
    begin : Delay21_P30_process
      if (reset == 1'b1) begin
        Delay21_P30_reg[0] <= 1'b0;
        Delay21_P30_reg[1] <= 1'b0;
        Delay21_P30_reg[2] <= 1'b0;
        Delay21_P30_reg[3] <= 1'b0;
        Delay21_P30_reg[4] <= 1'b0;
        Delay21_P30_reg[5] <= 1'b0;
        Delay21_P30_reg[6] <= 1'b0;
        Delay21_P30_reg[7] <= 1'b0;
        Delay21_P30_reg[8] <= 1'b0;
        Delay21_P30_reg[9] <= 1'b0;
        Delay21_P30_reg[10] <= 1'b0;
        Delay21_P30_reg[11] <= 1'b0;
        Delay21_P30_reg[12] <= 1'b0;
        Delay21_P30_reg[13] <= 1'b0;
        Delay21_P30_reg[14] <= 1'b0;
        Delay21_P30_reg[15] <= 1'b0;
        Delay21_P30_reg[16] <= 1'b0;
        Delay21_P30_reg[17] <= 1'b0;
        Delay21_P30_reg[18] <= 1'b0;
        Delay21_P30_reg[19] <= 1'b0;
        Delay21_P30_reg[20] <= 1'b0;
        Delay21_P30_reg[21] <= 1'b0;
        Delay21_P30_reg[22] <= 1'b0;
        Delay21_P30_reg[23] <= 1'b0;
        Delay21_P30_reg[24] <= 1'b0;
        Delay21_P30_reg[25] <= 1'b0;
        Delay21_P30_reg[26] <= 1'b0;
        Delay21_P30_reg[27] <= 1'b0;
        Delay21_P30_reg[28] <= 1'b0;
        Delay21_P30_reg[29] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay21_P30_reg[0] <= Delay21_P30_reg_next[0];
          Delay21_P30_reg[1] <= Delay21_P30_reg_next[1];
          Delay21_P30_reg[2] <= Delay21_P30_reg_next[2];
          Delay21_P30_reg[3] <= Delay21_P30_reg_next[3];
          Delay21_P30_reg[4] <= Delay21_P30_reg_next[4];
          Delay21_P30_reg[5] <= Delay21_P30_reg_next[5];
          Delay21_P30_reg[6] <= Delay21_P30_reg_next[6];
          Delay21_P30_reg[7] <= Delay21_P30_reg_next[7];
          Delay21_P30_reg[8] <= Delay21_P30_reg_next[8];
          Delay21_P30_reg[9] <= Delay21_P30_reg_next[9];
          Delay21_P30_reg[10] <= Delay21_P30_reg_next[10];
          Delay21_P30_reg[11] <= Delay21_P30_reg_next[11];
          Delay21_P30_reg[12] <= Delay21_P30_reg_next[12];
          Delay21_P30_reg[13] <= Delay21_P30_reg_next[13];
          Delay21_P30_reg[14] <= Delay21_P30_reg_next[14];
          Delay21_P30_reg[15] <= Delay21_P30_reg_next[15];
          Delay21_P30_reg[16] <= Delay21_P30_reg_next[16];
          Delay21_P30_reg[17] <= Delay21_P30_reg_next[17];
          Delay21_P30_reg[18] <= Delay21_P30_reg_next[18];
          Delay21_P30_reg[19] <= Delay21_P30_reg_next[19];
          Delay21_P30_reg[20] <= Delay21_P30_reg_next[20];
          Delay21_P30_reg[21] <= Delay21_P30_reg_next[21];
          Delay21_P30_reg[22] <= Delay21_P30_reg_next[22];
          Delay21_P30_reg[23] <= Delay21_P30_reg_next[23];
          Delay21_P30_reg[24] <= Delay21_P30_reg_next[24];
          Delay21_P30_reg[25] <= Delay21_P30_reg_next[25];
          Delay21_P30_reg[26] <= Delay21_P30_reg_next[26];
          Delay21_P30_reg[27] <= Delay21_P30_reg_next[27];
          Delay21_P30_reg[28] <= Delay21_P30_reg_next[28];
          Delay21_P30_reg[29] <= Delay21_P30_reg_next[29];
        end
      end
    end

  assign Delay21_P30_out1 = Delay21_P30_reg[29];
  assign Delay21_P30_reg_next[0] = aSign;
  assign Delay21_P30_reg_next[1] = Delay21_P30_reg[0];
  assign Delay21_P30_reg_next[2] = Delay21_P30_reg[1];
  assign Delay21_P30_reg_next[3] = Delay21_P30_reg[2];
  assign Delay21_P30_reg_next[4] = Delay21_P30_reg[3];
  assign Delay21_P30_reg_next[5] = Delay21_P30_reg[4];
  assign Delay21_P30_reg_next[6] = Delay21_P30_reg[5];
  assign Delay21_P30_reg_next[7] = Delay21_P30_reg[6];
  assign Delay21_P30_reg_next[8] = Delay21_P30_reg[7];
  assign Delay21_P30_reg_next[9] = Delay21_P30_reg[8];
  assign Delay21_P30_reg_next[10] = Delay21_P30_reg[9];
  assign Delay21_P30_reg_next[11] = Delay21_P30_reg[10];
  assign Delay21_P30_reg_next[12] = Delay21_P30_reg[11];
  assign Delay21_P30_reg_next[13] = Delay21_P30_reg[12];
  assign Delay21_P30_reg_next[14] = Delay21_P30_reg[13];
  assign Delay21_P30_reg_next[15] = Delay21_P30_reg[14];
  assign Delay21_P30_reg_next[16] = Delay21_P30_reg[15];
  assign Delay21_P30_reg_next[17] = Delay21_P30_reg[16];
  assign Delay21_P30_reg_next[18] = Delay21_P30_reg[17];
  assign Delay21_P30_reg_next[19] = Delay21_P30_reg[18];
  assign Delay21_P30_reg_next[20] = Delay21_P30_reg[19];
  assign Delay21_P30_reg_next[21] = Delay21_P30_reg[20];
  assign Delay21_P30_reg_next[22] = Delay21_P30_reg[21];
  assign Delay21_P30_reg_next[23] = Delay21_P30_reg[22];
  assign Delay21_P30_reg_next[24] = Delay21_P30_reg[23];
  assign Delay21_P30_reg_next[25] = Delay21_P30_reg[24];
  assign Delay21_P30_reg_next[26] = Delay21_P30_reg[25];
  assign Delay21_P30_reg_next[27] = Delay21_P30_reg[26];
  assign Delay21_P30_reg_next[28] = Delay21_P30_reg[27];
  assign Delay21_P30_reg_next[29] = Delay21_P30_reg[28];



  assign Constant1_out1 = 1'b0;



  assign Switch1_out1 = (Delay1_out1 == 1'b0 ? Delay21_P30_out1 :
              Constant1_out1);



  always @(posedge clk or posedge reset)
    begin : Delay3_1_process
      if (reset == 1'b1) begin
        Delay3_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_1 <= Switch1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_P1_process
      if (reset == 1'b1) begin
        Delay1_P1_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_P1_out1 <= aExponent;
        end
      end
    end



  assign aExponent_cfType_Exponent_I_out1 = Delay1_P1_out1 == 8'b11111111;



  assign aExponent_0_out1 = Delay1_P1_out1 == 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : Delay2_P1_process
      if (reset == 1'b1) begin
        Delay2_P1_out1 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_P1_out1 <= aMantissa;
        end
      end
    end



  assign Constant_out1 = 23'b00000000000000000000000;



  assign Switch_out1 = (aExponent_0_out1 == 1'b0 ? Delay2_P1_out1 :
              Constant_out1);



  assign aMantissa_0_out1 = Switch_out1 == 23'b00000000000000000000000;



  assign alphaaExponent_0_aMantissa_out1 = aExponent_0_out1 & aMantissa_0_out1;



  assign alphaaExponent_cfType_Exponent_out1 = aExponent_cfType_Exponent_I_out1 | alphaaExponent_0_aMantissa_out1;



  always @(posedge clk or posedge reset)
    begin : Delay8_P30_process
      if (reset == 1'b1) begin
        Delay8_P30_reg[0] <= 1'b0;
        Delay8_P30_reg[1] <= 1'b0;
        Delay8_P30_reg[2] <= 1'b0;
        Delay8_P30_reg[3] <= 1'b0;
        Delay8_P30_reg[4] <= 1'b0;
        Delay8_P30_reg[5] <= 1'b0;
        Delay8_P30_reg[6] <= 1'b0;
        Delay8_P30_reg[7] <= 1'b0;
        Delay8_P30_reg[8] <= 1'b0;
        Delay8_P30_reg[9] <= 1'b0;
        Delay8_P30_reg[10] <= 1'b0;
        Delay8_P30_reg[11] <= 1'b0;
        Delay8_P30_reg[12] <= 1'b0;
        Delay8_P30_reg[13] <= 1'b0;
        Delay8_P30_reg[14] <= 1'b0;
        Delay8_P30_reg[15] <= 1'b0;
        Delay8_P30_reg[16] <= 1'b0;
        Delay8_P30_reg[17] <= 1'b0;
        Delay8_P30_reg[18] <= 1'b0;
        Delay8_P30_reg[19] <= 1'b0;
        Delay8_P30_reg[20] <= 1'b0;
        Delay8_P30_reg[21] <= 1'b0;
        Delay8_P30_reg[22] <= 1'b0;
        Delay8_P30_reg[23] <= 1'b0;
        Delay8_P30_reg[24] <= 1'b0;
        Delay8_P30_reg[25] <= 1'b0;
        Delay8_P30_reg[26] <= 1'b0;
        Delay8_P30_reg[27] <= 1'b0;
        Delay8_P30_reg[28] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_P30_reg[0] <= Delay8_P30_reg_next[0];
          Delay8_P30_reg[1] <= Delay8_P30_reg_next[1];
          Delay8_P30_reg[2] <= Delay8_P30_reg_next[2];
          Delay8_P30_reg[3] <= Delay8_P30_reg_next[3];
          Delay8_P30_reg[4] <= Delay8_P30_reg_next[4];
          Delay8_P30_reg[5] <= Delay8_P30_reg_next[5];
          Delay8_P30_reg[6] <= Delay8_P30_reg_next[6];
          Delay8_P30_reg[7] <= Delay8_P30_reg_next[7];
          Delay8_P30_reg[8] <= Delay8_P30_reg_next[8];
          Delay8_P30_reg[9] <= Delay8_P30_reg_next[9];
          Delay8_P30_reg[10] <= Delay8_P30_reg_next[10];
          Delay8_P30_reg[11] <= Delay8_P30_reg_next[11];
          Delay8_P30_reg[12] <= Delay8_P30_reg_next[12];
          Delay8_P30_reg[13] <= Delay8_P30_reg_next[13];
          Delay8_P30_reg[14] <= Delay8_P30_reg_next[14];
          Delay8_P30_reg[15] <= Delay8_P30_reg_next[15];
          Delay8_P30_reg[16] <= Delay8_P30_reg_next[16];
          Delay8_P30_reg[17] <= Delay8_P30_reg_next[17];
          Delay8_P30_reg[18] <= Delay8_P30_reg_next[18];
          Delay8_P30_reg[19] <= Delay8_P30_reg_next[19];
          Delay8_P30_reg[20] <= Delay8_P30_reg_next[20];
          Delay8_P30_reg[21] <= Delay8_P30_reg_next[21];
          Delay8_P30_reg[22] <= Delay8_P30_reg_next[22];
          Delay8_P30_reg[23] <= Delay8_P30_reg_next[23];
          Delay8_P30_reg[24] <= Delay8_P30_reg_next[24];
          Delay8_P30_reg[25] <= Delay8_P30_reg_next[25];
          Delay8_P30_reg[26] <= Delay8_P30_reg_next[26];
          Delay8_P30_reg[27] <= Delay8_P30_reg_next[27];
          Delay8_P30_reg[28] <= Delay8_P30_reg_next[28];
        end
      end
    end

  assign Delay8_P30_out1 = Delay8_P30_reg[28];
  assign Delay8_P30_reg_next[0] = alphaaExponent_cfType_Exponent_out1;
  assign Delay8_P30_reg_next[1] = Delay8_P30_reg[0];
  assign Delay8_P30_reg_next[2] = Delay8_P30_reg[1];
  assign Delay8_P30_reg_next[3] = Delay8_P30_reg[2];
  assign Delay8_P30_reg_next[4] = Delay8_P30_reg[3];
  assign Delay8_P30_reg_next[5] = Delay8_P30_reg[4];
  assign Delay8_P30_reg_next[6] = Delay8_P30_reg[5];
  assign Delay8_P30_reg_next[7] = Delay8_P30_reg[6];
  assign Delay8_P30_reg_next[8] = Delay8_P30_reg[7];
  assign Delay8_P30_reg_next[9] = Delay8_P30_reg[8];
  assign Delay8_P30_reg_next[10] = Delay8_P30_reg[9];
  assign Delay8_P30_reg_next[11] = Delay8_P30_reg[10];
  assign Delay8_P30_reg_next[12] = Delay8_P30_reg[11];
  assign Delay8_P30_reg_next[13] = Delay8_P30_reg[12];
  assign Delay8_P30_reg_next[14] = Delay8_P30_reg[13];
  assign Delay8_P30_reg_next[15] = Delay8_P30_reg[14];
  assign Delay8_P30_reg_next[16] = Delay8_P30_reg[15];
  assign Delay8_P30_reg_next[17] = Delay8_P30_reg[16];
  assign Delay8_P30_reg_next[18] = Delay8_P30_reg[17];
  assign Delay8_P30_reg_next[19] = Delay8_P30_reg[18];
  assign Delay8_P30_reg_next[20] = Delay8_P30_reg[19];
  assign Delay8_P30_reg_next[21] = Delay8_P30_reg[20];
  assign Delay8_P30_reg_next[22] = Delay8_P30_reg[21];
  assign Delay8_P30_reg_next[23] = Delay8_P30_reg[22];
  assign Delay8_P30_reg_next[24] = Delay8_P30_reg[23];
  assign Delay8_P30_reg_next[25] = Delay8_P30_reg[24];
  assign Delay8_P30_reg_next[26] = Delay8_P30_reg[25];
  assign Delay8_P30_reg_next[27] = Delay8_P30_reg[26];
  assign Delay8_P30_reg_next[28] = Delay8_P30_reg[27];



  assign alpha0_out1 = 2'b00;



  assign alphaExponent_0_cfType_Exp_out1 = aExponent_0_out1 | aExponent_cfType_Exponent_I_out1;



  assign alpha1_out1 = 1'b1;



  assign alpha0_out1_1 = 1'b0;



  assign if_Exponent_0_cfType_Exp_out1 = (alphaExponent_0_cfType_Exp_out1 == 1'b0 ? alpha1_out1 :
              alpha0_out1_1);



  assign Bit_Concat1_out1 = {if_Exponent_0_cfType_Exp_out1, Switch_out1};



  always @(posedge clk or posedge reset)
    begin : Delay1_P2_process
      if (reset == 1'b1) begin
        Delay1_P2_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_P2_out1 <= Bit_Concat1_out1;
        end
      end
    end



  assign Bit_Concat_out1 = {alpha0_out1, Delay1_P2_out1};



  assign reinterpretcast_bitconcat_fi_0_out1 = Bit_Concat_out1;



  always @(posedge clk or posedge reset)
    begin : Delay4_P3_process
      if (reset == 1'b1) begin
        Delay4_P3_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_P3_out1 <= reinterpretcast_bitconcat_fi_0_out1;
        end
      end
    end



  assign BitSlice_out1 = Delay4_P3_out1[22:0];



  assign bitsliceget_mant_a_cfType_Man_out1 = BitSlice_out1 != 23'b00000000000000000000000;



  assign c2_out1 = 10'sb0011111110;



  assign Delay1_P1_out1_dtc = Delay1_P1_out1;



  assign C_out1 = 8'b00000001;



  assign if_Exponent_0_out1 = (aExponent_0_out1 == 1'b0 ? Delay1_P1_out1_dtc :
              C_out1);



  always @(posedge clk or posedge reset)
    begin : Delay2_P2_process
      if (reset == 1'b1) begin
        Delay2_P2_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay2_P2_out1 <= if_Exponent_0_out1;
        end
      end
    end



  assign DTC_out1 = {2'b0, Delay2_P2_out1};



  always @(posedge clk or posedge reset)
    begin : Delay3_P3_process
      if (reset == 1'b1) begin
        Delay3_P3_out1 <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay3_P3_out1 <= DTC_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_P4_process
      if (reset == 1'b1) begin
        Delay3_P4_out1 <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay3_P4_out1 <= Delay3_P3_out1;
        end
      end
    end



  assign c1_out1 = 10'sb0011111101;



  always @(posedge clk or posedge reset)
    begin : Delay2_P4_process
      if (reset == 1'b1) begin
        Delay2_P4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_P4_out1 <= bitsliceget_mant_a_cfType_Man_out1;
        end
      end
    end



  assign sub1_out1 = c2_out1 - Delay3_P4_out1;



  assign sub2_out1 = c1_out1 - Delay3_P4_out1;



  assign s0_out1 = (Delay2_P4_out1 == 1'b0 ? sub1_out1 :
              sub2_out1);



  always @(posedge clk or posedge reset)
    begin : Delay_P29_process
      if (reset == 1'b1) begin
        Delay_P29_out1 <= 10'sb0000000000;
      end
      else begin
        if (enb) begin
          Delay_P29_out1 <= s0_out1;
        end
      end
    end



  assign relop2_out1 = Delay_P29_out1 >= 10'sb0011111111;



  assign relop3_out1 = Delay_P29_out1 < 10'sb0000000001;



  assign C3_out1 = 5'b00000;



  assign relop1_out1 = Delay_P29_out1 == 10'sb0000000000;



  assign C1_out1_1 = 5'b11001;



  assign C_out1_1 = 5'b00001;



  assign s1_out1 = (relop1_out1 == 1'b0 ? C1_out1_1 :
              C_out1_1);



  assign s3_out1 = (relop3_out1 == 1'b0 ? C3_out1 :
              s1_out1);



  assign C5_out1 = 5'b11001;



  assign s4_out1 = (relop2_out1 == 1'b0 ? s3_out1 :
              C5_out1);



  always @(posedge clk or posedge reset)
    begin : Delay11_P5_28_process
      if (reset == 1'b1) begin
        Delay11_P5_28_reg[0] <= 5'b00000;
        Delay11_P5_28_reg[1] <= 5'b00000;
        Delay11_P5_28_reg[2] <= 5'b00000;
        Delay11_P5_28_reg[3] <= 5'b00000;
        Delay11_P5_28_reg[4] <= 5'b00000;
        Delay11_P5_28_reg[5] <= 5'b00000;
        Delay11_P5_28_reg[6] <= 5'b00000;
        Delay11_P5_28_reg[7] <= 5'b00000;
        Delay11_P5_28_reg[8] <= 5'b00000;
        Delay11_P5_28_reg[9] <= 5'b00000;
        Delay11_P5_28_reg[10] <= 5'b00000;
        Delay11_P5_28_reg[11] <= 5'b00000;
        Delay11_P5_28_reg[12] <= 5'b00000;
        Delay11_P5_28_reg[13] <= 5'b00000;
        Delay11_P5_28_reg[14] <= 5'b00000;
        Delay11_P5_28_reg[15] <= 5'b00000;
        Delay11_P5_28_reg[16] <= 5'b00000;
        Delay11_P5_28_reg[17] <= 5'b00000;
        Delay11_P5_28_reg[18] <= 5'b00000;
        Delay11_P5_28_reg[19] <= 5'b00000;
        Delay11_P5_28_reg[20] <= 5'b00000;
        Delay11_P5_28_reg[21] <= 5'b00000;
        Delay11_P5_28_reg[22] <= 5'b00000;
        Delay11_P5_28_reg[23] <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay11_P5_28_reg[0] <= Delay11_P5_28_reg_next[0];
          Delay11_P5_28_reg[1] <= Delay11_P5_28_reg_next[1];
          Delay11_P5_28_reg[2] <= Delay11_P5_28_reg_next[2];
          Delay11_P5_28_reg[3] <= Delay11_P5_28_reg_next[3];
          Delay11_P5_28_reg[4] <= Delay11_P5_28_reg_next[4];
          Delay11_P5_28_reg[5] <= Delay11_P5_28_reg_next[5];
          Delay11_P5_28_reg[6] <= Delay11_P5_28_reg_next[6];
          Delay11_P5_28_reg[7] <= Delay11_P5_28_reg_next[7];
          Delay11_P5_28_reg[8] <= Delay11_P5_28_reg_next[8];
          Delay11_P5_28_reg[9] <= Delay11_P5_28_reg_next[9];
          Delay11_P5_28_reg[10] <= Delay11_P5_28_reg_next[10];
          Delay11_P5_28_reg[11] <= Delay11_P5_28_reg_next[11];
          Delay11_P5_28_reg[12] <= Delay11_P5_28_reg_next[12];
          Delay11_P5_28_reg[13] <= Delay11_P5_28_reg_next[13];
          Delay11_P5_28_reg[14] <= Delay11_P5_28_reg_next[14];
          Delay11_P5_28_reg[15] <= Delay11_P5_28_reg_next[15];
          Delay11_P5_28_reg[16] <= Delay11_P5_28_reg_next[16];
          Delay11_P5_28_reg[17] <= Delay11_P5_28_reg_next[17];
          Delay11_P5_28_reg[18] <= Delay11_P5_28_reg_next[18];
          Delay11_P5_28_reg[19] <= Delay11_P5_28_reg_next[19];
          Delay11_P5_28_reg[20] <= Delay11_P5_28_reg_next[20];
          Delay11_P5_28_reg[21] <= Delay11_P5_28_reg_next[21];
          Delay11_P5_28_reg[22] <= Delay11_P5_28_reg_next[22];
          Delay11_P5_28_reg[23] <= Delay11_P5_28_reg_next[23];
        end
      end
    end

  assign Delay11_P5_28_out1 = Delay11_P5_28_reg[23];
  assign Delay11_P5_28_reg_next[0] = s4_out1;
  assign Delay11_P5_28_reg_next[1] = Delay11_P5_28_reg[0];
  assign Delay11_P5_28_reg_next[2] = Delay11_P5_28_reg[1];
  assign Delay11_P5_28_reg_next[3] = Delay11_P5_28_reg[2];
  assign Delay11_P5_28_reg_next[4] = Delay11_P5_28_reg[3];
  assign Delay11_P5_28_reg_next[5] = Delay11_P5_28_reg[4];
  assign Delay11_P5_28_reg_next[6] = Delay11_P5_28_reg[5];
  assign Delay11_P5_28_reg_next[7] = Delay11_P5_28_reg[6];
  assign Delay11_P5_28_reg_next[8] = Delay11_P5_28_reg[7];
  assign Delay11_P5_28_reg_next[9] = Delay11_P5_28_reg[8];
  assign Delay11_P5_28_reg_next[10] = Delay11_P5_28_reg[9];
  assign Delay11_P5_28_reg_next[11] = Delay11_P5_28_reg[10];
  assign Delay11_P5_28_reg_next[12] = Delay11_P5_28_reg[11];
  assign Delay11_P5_28_reg_next[13] = Delay11_P5_28_reg[12];
  assign Delay11_P5_28_reg_next[14] = Delay11_P5_28_reg[13];
  assign Delay11_P5_28_reg_next[15] = Delay11_P5_28_reg[14];
  assign Delay11_P5_28_reg_next[16] = Delay11_P5_28_reg[15];
  assign Delay11_P5_28_reg_next[17] = Delay11_P5_28_reg[16];
  assign Delay11_P5_28_reg_next[18] = Delay11_P5_28_reg[17];
  assign Delay11_P5_28_reg_next[19] = Delay11_P5_28_reg[18];
  assign Delay11_P5_28_reg_next[20] = Delay11_P5_28_reg[19];
  assign Delay11_P5_28_reg_next[21] = Delay11_P5_28_reg[20];
  assign Delay11_P5_28_reg_next[22] = Delay11_P5_28_reg[21];
  assign Delay11_P5_28_reg_next[23] = Delay11_P5_28_reg[22];



  assign shift_length_1_out1 = Delay11_P5_28_out1 == 5'b00001;



  assign shift_length_1_out1_1 = Delay11_P5_28_out1 > 5'b00001;



  assign C_out1_2 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : Delay_P5_process
      if (reset == 1'b1) begin
        Delay_P5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_P5_out1 <= C_out1_2;
        end
      end
    end



  assign C1_out1_2 = 26'sb00100000000000000000000000;



  assign C_out1_3 = 26'sb01000000000000000000000000;



  assign if_bitsliceget_mant_a_cfType_Ma_out1 = (bitsliceget_mant_a_cfType_Man_out1 == 1'b0 ? C1_out1_2 :
              C_out1_3);



  always @(posedge clk or posedge reset)
    begin : Delay1_P4_process
      if (reset == 1'b1) begin
        Delay1_P4_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_P4_out1 <= if_bitsliceget_mant_a_cfType_Ma_out1;
        end
      end
    end



  assign Unary_Minus_1 = {Delay4_P3_out1[25], Delay4_P3_out1};
  assign Unary_Minus_in0 =  - (Unary_Minus_1);
  assign Unary_Minus_out1 = Unary_Minus_in0[25:0];



  always @(posedge clk or posedge reset)
    begin : Delay_P4_process
      if (reset == 1'b1) begin
        Delay_P4_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_P4_out1 <= Unary_Minus_out1;
        end
      end
    end



  assign R_mant_b_norm_out1 = Delay1_P4_out1 + Delay_P4_out1;



  assign bitsll_R_1_out1 = R_mant_b_norm_out1 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay1_P5_process
      if (reset == 1'b1) begin
        Delay1_P5_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_P5_out1 <= bitsll_R_1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_P5_process
      if (reset == 1'b1) begin
        Delay2_P5_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_P5_out1 <= Delay_P4_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_1 = Delay1_P5_out1 + Delay2_P5_out1;



  assign Bit_Slice_out1 = R_mant_b_norm_out1_1[25];



  assign Logical_Operator_out1_1 =  ~ Bit_Slice_out1;



  assign Bit_Concat_out1_1 = {Delay_P5_out1, Logical_Operator_out1_1};



  always @(posedge clk or posedge reset)
    begin : Delay3_P6_process
      if (reset == 1'b1) begin
        Delay3_P6_out1 <= 2'b00;
      end
      else begin
        if (enb) begin
          Delay3_P6_out1 <= Bit_Concat_out1_1;
        end
      end
    end



  assign if_tmp_0_1_out1 = (Bit_Slice_out1 == 1'b0 ? R_mant_b_norm_out1_1 :
              Delay1_P5_out1);



  assign bitsll_R_1_out1_1 = if_tmp_0_1_out1 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay4_P6_process
      if (reset == 1'b1) begin
        Delay4_P6_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_P6_out1 <= bitsll_R_1_out1_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_P6_process
      if (reset == 1'b1) begin
        Delay5_P6_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_P6_out1 <= Delay2_P5_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_2 = Delay4_P6_out1 + Delay5_P6_out1;



  assign Bit_Slice_out1_1 = R_mant_b_norm_out1_2[25];



  assign Logical_Operator_out1_2 =  ~ Bit_Slice_out1_1;



  assign Bit_Concat_out1_2 = {Delay3_P6_out1, Logical_Operator_out1_2};



  always @(posedge clk or posedge reset)
    begin : Delay6_P7_process
      if (reset == 1'b1) begin
        Delay6_P7_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay6_P7_out1 <= Bit_Concat_out1_2;
        end
      end
    end



  assign if_tmp_0_1_out1_1 = (Bit_Slice_out1_1 == 1'b0 ? R_mant_b_norm_out1_2 :
              Delay4_P6_out1);



  assign bitsll_R_1_out1_2 = if_tmp_0_1_out1_1 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay7_P7_process
      if (reset == 1'b1) begin
        Delay7_P7_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_P7_out1 <= bitsll_R_1_out1_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_P7_process
      if (reset == 1'b1) begin
        Delay8_P7_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_P7_out1 <= Delay5_P6_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_3 = Delay7_P7_out1 + Delay8_P7_out1;



  assign Bit_Slice_out1_2 = R_mant_b_norm_out1_3[25];



  assign Logical_Operator_out1_3 =  ~ Bit_Slice_out1_2;



  assign Bit_Concat_out1_3 = {Delay6_P7_out1, Logical_Operator_out1_3};



  always @(posedge clk or posedge reset)
    begin : Delay9_P8_process
      if (reset == 1'b1) begin
        Delay9_P8_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          Delay9_P8_out1 <= Bit_Concat_out1_3;
        end
      end
    end



  assign if_tmp_0_1_out1_2 = (Bit_Slice_out1_2 == 1'b0 ? R_mant_b_norm_out1_3 :
              Delay7_P7_out1);



  assign bitsll_R_1_out1_3 = if_tmp_0_1_out1_2 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay10_P8_process
      if (reset == 1'b1) begin
        Delay10_P8_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_P8_out1 <= bitsll_R_1_out1_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_P8_process
      if (reset == 1'b1) begin
        Delay11_P8_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_P8_out1 <= Delay8_P7_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_4 = Delay10_P8_out1 + Delay11_P8_out1;



  assign Bit_Slice_out1_3 = R_mant_b_norm_out1_4[25];



  assign Logical_Operator_out1_4 =  ~ Bit_Slice_out1_3;



  assign Bit_Concat_out1_4 = {Delay9_P8_out1, Logical_Operator_out1_4};



  always @(posedge clk or posedge reset)
    begin : Delay_P9_process
      if (reset == 1'b1) begin
        Delay_P9_out1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay_P9_out1 <= Bit_Concat_out1_4;
        end
      end
    end



  assign if_tmp_0_1_out1_3 = (Bit_Slice_out1_3 == 1'b0 ? R_mant_b_norm_out1_4 :
              Delay10_P8_out1);



  assign bitsll_R_1_out1_4 = if_tmp_0_1_out1_3 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay1_P9_process
      if (reset == 1'b1) begin
        Delay1_P9_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_P9_out1 <= bitsll_R_1_out1_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_P9_process
      if (reset == 1'b1) begin
        Delay2_P9_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_P9_out1 <= Delay11_P8_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_5 = Delay1_P9_out1 + Delay2_P9_out1;



  assign Bit_Slice_out1_4 = R_mant_b_norm_out1_5[25];



  assign Logical_Operator_out1_5 =  ~ Bit_Slice_out1_4;



  assign Bit_Concat_out1_5 = {Delay_P9_out1, Logical_Operator_out1_5};



  always @(posedge clk or posedge reset)
    begin : Delay_P10_process
      if (reset == 1'b1) begin
        Delay_P10_out1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay_P10_out1 <= Bit_Concat_out1_5;
        end
      end
    end



  assign if_tmp_0_1_out1_4 = (Bit_Slice_out1_4 == 1'b0 ? R_mant_b_norm_out1_5 :
              Delay1_P9_out1);



  assign bitsll_R_1_out1_5 = if_tmp_0_1_out1_4 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay1_P10_process
      if (reset == 1'b1) begin
        Delay1_P10_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_P10_out1 <= bitsll_R_1_out1_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_P10_process
      if (reset == 1'b1) begin
        Delay2_P10_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_P10_out1 <= Delay2_P9_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_6 = Delay1_P10_out1 + Delay2_P10_out1;



  assign Bit_Slice_out1_5 = R_mant_b_norm_out1_6[25];



  assign Logical_Operator_out1_6 =  ~ Bit_Slice_out1_5;



  assign Bit_Concat_out1_6 = {Delay_P10_out1, Logical_Operator_out1_6};



  always @(posedge clk or posedge reset)
    begin : Delay3_P11_process
      if (reset == 1'b1) begin
        Delay3_P11_out1 <= 7'b0000000;
      end
      else begin
        if (enb) begin
          Delay3_P11_out1 <= Bit_Concat_out1_6;
        end
      end
    end



  assign if_tmp_0_1_out1_5 = (Bit_Slice_out1_5 == 1'b0 ? R_mant_b_norm_out1_6 :
              Delay1_P10_out1);



  assign bitsll_R_1_out1_6 = if_tmp_0_1_out1_5 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay4_P11_process
      if (reset == 1'b1) begin
        Delay4_P11_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_P11_out1 <= bitsll_R_1_out1_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_P11_process
      if (reset == 1'b1) begin
        Delay5_P11_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_P11_out1 <= Delay2_P10_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_7 = Delay4_P11_out1 + Delay5_P11_out1;



  assign Bit_Slice_out1_6 = R_mant_b_norm_out1_7[25];



  assign Logical_Operator_out1_7 =  ~ Bit_Slice_out1_6;



  assign Bit_Concat_out1_7 = {Delay3_P11_out1, Logical_Operator_out1_7};



  always @(posedge clk or posedge reset)
    begin : Delay6_P12_process
      if (reset == 1'b1) begin
        Delay6_P12_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay6_P12_out1 <= Bit_Concat_out1_7;
        end
      end
    end



  assign if_tmp_0_1_out1_6 = (Bit_Slice_out1_6 == 1'b0 ? R_mant_b_norm_out1_7 :
              Delay4_P11_out1);



  assign bitsll_R_1_out1_7 = if_tmp_0_1_out1_6 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay7_P12_process
      if (reset == 1'b1) begin
        Delay7_P12_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_P12_out1 <= bitsll_R_1_out1_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_P12_process
      if (reset == 1'b1) begin
        Delay8_P12_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_P12_out1 <= Delay5_P11_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_8 = Delay7_P12_out1 + Delay8_P12_out1;



  assign Bit_Slice_out1_7 = R_mant_b_norm_out1_8[25];



  assign Logical_Operator_out1_8 =  ~ Bit_Slice_out1_7;



  assign Bit_Concat_out1_8 = {Delay6_P12_out1, Logical_Operator_out1_8};



  always @(posedge clk or posedge reset)
    begin : Delay9_P13_process
      if (reset == 1'b1) begin
        Delay9_P13_out1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Delay9_P13_out1 <= Bit_Concat_out1_8;
        end
      end
    end



  assign if_tmp_0_1_out1_7 = (Bit_Slice_out1_7 == 1'b0 ? R_mant_b_norm_out1_8 :
              Delay7_P12_out1);



  assign bitsll_R_1_out1_8 = if_tmp_0_1_out1_7 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay10_P13_process
      if (reset == 1'b1) begin
        Delay10_P13_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_P13_out1 <= bitsll_R_1_out1_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_P13_process
      if (reset == 1'b1) begin
        Delay11_P13_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_P13_out1 <= Delay8_P12_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_9 = Delay10_P13_out1 + Delay11_P13_out1;



  assign Bit_Slice_out1_8 = R_mant_b_norm_out1_9[25];



  assign Logical_Operator_out1_9 =  ~ Bit_Slice_out1_8;



  assign Bit_Concat_out1_9 = {Delay9_P13_out1, Logical_Operator_out1_9};



  always @(posedge clk or posedge reset)
    begin : Delay3_P14_process
      if (reset == 1'b1) begin
        Delay3_P14_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          Delay3_P14_out1 <= Bit_Concat_out1_9;
        end
      end
    end



  assign if_tmp_0_1_out1_8 = (Bit_Slice_out1_8 == 1'b0 ? R_mant_b_norm_out1_9 :
              Delay10_P13_out1);



  assign bitsll_R_1_out1_9 = if_tmp_0_1_out1_8 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay4_P14_process
      if (reset == 1'b1) begin
        Delay4_P14_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_P14_out1 <= bitsll_R_1_out1_9;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_P14_process
      if (reset == 1'b1) begin
        Delay5_P14_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_P14_out1 <= Delay11_P13_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_10 = Delay4_P14_out1 + Delay5_P14_out1;



  assign Bit_Slice_out1_9 = R_mant_b_norm_out1_10[25];



  assign Logical_Operator_out1_10 =  ~ Bit_Slice_out1_9;



  assign Bit_Concat_out1_10 = {Delay3_P14_out1, Logical_Operator_out1_10};



  always @(posedge clk or posedge reset)
    begin : Delay_P15_process
      if (reset == 1'b1) begin
        Delay_P15_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay_P15_out1 <= Bit_Concat_out1_10;
        end
      end
    end



  assign if_tmp_0_1_out1_9 = (Bit_Slice_out1_9 == 1'b0 ? R_mant_b_norm_out1_10 :
              Delay4_P14_out1);



  assign bitsll_R_1_out1_10 = if_tmp_0_1_out1_9 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay1_P15_process
      if (reset == 1'b1) begin
        Delay1_P15_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_P15_out1 <= bitsll_R_1_out1_10;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_P15_process
      if (reset == 1'b1) begin
        Delay2_P15_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_P15_out1 <= Delay5_P14_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_11 = Delay1_P15_out1 + Delay2_P15_out1;



  assign Bit_Slice_out1_10 = R_mant_b_norm_out1_11[25];



  assign Logical_Operator_out1_11 =  ~ Bit_Slice_out1_10;



  assign Bit_Concat_out1_11 = {Delay_P15_out1, Logical_Operator_out1_11};



  always @(posedge clk or posedge reset)
    begin : Delay3_P16_process
      if (reset == 1'b1) begin
        Delay3_P16_out1 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          Delay3_P16_out1 <= Bit_Concat_out1_11;
        end
      end
    end



  assign if_tmp_0_1_out1_10 = (Bit_Slice_out1_10 == 1'b0 ? R_mant_b_norm_out1_11 :
              Delay1_P15_out1);



  assign bitsll_R_1_out1_11 = if_tmp_0_1_out1_10 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay4_P16_process
      if (reset == 1'b1) begin
        Delay4_P16_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_P16_out1 <= bitsll_R_1_out1_11;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_P16_process
      if (reset == 1'b1) begin
        Delay5_P16_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_P16_out1 <= Delay2_P15_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_12 = Delay4_P16_out1 + Delay5_P16_out1;



  assign Bit_Slice_out1_11 = R_mant_b_norm_out1_12[25];



  assign Logical_Operator_out1_12 =  ~ Bit_Slice_out1_11;



  assign Bit_Concat_out1_12 = {Delay3_P16_out1, Logical_Operator_out1_12};



  always @(posedge clk or posedge reset)
    begin : Delay6_P17_process
      if (reset == 1'b1) begin
        Delay6_P17_out1 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          Delay6_P17_out1 <= Bit_Concat_out1_12;
        end
      end
    end



  assign if_tmp_0_1_out1_11 = (Bit_Slice_out1_11 == 1'b0 ? R_mant_b_norm_out1_12 :
              Delay4_P16_out1);



  assign bitsll_R_1_out1_12 = if_tmp_0_1_out1_11 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay7_P17_process
      if (reset == 1'b1) begin
        Delay7_P17_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_P17_out1 <= bitsll_R_1_out1_12;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_P17_process
      if (reset == 1'b1) begin
        Delay8_P17_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_P17_out1 <= Delay5_P16_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_13 = Delay7_P17_out1 + Delay8_P17_out1;



  assign Bit_Slice_out1_12 = R_mant_b_norm_out1_13[25];



  assign Logical_Operator_out1_13 =  ~ Bit_Slice_out1_12;



  assign Bit_Concat_out1_13 = {Delay6_P17_out1, Logical_Operator_out1_13};



  always @(posedge clk or posedge reset)
    begin : Delay9_P18_process
      if (reset == 1'b1) begin
        Delay9_P18_out1 <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          Delay9_P18_out1 <= Bit_Concat_out1_13;
        end
      end
    end



  assign if_tmp_0_1_out1_12 = (Bit_Slice_out1_12 == 1'b0 ? R_mant_b_norm_out1_13 :
              Delay7_P17_out1);



  assign bitsll_R_1_out1_13 = if_tmp_0_1_out1_12 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay10_P18_process
      if (reset == 1'b1) begin
        Delay10_P18_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_P18_out1 <= bitsll_R_1_out1_13;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_P18_process
      if (reset == 1'b1) begin
        Delay11_P18_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_P18_out1 <= Delay8_P17_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_14 = Delay10_P18_out1 + Delay11_P18_out1;



  assign Bit_Slice_out1_13 = R_mant_b_norm_out1_14[25];



  assign Logical_Operator_out1_14 =  ~ Bit_Slice_out1_13;



  assign Bit_Concat_out1_14 = {Delay9_P18_out1, Logical_Operator_out1_14};



  always @(posedge clk or posedge reset)
    begin : Delay6_P19_process
      if (reset == 1'b1) begin
        Delay6_P19_out1 <= 15'b000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_P19_out1 <= Bit_Concat_out1_14;
        end
      end
    end



  assign if_tmp_0_1_out1_13 = (Bit_Slice_out1_13 == 1'b0 ? R_mant_b_norm_out1_14 :
              Delay10_P18_out1);



  assign bitsll_R_1_out1_14 = if_tmp_0_1_out1_13 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay7_P19_process
      if (reset == 1'b1) begin
        Delay7_P19_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_P19_out1 <= bitsll_R_1_out1_14;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_P19_process
      if (reset == 1'b1) begin
        Delay8_P19_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_P19_out1 <= Delay11_P18_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_15 = Delay7_P19_out1 + Delay8_P19_out1;



  assign Bit_Slice_out1_14 = R_mant_b_norm_out1_15[25];



  assign Logical_Operator_out1_15 =  ~ Bit_Slice_out1_14;



  assign Bit_Concat_out1_15 = {Delay6_P19_out1, Logical_Operator_out1_15};



  always @(posedge clk or posedge reset)
    begin : Delay_P20_process
      if (reset == 1'b1) begin
        Delay_P20_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_P20_out1 <= Bit_Concat_out1_15;
        end
      end
    end



  assign if_tmp_0_1_out1_14 = (Bit_Slice_out1_14 == 1'b0 ? R_mant_b_norm_out1_15 :
              Delay7_P19_out1);



  assign bitsll_R_1_out1_15 = if_tmp_0_1_out1_14 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay1_P20_process
      if (reset == 1'b1) begin
        Delay1_P20_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_P20_out1 <= bitsll_R_1_out1_15;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_P20_process
      if (reset == 1'b1) begin
        Delay2_P20_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_P20_out1 <= Delay8_P19_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_16 = Delay1_P20_out1 + Delay2_P20_out1;



  assign Bit_Slice_out1_15 = R_mant_b_norm_out1_16[25];



  assign Logical_Operator_out1_16 =  ~ Bit_Slice_out1_15;



  assign Bit_Concat_out1_16 = {Delay_P20_out1, Logical_Operator_out1_16};



  always @(posedge clk or posedge reset)
    begin : Delay3_P21_process
      if (reset == 1'b1) begin
        Delay3_P21_out1 <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_P21_out1 <= Bit_Concat_out1_16;
        end
      end
    end



  assign if_tmp_0_1_out1_15 = (Bit_Slice_out1_15 == 1'b0 ? R_mant_b_norm_out1_16 :
              Delay1_P20_out1);



  assign bitsll_R_1_out1_16 = if_tmp_0_1_out1_15 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay4_P21_process
      if (reset == 1'b1) begin
        Delay4_P21_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_P21_out1 <= bitsll_R_1_out1_16;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_P21_process
      if (reset == 1'b1) begin
        Delay5_P21_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_P21_out1 <= Delay2_P20_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_17 = Delay4_P21_out1 + Delay5_P21_out1;



  assign Bit_Slice_out1_16 = R_mant_b_norm_out1_17[25];



  assign Logical_Operator_out1_17 =  ~ Bit_Slice_out1_16;



  assign Bit_Concat_out1_17 = {Delay3_P21_out1, Logical_Operator_out1_17};



  always @(posedge clk or posedge reset)
    begin : Delay6_P22_process
      if (reset == 1'b1) begin
        Delay6_P22_out1 <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_P22_out1 <= Bit_Concat_out1_17;
        end
      end
    end



  assign if_tmp_0_1_out1_16 = (Bit_Slice_out1_16 == 1'b0 ? R_mant_b_norm_out1_17 :
              Delay4_P21_out1);



  assign bitsll_R_1_out1_17 = if_tmp_0_1_out1_16 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay7_P22_process
      if (reset == 1'b1) begin
        Delay7_P22_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_P22_out1 <= bitsll_R_1_out1_17;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_P22_process
      if (reset == 1'b1) begin
        Delay8_P22_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_P22_out1 <= Delay5_P21_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_18 = Delay7_P22_out1 + Delay8_P22_out1;



  assign Bit_Slice_out1_17 = R_mant_b_norm_out1_18[25];



  assign Logical_Operator_out1_18 =  ~ Bit_Slice_out1_17;



  assign Bit_Concat_out1_18 = {Delay6_P22_out1, Logical_Operator_out1_18};



  always @(posedge clk or posedge reset)
    begin : Delay9_P23_process
      if (reset == 1'b1) begin
        Delay9_P23_out1 <= 19'b0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_P23_out1 <= Bit_Concat_out1_18;
        end
      end
    end



  assign if_tmp_0_1_out1_17 = (Bit_Slice_out1_17 == 1'b0 ? R_mant_b_norm_out1_18 :
              Delay7_P22_out1);



  assign bitsll_R_1_out1_18 = if_tmp_0_1_out1_17 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay10_P23_process
      if (reset == 1'b1) begin
        Delay10_P23_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_P23_out1 <= bitsll_R_1_out1_18;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_P23_process
      if (reset == 1'b1) begin
        Delay11_P23_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_P23_out1 <= Delay8_P22_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_19 = Delay10_P23_out1 + Delay11_P23_out1;



  assign Bit_Slice_out1_18 = R_mant_b_norm_out1_19[25];



  assign Logical_Operator_out1_19 =  ~ Bit_Slice_out1_18;



  assign Bit_Concat_out1_19 = {Delay9_P23_out1, Logical_Operator_out1_19};



  always @(posedge clk or posedge reset)
    begin : Delay9_P24_process
      if (reset == 1'b1) begin
        Delay9_P24_out1 <= 20'b00000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_P24_out1 <= Bit_Concat_out1_19;
        end
      end
    end



  assign if_tmp_0_1_out1_18 = (Bit_Slice_out1_18 == 1'b0 ? R_mant_b_norm_out1_19 :
              Delay10_P23_out1);



  assign bitsll_R_1_out1_19 = if_tmp_0_1_out1_18 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay10_P24_process
      if (reset == 1'b1) begin
        Delay10_P24_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_P24_out1 <= bitsll_R_1_out1_19;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_P24_process
      if (reset == 1'b1) begin
        Delay11_P24_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_P24_out1 <= Delay11_P23_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_20 = Delay10_P24_out1 + Delay11_P24_out1;



  assign Bit_Slice_out1_19 = R_mant_b_norm_out1_20[25];



  assign Logical_Operator_out1_20 =  ~ Bit_Slice_out1_19;



  assign Bit_Concat_out1_20 = {Delay9_P24_out1, Logical_Operator_out1_20};



  always @(posedge clk or posedge reset)
    begin : Delay_P25_process
      if (reset == 1'b1) begin
        Delay_P25_out1 <= 21'b000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_P25_out1 <= Bit_Concat_out1_20;
        end
      end
    end



  assign if_tmp_0_1_out1_19 = (Bit_Slice_out1_19 == 1'b0 ? R_mant_b_norm_out1_20 :
              Delay10_P24_out1);



  assign bitsll_R_1_out1_20 = if_tmp_0_1_out1_19 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay1_P25_process
      if (reset == 1'b1) begin
        Delay1_P25_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_P25_out1 <= bitsll_R_1_out1_20;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_P25_process
      if (reset == 1'b1) begin
        Delay2_P25_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_P25_out1 <= Delay11_P24_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_21 = Delay1_P25_out1 + Delay2_P25_out1;



  assign Bit_Slice_out1_20 = R_mant_b_norm_out1_21[25];



  assign Logical_Operator_out1_21 =  ~ Bit_Slice_out1_20;



  assign Bit_Concat_out1_21 = {Delay_P25_out1, Logical_Operator_out1_21};



  always @(posedge clk or posedge reset)
    begin : Delay3_P26_process
      if (reset == 1'b1) begin
        Delay3_P26_out1 <= 22'b0000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_P26_out1 <= Bit_Concat_out1_21;
        end
      end
    end



  assign if_tmp_0_1_out1_20 = (Bit_Slice_out1_20 == 1'b0 ? R_mant_b_norm_out1_21 :
              Delay1_P25_out1);



  assign bitsll_R_1_out1_21 = if_tmp_0_1_out1_20 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay4_P26_process
      if (reset == 1'b1) begin
        Delay4_P26_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_P26_out1 <= bitsll_R_1_out1_21;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_P26_process
      if (reset == 1'b1) begin
        Delay5_P26_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_P26_out1 <= Delay2_P25_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_22 = Delay4_P26_out1 + Delay5_P26_out1;



  assign Bit_Slice_out1_21 = R_mant_b_norm_out1_22[25];



  assign Logical_Operator_out1_22 =  ~ Bit_Slice_out1_21;



  assign Bit_Concat_out1_22 = {Delay3_P26_out1, Logical_Operator_out1_22};



  always @(posedge clk or posedge reset)
    begin : Delay6_P27_process
      if (reset == 1'b1) begin
        Delay6_P27_out1 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_P27_out1 <= Bit_Concat_out1_22;
        end
      end
    end



  assign if_tmp_0_1_out1_21 = (Bit_Slice_out1_21 == 1'b0 ? R_mant_b_norm_out1_22 :
              Delay4_P26_out1);



  assign bitsll_R_1_out1_22 = if_tmp_0_1_out1_21 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay7_P27_process
      if (reset == 1'b1) begin
        Delay7_P27_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_P27_out1 <= bitsll_R_1_out1_22;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_P27_process
      if (reset == 1'b1) begin
        Delay8_P27_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_P27_out1 <= Delay5_P26_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_23 = Delay7_P27_out1 + Delay8_P27_out1;



  assign Bit_Slice_out1_22 = R_mant_b_norm_out1_23[25];



  assign Logical_Operator_out1_23 =  ~ Bit_Slice_out1_22;



  assign Bit_Concat_out1_23 = {Delay6_P27_out1, Logical_Operator_out1_23};



  always @(posedge clk or posedge reset)
    begin : Delay9_P28_process
      if (reset == 1'b1) begin
        Delay9_P28_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_P28_out1 <= Bit_Concat_out1_23;
        end
      end
    end



  assign if_tmp_0_1_out1_22 = (Bit_Slice_out1_22 == 1'b0 ? R_mant_b_norm_out1_23 :
              Delay7_P27_out1);



  assign bitsll_R_1_out1_23 = if_tmp_0_1_out1_22 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay10_P28_process
      if (reset == 1'b1) begin
        Delay10_P28_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_P28_out1 <= bitsll_R_1_out1_23;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_P28_process
      if (reset == 1'b1) begin
        Delay11_P28_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_P28_out1 <= Delay8_P27_out1;
        end
      end
    end



  assign R_mant_b_norm_out1_24 = Delay10_P28_out1 + Delay11_P28_out1;



  assign Bit_Slice_out1_23 = R_mant_b_norm_out1_24[25];



  assign Logical_Operator_out1_24 =  ~ Bit_Slice_out1_23;



  assign Bit_Concat_out1_24 = {Delay9_P28_out1, Logical_Operator_out1_24};



  always @(posedge clk or posedge reset)
    begin : Delay6_P29_process
      if (reset == 1'b1) begin
        Delay6_P29_out1 <= 25'b0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_P29_out1 <= Bit_Concat_out1_24;
        end
      end
    end



  assign C_out1_4 = 25'b0000000000000000000000000;



  assign if_shift_length_1_out1 = (shift_length_1_out1_1 == 1'b0 ? Delay6_P29_out1 :
              C_out1_4);



  assign bitsrl_Q_1_out1 = Delay6_P29_out1 >> 8'd1;



  assign if_shift_length_1_out1_1 = (shift_length_1_out1 == 1'b0 ? if_shift_length_1_out1 :
              bitsrl_Q_1_out1);



  assign BitSlice_out1_1 = if_shift_length_1_out1_1[23:0];



  always @(posedge clk or posedge reset)
    begin : Delay9_P30_process
      if (reset == 1'b1) begin
        Delay9_P30_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_P30_out1 <= BitSlice_out1_1;
        end
      end
    end



  assign BitSlice1_out1 = Delay9_P30_out1[1];



  assign if_tmp_0_1_out1_23 = (Bit_Slice_out1_23 == 1'b0 ? R_mant_b_norm_out1_24 :
              Delay10_P28_out1);



  assign Bit_Slice10_out1 = Delay11_P5_28_out1[4];



  assign Bit_Slice9_out1 = Delay11_P5_28_out1[3];



  assign Bit_Slice7_out1 = Delay11_P5_28_out1[2];



  assign Bit_Slice8_out1 = Delay11_P5_28_out1[1];



  assign Bit_Slice11_out1 = Delay11_P5_28_out1[0];



  assign Bit_Slice_out1_24 = Delay6_P29_out1[2:0];



  assign Constant_out1_1 = 1'b0;



  assign Bit_Concat_out1_25 = {Bit_Slice_out1_24, Constant_out1_1};



  assign Bit_Slice_out1_25 = Bit_Concat_out1_25[0];



  assign Bit_Slice1_out1 = Bit_Concat_out1_25[1];



  assign Logical_Operator_out1_25 = Bit_Slice1_out1 | Bit_Slice_out1_25;



  assign Switch6_out1 = (Bit_Slice11_out1 == 1'b0 ? Bit_Slice_out1_25 :
              Logical_Operator_out1_25);



  assign Bit_Slice2_out1 = Bit_Concat_out1_25[2];



  assign Logical_Operator1_out1 = Bit_Slice2_out1 | Logical_Operator_out1_25;



  assign Bit_Slice3_out1 = Bit_Concat_out1_25[3];



  assign Logical_Operator2_out1 = Bit_Slice3_out1 | Logical_Operator1_out1;



  assign Switch7_out1 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator1_out1 :
              Logical_Operator2_out1);



  assign Switch3_out1 = (Bit_Slice8_out1 == 1'b0 ? Switch6_out1 :
              Switch7_out1);



  assign Bit_Slice1_out1_1 = Delay6_P29_out1[6:3];



  assign Bit_Slice_out1_26 = Bit_Slice1_out1_1[0];



  assign Logical_Operator3_out1 = Bit_Slice_out1_26 | Logical_Operator2_out1;



  assign Bit_Slice1_out1_2 = Bit_Slice1_out1_1[1];



  assign Logical_Operator_out1_26 = Bit_Slice1_out1_2 | Logical_Operator3_out1;



  assign Switch6_out1_1 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator3_out1 :
              Logical_Operator_out1_26);



  assign Bit_Slice2_out1_1 = Bit_Slice1_out1_1[2];



  assign Logical_Operator1_out1_1 = Bit_Slice2_out1_1 | Logical_Operator_out1_26;



  assign Bit_Slice3_out1_1 = Bit_Slice1_out1_1[3];



  assign Logical_Operator2_out1_1 = Bit_Slice3_out1_1 | Logical_Operator1_out1_1;



  assign Switch7_out1_1 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator1_out1_1 :
              Logical_Operator2_out1_1);



  assign Switch3_out1_1 = (Bit_Slice8_out1 == 1'b0 ? Switch6_out1_1 :
              Switch7_out1_1);



  assign Switch6_out1_2 = (Bit_Slice7_out1 == 1'b0 ? Switch3_out1 :
              Switch3_out1_1);



  assign Bit_Slice2_out1_2 = Delay6_P29_out1[10:7];



  assign Bit_Slice_out1_27 = Bit_Slice2_out1_2[0];



  assign Logical_Operator3_out1_1 = Bit_Slice_out1_27 | Logical_Operator2_out1_1;



  assign Bit_Slice1_out1_3 = Bit_Slice2_out1_2[1];



  assign Logical_Operator_out1_27 = Bit_Slice1_out1_3 | Logical_Operator3_out1_1;



  assign Switch6_out1_3 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator3_out1_1 :
              Logical_Operator_out1_27);



  assign Bit_Slice2_out1_3 = Bit_Slice2_out1_2[2];



  assign Logical_Operator1_out1_2 = Bit_Slice2_out1_3 | Logical_Operator_out1_27;



  assign Bit_Slice3_out1_2 = Bit_Slice2_out1_2[3];



  assign Logical_Operator2_out1_2 = Bit_Slice3_out1_2 | Logical_Operator1_out1_2;



  assign Switch7_out1_2 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator1_out1_2 :
              Logical_Operator2_out1_2);



  assign Switch3_out1_2 = (Bit_Slice8_out1 == 1'b0 ? Switch6_out1_3 :
              Switch7_out1_2);



  assign Bit_Slice3_out1_3 = Delay6_P29_out1[14:11];



  assign Bit_Slice_out1_28 = Bit_Slice3_out1_3[0];



  assign Logical_Operator3_out1_2 = Bit_Slice_out1_28 | Logical_Operator2_out1_2;



  assign Bit_Slice1_out1_4 = Bit_Slice3_out1_3[1];



  assign Logical_Operator_out1_28 = Bit_Slice1_out1_4 | Logical_Operator3_out1_2;



  assign Switch6_out1_4 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator3_out1_2 :
              Logical_Operator_out1_28);



  assign Bit_Slice2_out1_4 = Bit_Slice3_out1_3[2];



  assign Logical_Operator1_out1_3 = Bit_Slice2_out1_4 | Logical_Operator_out1_28;



  assign Bit_Slice3_out1_4 = Bit_Slice3_out1_3[3];



  assign Logical_Operator2_out1_3 = Bit_Slice3_out1_4 | Logical_Operator1_out1_3;



  assign Switch7_out1_3 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator1_out1_3 :
              Logical_Operator2_out1_3);



  assign Switch3_out1_3 = (Bit_Slice8_out1 == 1'b0 ? Switch6_out1_4 :
              Switch7_out1_3);



  assign Switch7_out1_4 = (Bit_Slice7_out1 == 1'b0 ? Switch3_out1_2 :
              Switch3_out1_3);



  assign Switch3_out1_4 = (Bit_Slice9_out1 == 1'b0 ? Switch6_out1_2 :
              Switch7_out1_4);



  assign Bit_Slice4_out1 = Delay6_P29_out1[18:15];



  assign Bit_Slice_out1_29 = Bit_Slice4_out1[0];



  assign Logical_Operator3_out1_3 = Bit_Slice_out1_29 | Logical_Operator2_out1_3;



  assign Bit_Slice1_out1_5 = Bit_Slice4_out1[1];



  assign Logical_Operator_out1_29 = Bit_Slice1_out1_5 | Logical_Operator3_out1_3;



  assign Switch6_out1_5 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator3_out1_3 :
              Logical_Operator_out1_29);



  assign Bit_Slice2_out1_5 = Bit_Slice4_out1[2];



  assign Logical_Operator1_out1_4 = Bit_Slice2_out1_5 | Logical_Operator_out1_29;



  assign Bit_Slice3_out1_5 = Bit_Slice4_out1[3];



  assign Logical_Operator2_out1_4 = Bit_Slice3_out1_5 | Logical_Operator1_out1_4;



  assign Switch7_out1_5 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator1_out1_4 :
              Logical_Operator2_out1_4);



  assign Switch3_out1_5 = (Bit_Slice8_out1 == 1'b0 ? Switch6_out1_5 :
              Switch7_out1_5);



  assign Bit_Slice5_out1 = Delay6_P29_out1[22:19];



  assign Bit_Slice_out1_30 = Bit_Slice5_out1[0];



  assign Logical_Operator3_out1_4 = Bit_Slice_out1_30 | Logical_Operator2_out1_4;



  assign Bit_Slice1_out1_6 = Bit_Slice5_out1[1];



  assign Logical_Operator_out1_30 = Bit_Slice1_out1_6 | Logical_Operator3_out1_4;



  assign Switch6_out1_6 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator3_out1_4 :
              Logical_Operator_out1_30);



  assign Bit_Slice2_out1_6 = Bit_Slice5_out1[2];



  assign Logical_Operator1_out1_5 = Bit_Slice2_out1_6 | Logical_Operator_out1_30;



  assign Bit_Slice3_out1_6 = Bit_Slice5_out1[3];



  assign Logical_Operator2_out1_5 = Bit_Slice3_out1_6 | Logical_Operator1_out1_5;



  assign Switch7_out1_6 = (Bit_Slice11_out1 == 1'b0 ? Logical_Operator1_out1_5 :
              Logical_Operator2_out1_5);



  assign Switch3_out1_6 = (Bit_Slice8_out1 == 1'b0 ? Switch6_out1_6 :
              Switch7_out1_6);



  assign Switch4_out1 = (Bit_Slice7_out1 == 1'b0 ? Switch3_out1_5 :
              Switch3_out1_6);



  assign Logical_Operator_out1_31 = Bit_Slice7_out1 | (Bit_Slice11_out1 | Bit_Slice8_out1);



  assign Bit_Slice6_out1 = Delay6_P29_out1[24:23];



  assign Bit_Slice_out1_31 = Bit_Slice6_out1[0];



  assign Logical_Operator3_out1_5 = Bit_Slice_out1_31 | Logical_Operator2_out1_5;



  assign Bit_Slice1_out1_7 = Bit_Slice6_out1[1];



  assign Logical_Operator_out1_32 = Bit_Slice1_out1_7 | Logical_Operator3_out1_5;



  assign Switch7_out1_7 = (Logical_Operator_out1_31 == 1'b0 ? Logical_Operator3_out1_5 :
              Logical_Operator_out1_32);



  always @(posedge clk or posedge reset)
    begin : Delay7_P29_process
      if (reset == 1'b1) begin
        Delay7_P29_out1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_P29_out1 <= if_tmp_0_1_out1_23;
        end
      end
    end



  assign R_0_out1 = Delay7_P29_out1 != 26'sb00000000000000000000000000;



  assign Switch1_out1_1 = (Bit_Slice9_out1 == 1'b0 ? Switch4_out1 :
              Switch7_out1_7);



  assign Switch2_out1 = (Bit_Slice10_out1 == 1'b0 ? Switch3_out1_4 :
              Switch1_out1_1);



  assign sticky_bitsll_Q_Q_WordLen_out1 = R_0_out1 | Switch2_out1;



  assign BitSlice_out1_2 = Delay9_P30_out1[0];



  always @(posedge clk or posedge reset)
    begin : Delay10_P30_process
      if (reset == 1'b1) begin
        Delay10_P30_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_P30_out1 <= sticky_bitsll_Q_Q_WordLen_out1;
        end
      end
    end



  assign alphabitget_Mant_tmp_2_0_out1 = BitSlice1_out1 | Delay10_P30_out1;



  assign alphabitget_Mant_tmp_1_0_out1 = BitSlice_out1_2 & alphabitget_Mant_tmp_2_0_out1;



  assign alpha0_out1_2 = 1'b0;



  assign Bit_Concat_out1_26 = {alpha0_out1_2, Delay9_P30_out1};



  assign alpha2_out1 = 25'b0000000000000000000000010;



  assign Mant_tmp_2_out1 = Bit_Concat_out1_26 + alpha2_out1;



  assign if_bitget_Mant_tmp_1_0_out1 = (alphabitget_Mant_tmp_1_0_out1 == 1'b0 ? Bit_Concat_out1_26 :
              Mant_tmp_2_out1);



  assign BitSlice2_out1 = if_bitget_Mant_tmp_1_0_out1[24];



  assign DTC2_out1 = Delay_P29_out1[7:0];



  assign C2_out1_1 = 8'b00000000;



  assign s2_out1 = (relop3_out1 == 1'b0 ? DTC2_out1 :
              C2_out1_1);



  assign C4_out1 = 8'b11111111;



  assign s5_out1 = (relop2_out1 == 1'b0 ? s2_out1 :
              C4_out1);



  always @(posedge clk or posedge reset)
    begin : Delay8_P30_1_process
      if (reset == 1'b1) begin
        Delay8_P30_reg_1[0] <= 8'b00000000;
        Delay8_P30_reg_1[1] <= 8'b00000000;
        Delay8_P30_reg_1[2] <= 8'b00000000;
        Delay8_P30_reg_1[3] <= 8'b00000000;
        Delay8_P30_reg_1[4] <= 8'b00000000;
        Delay8_P30_reg_1[5] <= 8'b00000000;
        Delay8_P30_reg_1[6] <= 8'b00000000;
        Delay8_P30_reg_1[7] <= 8'b00000000;
        Delay8_P30_reg_1[8] <= 8'b00000000;
        Delay8_P30_reg_1[9] <= 8'b00000000;
        Delay8_P30_reg_1[10] <= 8'b00000000;
        Delay8_P30_reg_1[11] <= 8'b00000000;
        Delay8_P30_reg_1[12] <= 8'b00000000;
        Delay8_P30_reg_1[13] <= 8'b00000000;
        Delay8_P30_reg_1[14] <= 8'b00000000;
        Delay8_P30_reg_1[15] <= 8'b00000000;
        Delay8_P30_reg_1[16] <= 8'b00000000;
        Delay8_P30_reg_1[17] <= 8'b00000000;
        Delay8_P30_reg_1[18] <= 8'b00000000;
        Delay8_P30_reg_1[19] <= 8'b00000000;
        Delay8_P30_reg_1[20] <= 8'b00000000;
        Delay8_P30_reg_1[21] <= 8'b00000000;
        Delay8_P30_reg_1[22] <= 8'b00000000;
        Delay8_P30_reg_1[23] <= 8'b00000000;
        Delay8_P30_reg_1[24] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay8_P30_reg_1[0] <= Delay8_P30_reg_next_1[0];
          Delay8_P30_reg_1[1] <= Delay8_P30_reg_next_1[1];
          Delay8_P30_reg_1[2] <= Delay8_P30_reg_next_1[2];
          Delay8_P30_reg_1[3] <= Delay8_P30_reg_next_1[3];
          Delay8_P30_reg_1[4] <= Delay8_P30_reg_next_1[4];
          Delay8_P30_reg_1[5] <= Delay8_P30_reg_next_1[5];
          Delay8_P30_reg_1[6] <= Delay8_P30_reg_next_1[6];
          Delay8_P30_reg_1[7] <= Delay8_P30_reg_next_1[7];
          Delay8_P30_reg_1[8] <= Delay8_P30_reg_next_1[8];
          Delay8_P30_reg_1[9] <= Delay8_P30_reg_next_1[9];
          Delay8_P30_reg_1[10] <= Delay8_P30_reg_next_1[10];
          Delay8_P30_reg_1[11] <= Delay8_P30_reg_next_1[11];
          Delay8_P30_reg_1[12] <= Delay8_P30_reg_next_1[12];
          Delay8_P30_reg_1[13] <= Delay8_P30_reg_next_1[13];
          Delay8_P30_reg_1[14] <= Delay8_P30_reg_next_1[14];
          Delay8_P30_reg_1[15] <= Delay8_P30_reg_next_1[15];
          Delay8_P30_reg_1[16] <= Delay8_P30_reg_next_1[16];
          Delay8_P30_reg_1[17] <= Delay8_P30_reg_next_1[17];
          Delay8_P30_reg_1[18] <= Delay8_P30_reg_next_1[18];
          Delay8_P30_reg_1[19] <= Delay8_P30_reg_next_1[19];
          Delay8_P30_reg_1[20] <= Delay8_P30_reg_next_1[20];
          Delay8_P30_reg_1[21] <= Delay8_P30_reg_next_1[21];
          Delay8_P30_reg_1[22] <= Delay8_P30_reg_next_1[22];
          Delay8_P30_reg_1[23] <= Delay8_P30_reg_next_1[23];
          Delay8_P30_reg_1[24] <= Delay8_P30_reg_next_1[24];
        end
      end
    end

  assign Delay8_P30_out1_1 = Delay8_P30_reg_1[24];
  assign Delay8_P30_reg_next_1[0] = s5_out1;
  assign Delay8_P30_reg_next_1[1] = Delay8_P30_reg_1[0];
  assign Delay8_P30_reg_next_1[2] = Delay8_P30_reg_1[1];
  assign Delay8_P30_reg_next_1[3] = Delay8_P30_reg_1[2];
  assign Delay8_P30_reg_next_1[4] = Delay8_P30_reg_1[3];
  assign Delay8_P30_reg_next_1[5] = Delay8_P30_reg_1[4];
  assign Delay8_P30_reg_next_1[6] = Delay8_P30_reg_1[5];
  assign Delay8_P30_reg_next_1[7] = Delay8_P30_reg_1[6];
  assign Delay8_P30_reg_next_1[8] = Delay8_P30_reg_1[7];
  assign Delay8_P30_reg_next_1[9] = Delay8_P30_reg_1[8];
  assign Delay8_P30_reg_next_1[10] = Delay8_P30_reg_1[9];
  assign Delay8_P30_reg_next_1[11] = Delay8_P30_reg_1[10];
  assign Delay8_P30_reg_next_1[12] = Delay8_P30_reg_1[11];
  assign Delay8_P30_reg_next_1[13] = Delay8_P30_reg_1[12];
  assign Delay8_P30_reg_next_1[14] = Delay8_P30_reg_1[13];
  assign Delay8_P30_reg_next_1[15] = Delay8_P30_reg_1[14];
  assign Delay8_P30_reg_next_1[16] = Delay8_P30_reg_1[15];
  assign Delay8_P30_reg_next_1[17] = Delay8_P30_reg_1[16];
  assign Delay8_P30_reg_next_1[18] = Delay8_P30_reg_1[17];
  assign Delay8_P30_reg_next_1[19] = Delay8_P30_reg_1[18];
  assign Delay8_P30_reg_next_1[20] = Delay8_P30_reg_1[19];
  assign Delay8_P30_reg_next_1[21] = Delay8_P30_reg_1[20];
  assign Delay8_P30_reg_next_1[22] = Delay8_P30_reg_1[21];
  assign Delay8_P30_reg_next_1[23] = Delay8_P30_reg_1[22];
  assign Delay8_P30_reg_next_1[24] = Delay8_P30_reg_1[23];



  assign alpha1_out1_1 = 8'b00000001;



  assign Exp_1_out1 = Delay8_P30_out1_1 + alpha1_out1_1;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = (BitSlice2_out1 == 1'b0 ? Delay8_P30_out1_1 :
              Exp_1_out1);



  always @(posedge clk or posedge reset)
    begin : Delay30_P2_process
      if (reset == 1'b1) begin
        Delay30_P2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay30_P2_out1 <= aExponent_cfType_Exponent_I_out1;
        end
      end
    end



  assign C2_out1_2 = 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : Delay31_P2_process
      if (reset == 1'b1) begin
        Delay31_P2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay31_P2_out1 <= aMantissa_0_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay10_P2_process
      if (reset == 1'b1) begin
        Delay10_P2_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay10_P2_out1 <= Delay1_P1_out1;
        end
      end
    end



  assign C_out1_5 = 8'b00000000;



  assign if_mant_a_0_out1 = (Delay31_P2_out1 == 1'b0 ? Delay10_P2_out1 :
              C_out1_5);



  assign if_exp_a_cfType_Exponent_Inf_out1 = (Delay30_P2_out1 == 1'b0 ? C2_out1_2 :
              if_mant_a_0_out1);



  always @(posedge clk or posedge reset)
    begin : Delay18_P30_process
      if (reset == 1'b1) begin
        Delay18_P30_reg[0] <= 8'b00000000;
        Delay18_P30_reg[1] <= 8'b00000000;
        Delay18_P30_reg[2] <= 8'b00000000;
        Delay18_P30_reg[3] <= 8'b00000000;
        Delay18_P30_reg[4] <= 8'b00000000;
        Delay18_P30_reg[5] <= 8'b00000000;
        Delay18_P30_reg[6] <= 8'b00000000;
        Delay18_P30_reg[7] <= 8'b00000000;
        Delay18_P30_reg[8] <= 8'b00000000;
        Delay18_P30_reg[9] <= 8'b00000000;
        Delay18_P30_reg[10] <= 8'b00000000;
        Delay18_P30_reg[11] <= 8'b00000000;
        Delay18_P30_reg[12] <= 8'b00000000;
        Delay18_P30_reg[13] <= 8'b00000000;
        Delay18_P30_reg[14] <= 8'b00000000;
        Delay18_P30_reg[15] <= 8'b00000000;
        Delay18_P30_reg[16] <= 8'b00000000;
        Delay18_P30_reg[17] <= 8'b00000000;
        Delay18_P30_reg[18] <= 8'b00000000;
        Delay18_P30_reg[19] <= 8'b00000000;
        Delay18_P30_reg[20] <= 8'b00000000;
        Delay18_P30_reg[21] <= 8'b00000000;
        Delay18_P30_reg[22] <= 8'b00000000;
        Delay18_P30_reg[23] <= 8'b00000000;
        Delay18_P30_reg[24] <= 8'b00000000;
        Delay18_P30_reg[25] <= 8'b00000000;
        Delay18_P30_reg[26] <= 8'b00000000;
        Delay18_P30_reg[27] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay18_P30_reg[0] <= Delay18_P30_reg_next[0];
          Delay18_P30_reg[1] <= Delay18_P30_reg_next[1];
          Delay18_P30_reg[2] <= Delay18_P30_reg_next[2];
          Delay18_P30_reg[3] <= Delay18_P30_reg_next[3];
          Delay18_P30_reg[4] <= Delay18_P30_reg_next[4];
          Delay18_P30_reg[5] <= Delay18_P30_reg_next[5];
          Delay18_P30_reg[6] <= Delay18_P30_reg_next[6];
          Delay18_P30_reg[7] <= Delay18_P30_reg_next[7];
          Delay18_P30_reg[8] <= Delay18_P30_reg_next[8];
          Delay18_P30_reg[9] <= Delay18_P30_reg_next[9];
          Delay18_P30_reg[10] <= Delay18_P30_reg_next[10];
          Delay18_P30_reg[11] <= Delay18_P30_reg_next[11];
          Delay18_P30_reg[12] <= Delay18_P30_reg_next[12];
          Delay18_P30_reg[13] <= Delay18_P30_reg_next[13];
          Delay18_P30_reg[14] <= Delay18_P30_reg_next[14];
          Delay18_P30_reg[15] <= Delay18_P30_reg_next[15];
          Delay18_P30_reg[16] <= Delay18_P30_reg_next[16];
          Delay18_P30_reg[17] <= Delay18_P30_reg_next[17];
          Delay18_P30_reg[18] <= Delay18_P30_reg_next[18];
          Delay18_P30_reg[19] <= Delay18_P30_reg_next[19];
          Delay18_P30_reg[20] <= Delay18_P30_reg_next[20];
          Delay18_P30_reg[21] <= Delay18_P30_reg_next[21];
          Delay18_P30_reg[22] <= Delay18_P30_reg_next[22];
          Delay18_P30_reg[23] <= Delay18_P30_reg_next[23];
          Delay18_P30_reg[24] <= Delay18_P30_reg_next[24];
          Delay18_P30_reg[25] <= Delay18_P30_reg_next[25];
          Delay18_P30_reg[26] <= Delay18_P30_reg_next[26];
          Delay18_P30_reg[27] <= Delay18_P30_reg_next[27];
        end
      end
    end

  assign Delay18_P30_out1 = Delay18_P30_reg[27];
  assign Delay18_P30_reg_next[0] = if_exp_a_cfType_Exponent_Inf_out1;
  assign Delay18_P30_reg_next[1] = Delay18_P30_reg[0];
  assign Delay18_P30_reg_next[2] = Delay18_P30_reg[1];
  assign Delay18_P30_reg_next[3] = Delay18_P30_reg[2];
  assign Delay18_P30_reg_next[4] = Delay18_P30_reg[3];
  assign Delay18_P30_reg_next[5] = Delay18_P30_reg[4];
  assign Delay18_P30_reg_next[6] = Delay18_P30_reg[5];
  assign Delay18_P30_reg_next[7] = Delay18_P30_reg[6];
  assign Delay18_P30_reg_next[8] = Delay18_P30_reg[7];
  assign Delay18_P30_reg_next[9] = Delay18_P30_reg[8];
  assign Delay18_P30_reg_next[10] = Delay18_P30_reg[9];
  assign Delay18_P30_reg_next[11] = Delay18_P30_reg[10];
  assign Delay18_P30_reg_next[12] = Delay18_P30_reg[11];
  assign Delay18_P30_reg_next[13] = Delay18_P30_reg[12];
  assign Delay18_P30_reg_next[14] = Delay18_P30_reg[13];
  assign Delay18_P30_reg_next[15] = Delay18_P30_reg[14];
  assign Delay18_P30_reg_next[16] = Delay18_P30_reg[15];
  assign Delay18_P30_reg_next[17] = Delay18_P30_reg[16];
  assign Delay18_P30_reg_next[18] = Delay18_P30_reg[17];
  assign Delay18_P30_reg_next[19] = Delay18_P30_reg[18];
  assign Delay18_P30_reg_next[20] = Delay18_P30_reg[19];
  assign Delay18_P30_reg_next[21] = Delay18_P30_reg[20];
  assign Delay18_P30_reg_next[22] = Delay18_P30_reg[21];
  assign Delay18_P30_reg_next[23] = Delay18_P30_reg[22];
  assign Delay18_P30_reg_next[24] = Delay18_P30_reg[23];
  assign Delay18_P30_reg_next[25] = Delay18_P30_reg[24];
  assign Delay18_P30_reg_next[26] = Delay18_P30_reg[25];
  assign Delay18_P30_reg_next[27] = Delay18_P30_reg[26];



  assign if_aExponent_cfType_Exponent_out1 = (Delay8_P30_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_out1 :
              Delay18_P30_out1);



  assign Constant3_out1 = 8'b00000000;



  assign Switch6_out1_7 = (Delay1_out1 == 1'b0 ? if_aExponent_cfType_Exponent_out1 :
              Constant3_out1);



  always @(posedge clk or posedge reset)
    begin : Delay4_1_process
      if (reset == 1'b1) begin
        Delay4_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_1 <= Switch6_out1_7;
        end
      end
    end



  assign Compare_To_Zero_out1 = if_bitget_Mant_tmp_Mant_tmp_Wor_out1 == 8'b00000000;



  assign Logical_Operator_out1_33 = Compare_To_Zero_out1 | BitSlice2_out1;



  assign BitSlice3_out1 = if_bitget_Mant_tmp_1_0_out1[23:1];



  assign C_out1_6 = 23'b00000000000000000000000;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 = (Logical_Operator_out1_33 == 1'b0 ? BitSlice3_out1 :
              C_out1_6);



  assign C3_out1_1 = 23'b00000000000000000000000;



  always @(posedge clk or posedge reset)
    begin : Delay9_P2_process
      if (reset == 1'b1) begin
        Delay9_P2_out1 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_P2_out1 <= Switch_out1;
        end
      end
    end



  assign if_exp_a_cfType_Exponent_Inf_1_out1 = (Delay30_P2_out1 == 1'b0 ? C3_out1_1 :
              Delay9_P2_out1);



  always @(posedge clk or posedge reset)
    begin : Delay15_P30_process
      if (reset == 1'b1) begin
        Delay15_P30_reg[0] <= 23'b00000000000000000000000;
        Delay15_P30_reg[1] <= 23'b00000000000000000000000;
        Delay15_P30_reg[2] <= 23'b00000000000000000000000;
        Delay15_P30_reg[3] <= 23'b00000000000000000000000;
        Delay15_P30_reg[4] <= 23'b00000000000000000000000;
        Delay15_P30_reg[5] <= 23'b00000000000000000000000;
        Delay15_P30_reg[6] <= 23'b00000000000000000000000;
        Delay15_P30_reg[7] <= 23'b00000000000000000000000;
        Delay15_P30_reg[8] <= 23'b00000000000000000000000;
        Delay15_P30_reg[9] <= 23'b00000000000000000000000;
        Delay15_P30_reg[10] <= 23'b00000000000000000000000;
        Delay15_P30_reg[11] <= 23'b00000000000000000000000;
        Delay15_P30_reg[12] <= 23'b00000000000000000000000;
        Delay15_P30_reg[13] <= 23'b00000000000000000000000;
        Delay15_P30_reg[14] <= 23'b00000000000000000000000;
        Delay15_P30_reg[15] <= 23'b00000000000000000000000;
        Delay15_P30_reg[16] <= 23'b00000000000000000000000;
        Delay15_P30_reg[17] <= 23'b00000000000000000000000;
        Delay15_P30_reg[18] <= 23'b00000000000000000000000;
        Delay15_P30_reg[19] <= 23'b00000000000000000000000;
        Delay15_P30_reg[20] <= 23'b00000000000000000000000;
        Delay15_P30_reg[21] <= 23'b00000000000000000000000;
        Delay15_P30_reg[22] <= 23'b00000000000000000000000;
        Delay15_P30_reg[23] <= 23'b00000000000000000000000;
        Delay15_P30_reg[24] <= 23'b00000000000000000000000;
        Delay15_P30_reg[25] <= 23'b00000000000000000000000;
        Delay15_P30_reg[26] <= 23'b00000000000000000000000;
        Delay15_P30_reg[27] <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay15_P30_reg[0] <= Delay15_P30_reg_next[0];
          Delay15_P30_reg[1] <= Delay15_P30_reg_next[1];
          Delay15_P30_reg[2] <= Delay15_P30_reg_next[2];
          Delay15_P30_reg[3] <= Delay15_P30_reg_next[3];
          Delay15_P30_reg[4] <= Delay15_P30_reg_next[4];
          Delay15_P30_reg[5] <= Delay15_P30_reg_next[5];
          Delay15_P30_reg[6] <= Delay15_P30_reg_next[6];
          Delay15_P30_reg[7] <= Delay15_P30_reg_next[7];
          Delay15_P30_reg[8] <= Delay15_P30_reg_next[8];
          Delay15_P30_reg[9] <= Delay15_P30_reg_next[9];
          Delay15_P30_reg[10] <= Delay15_P30_reg_next[10];
          Delay15_P30_reg[11] <= Delay15_P30_reg_next[11];
          Delay15_P30_reg[12] <= Delay15_P30_reg_next[12];
          Delay15_P30_reg[13] <= Delay15_P30_reg_next[13];
          Delay15_P30_reg[14] <= Delay15_P30_reg_next[14];
          Delay15_P30_reg[15] <= Delay15_P30_reg_next[15];
          Delay15_P30_reg[16] <= Delay15_P30_reg_next[16];
          Delay15_P30_reg[17] <= Delay15_P30_reg_next[17];
          Delay15_P30_reg[18] <= Delay15_P30_reg_next[18];
          Delay15_P30_reg[19] <= Delay15_P30_reg_next[19];
          Delay15_P30_reg[20] <= Delay15_P30_reg_next[20];
          Delay15_P30_reg[21] <= Delay15_P30_reg_next[21];
          Delay15_P30_reg[22] <= Delay15_P30_reg_next[22];
          Delay15_P30_reg[23] <= Delay15_P30_reg_next[23];
          Delay15_P30_reg[24] <= Delay15_P30_reg_next[24];
          Delay15_P30_reg[25] <= Delay15_P30_reg_next[25];
          Delay15_P30_reg[26] <= Delay15_P30_reg_next[26];
          Delay15_P30_reg[27] <= Delay15_P30_reg_next[27];
        end
      end
    end

  assign Delay15_P30_out1 = Delay15_P30_reg[27];
  assign Delay15_P30_reg_next[0] = if_exp_a_cfType_Exponent_Inf_1_out1;
  assign Delay15_P30_reg_next[1] = Delay15_P30_reg[0];
  assign Delay15_P30_reg_next[2] = Delay15_P30_reg[1];
  assign Delay15_P30_reg_next[3] = Delay15_P30_reg[2];
  assign Delay15_P30_reg_next[4] = Delay15_P30_reg[3];
  assign Delay15_P30_reg_next[5] = Delay15_P30_reg[4];
  assign Delay15_P30_reg_next[6] = Delay15_P30_reg[5];
  assign Delay15_P30_reg_next[7] = Delay15_P30_reg[6];
  assign Delay15_P30_reg_next[8] = Delay15_P30_reg[7];
  assign Delay15_P30_reg_next[9] = Delay15_P30_reg[8];
  assign Delay15_P30_reg_next[10] = Delay15_P30_reg[9];
  assign Delay15_P30_reg_next[11] = Delay15_P30_reg[10];
  assign Delay15_P30_reg_next[12] = Delay15_P30_reg[11];
  assign Delay15_P30_reg_next[13] = Delay15_P30_reg[12];
  assign Delay15_P30_reg_next[14] = Delay15_P30_reg[13];
  assign Delay15_P30_reg_next[15] = Delay15_P30_reg[14];
  assign Delay15_P30_reg_next[16] = Delay15_P30_reg[15];
  assign Delay15_P30_reg_next[17] = Delay15_P30_reg[16];
  assign Delay15_P30_reg_next[18] = Delay15_P30_reg[17];
  assign Delay15_P30_reg_next[19] = Delay15_P30_reg[18];
  assign Delay15_P30_reg_next[20] = Delay15_P30_reg[19];
  assign Delay15_P30_reg_next[21] = Delay15_P30_reg[20];
  assign Delay15_P30_reg_next[22] = Delay15_P30_reg[21];
  assign Delay15_P30_reg_next[23] = Delay15_P30_reg[22];
  assign Delay15_P30_reg_next[24] = Delay15_P30_reg[23];
  assign Delay15_P30_reg_next[25] = Delay15_P30_reg[24];
  assign Delay15_P30_reg_next[26] = Delay15_P30_reg[25];
  assign Delay15_P30_reg_next[27] = Delay15_P30_reg[26];



  assign if_aExponent_cfType_Exponent_1_out1 = (Delay8_P30_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 :
              Delay15_P30_out1);



  assign Constant2_out1 = 23'b00000000000000000000000;



  assign Switch5_out1 = (Delay1_out1 == 1'b0 ? if_aExponent_cfType_Exponent_1_out1 :
              Constant2_out1);



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Switch5_out1;
        end
      end
    end



  // Combine FP sign, exponent, mantissa into 32 bit word
  assign nfp_out_pack = {Delay3_out1_1, Delay4_out1_1, Delay5_out1};



  assign nfp_out = nfp_out_pack;

endmodule  // nfp_recip_single

