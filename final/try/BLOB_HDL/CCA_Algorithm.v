// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\CCA_Algorithm.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CCA_Algorithm
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CCA_Algorithm
          (clk,
           reset,
           enb,
           Video_i,
           thresh,
           Ctrl_i_hStart,
           Ctrl_i_hEnd,
           Ctrl_i_vStart,
           Ctrl_i_vEnd,
           Ctrl_i_valid,
           CloseOpOut,
           AreaMin,
           LabelVideo_o_0,
           LabelVideo_o_1,
           LabelVideo_o_2,
           Ctrl_o_hStart,
           Ctrl_o_hEnd,
           Ctrl_o_vStart,
           Ctrl_o_vEnd,
           Ctrl_o_valid,
           BWVideo_o_0,
           BWVideo_o_1,
           BWVideo_o_2,
           x_o,
           y_o,
           area_o,
           bbox_o,
           num_o,
           valid_o,
           last_o,
           totalNum_o);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] Video_i;  // uint8
  input   [7:0] thresh;  // uint8
  input   Ctrl_i_hStart;
  input   Ctrl_i_hEnd;
  input   Ctrl_i_vStart;
  input   Ctrl_i_vEnd;
  input   Ctrl_i_valid;
  input   CloseOpOut;
  input   [31:0] AreaMin;  // uint32
  output  [7:0] LabelVideo_o_0;  // uint8
  output  [7:0] LabelVideo_o_1;  // uint8
  output  [7:0] LabelVideo_o_2;  // uint8
  output  Ctrl_o_hStart;
  output  Ctrl_o_hEnd;
  output  Ctrl_o_vStart;
  output  Ctrl_o_vEnd;
  output  Ctrl_o_valid;
  output  [7:0] BWVideo_o_0;  // uint8
  output  [7:0] BWVideo_o_1;  // uint8
  output  [7:0] BWVideo_o_2;  // uint8
  output  [15:0] x_o;  // ufix16_En5
  output  [15:0] y_o;  // ufix16_En5
  output  [16:0] area_o;  // ufix17
  output  [33:0] bbox_o;  // ufix34
  output  [15:0] num_o;  // uint16
  output  valid_o;
  output  last_o;
  output  [15:0] totalNum_o;  // uint16


  wire [7:0] Pixel_Stream_FIFO_out1;  // uint8
  wire Pixel_Stream_FIFO_out2_hStart;
  wire Pixel_Stream_FIFO_out2_hEnd;
  wire Pixel_Stream_FIFO_out2_vStart;
  wire Pixel_Stream_FIFO_out2_vEnd;
  wire Pixel_Stream_FIFO_out2_valid;
  wire GreaterThan_relop1;
  wire Closing_out1;
  wire Closing_out2_hStart;
  wire Closing_out2_hEnd;
  wire Closing_out2_vStart;
  wire Closing_out2_vEnd;
  wire Closing_out2_valid;
  wire Pixel_Stream_Aligner_out1;
  wire Pixel_Stream_Aligner_out2;
  wire Pixel_Stream_Aligner_out3_hStart;
  wire Pixel_Stream_Aligner_out3_hEnd;
  wire Pixel_Stream_Aligner_out3_vStart;
  wire Pixel_Stream_Aligner_out3_vEnd;
  wire Pixel_Stream_Aligner_out3_valid;
  wire Switch5_out1;
  wire TimingSubsystem_out1;
  wire TimingSubsystem_out2_hStart;
  wire TimingSubsystem_out2_hEnd;
  wire TimingSubsystem_out2_vStart;
  wire TimingSubsystem_out2_vEnd;
  wire TimingSubsystem_out2_valid;
  wire Rst;
  wire [8:0] Xpos;  // ufix9
  wire [7:0] Ypos;  // uint8
  wire [9:0] cca_out1;  // ufix10
  wire cca_out2_hStart;
  wire cca_out2_hEnd;
  wire cca_out2_vStart;
  wire cca_out2_vEnd;
  wire cca_out2_valid;
  wire [55:0] cca_out3;  // ufix56_En30
  wire [55:0] cca_out4;  // ufix56_En30
  wire [16:0] cca_out5;  // ufix17
  wire cca_out6;
  wire cca_out7;
  wire [15:0] cca_out8;  // uint16
  wire [33:0] cca_out9;  // ufix34
  wire [9:0] wren;  // ufix10
  wire [7:0] PaletteMap_out1_0;  // uint8
  wire [7:0] PaletteMap_out1_1;  // uint8
  wire [7:0] PaletteMap_out1_2;  // uint8
  reg  [0:2] alpha_reg;  // ufix1 [3]
  wire [0:2] alpha_reg_next;  // ufix1 [3]
  wire Delay1_out1_hStart;
  reg  [0:2] alpha_reg_1;  // ufix1 [3]
  wire [0:2] alpha_reg_next_1;  // ufix1 [3]
  wire Delay1_out1_hEnd;
  reg  [0:2] alpha_reg_2;  // ufix1 [3]
  wire [0:2] alpha_reg_next_2;  // ufix1 [3]
  wire Delay1_out1_vStart;
  reg  [0:2] alpha_reg_3;  // ufix1 [3]
  wire [0:2] alpha_reg_next_3;  // ufix1 [3]
  wire Delay1_out1_vEnd;
  reg  [0:2] alpha_reg_4;  // ufix1 [3]
  wire [0:2] alpha_reg_next_4;  // ufix1 [3]
  wire Delay1_out1_valid;
  reg  [0:2] Delay_reg;  // ufix1 [3]
  wire [0:2] Delay_reg_next;  // ufix1 [3]
  wire Delay_out1;
  wire [7:0] Data_Type_Conversion_out1;  // uint8
  wire [15:0] Gain_mul_temp;  // ufix16
  wire [7:0] Gain_out1;  // uint8
  reg [7:0] Signal_Specification1_out1;  // uint8
  wire [15:0] gatheroutput_out1;  // ufix16_En5
  wire [15:0] gatheroutput_out2;  // ufix16_En5
  wire [16:0] gatheroutput_out3;  // ufix17
  wire gatheroutput_out4;
  wire [33:0] gatheroutput_out5;  // ufix34
  wire [15:0] gatheroutput_out7;  // uint16
  wire [15:0] gatheroutput_out8;  // uint16


  Pixel_Stream_FIFO u_Pixel_Stream_FIFO (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .pixelIn(Video_i),  // uint8
                                         .ctrlIn_hStart(Ctrl_i_hStart),
                                         .ctrlIn_hEnd(Ctrl_i_hEnd),
                                         .ctrlIn_vStart(Ctrl_i_vStart),
                                         .ctrlIn_vEnd(Ctrl_i_vEnd),
                                         .ctrlIn_valid(Ctrl_i_valid),
                                         .pixelout(Pixel_Stream_FIFO_out1),  // uint8
                                         .ctrlout_hStart(Pixel_Stream_FIFO_out2_hStart),
                                         .ctrlout_hEnd(Pixel_Stream_FIFO_out2_hEnd),
                                         .ctrlout_vStart(Pixel_Stream_FIFO_out2_vStart),
                                         .ctrlout_vEnd(Pixel_Stream_FIFO_out2_vEnd),
                                         .ctrlout_valid(Pixel_Stream_FIFO_out2_valid)
                                         );

  assign GreaterThan_relop1 = Pixel_Stream_FIFO_out1 > thresh;



  Closing u_Closing (.clk(clk),
                     .reset(reset),
                     .enb(enb),
                     .in0(GreaterThan_relop1),
                     .in1_hStart(Pixel_Stream_FIFO_out2_hStart),
                     .in1_hEnd(Pixel_Stream_FIFO_out2_hEnd),
                     .in1_vStart(Pixel_Stream_FIFO_out2_vStart),
                     .in1_vEnd(Pixel_Stream_FIFO_out2_vEnd),
                     .in1_valid(Pixel_Stream_FIFO_out2_valid),
                     .out0(Closing_out1),
                     .out1_hStart(Closing_out2_hStart),
                     .out1_hEnd(Closing_out2_hEnd),
                     .out1_vStart(Closing_out2_vStart),
                     .out1_vEnd(Closing_out2_vEnd),
                     .out1_valid(Closing_out2_valid)
                     );

  Pixel_Stream_Aligner u_Pixel_Stream_Aligner (.clk(clk),
                                               .reset(reset),
                                               .enb(enb),
                                               .in0(GreaterThan_relop1),
                                               .in1_hStart(Pixel_Stream_FIFO_out2_hStart),
                                               .in1_hEnd(Pixel_Stream_FIFO_out2_hEnd),
                                               .in1_vStart(Pixel_Stream_FIFO_out2_vStart),
                                               .in1_vEnd(Pixel_Stream_FIFO_out2_vEnd),
                                               .in1_valid(Pixel_Stream_FIFO_out2_valid),
                                               .in2(Closing_out1),
                                               .in3_hStart(Closing_out2_hStart),
                                               .in3_hEnd(Closing_out2_hEnd),
                                               .in3_vStart(Closing_out2_vStart),
                                               .in3_vEnd(Closing_out2_vEnd),
                                               .in3_valid(Closing_out2_valid),
                                               .out0(Pixel_Stream_Aligner_out1),
                                               .out1(Pixel_Stream_Aligner_out2),
                                               .out2_hStart(Pixel_Stream_Aligner_out3_hStart),
                                               .out2_hEnd(Pixel_Stream_Aligner_out3_hEnd),
                                               .out2_vStart(Pixel_Stream_Aligner_out3_vStart),
                                               .out2_vEnd(Pixel_Stream_Aligner_out3_vEnd),
                                               .out2_valid(Pixel_Stream_Aligner_out3_valid)
                                               );

  assign Switch5_out1 = (CloseOpOut == 1'b0 ? Pixel_Stream_Aligner_out1 :
              Pixel_Stream_Aligner_out2);



  TimingSubsystem u_TimingSubsystem (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .Vid_i(Switch5_out1),
                                     .Ctrl_i_hStart(Pixel_Stream_Aligner_out3_hStart),
                                     .Ctrl_i_hEnd(Pixel_Stream_Aligner_out3_hEnd),
                                     .Ctrl_i_vStart(Pixel_Stream_Aligner_out3_vStart),
                                     .Ctrl_i_vEnd(Pixel_Stream_Aligner_out3_vEnd),
                                     .Ctrl_i_valid(Pixel_Stream_Aligner_out3_valid),
                                     .Vid_o(TimingSubsystem_out1),
                                     .Ctrl_o_hStart(TimingSubsystem_out2_hStart),
                                     .Ctrl_o_hEnd(TimingSubsystem_out2_hEnd),
                                     .Ctrl_o_vStart(TimingSubsystem_out2_vStart),
                                     .Ctrl_o_vEnd(TimingSubsystem_out2_vEnd),
                                     .Ctrl_o_valid(TimingSubsystem_out2_valid),
                                     .Rst_o(Rst),
                                     .X(Xpos),  // ufix9
                                     .Y(Ypos)  // uint8
                                     );

  cca u_cca (.clk(clk),
             .reset(reset),
             .enb(enb),
             .BW(TimingSubsystem_out1),
             .CtrlIn_hStart(TimingSubsystem_out2_hStart),
             .CtrlIn_hEnd(TimingSubsystem_out2_hEnd),
             .CtrlIn_vStart(TimingSubsystem_out2_vStart),
             .CtrlIn_vEnd(TimingSubsystem_out2_vEnd),
             .CtrlIn_valid(TimingSubsystem_out2_valid),
             .Rst(Rst),
             .Xpos(Xpos),  // ufix9
             .Ypos(Ypos),  // uint8
             .labelpixout(cca_out1),  // ufix10
             .labelctrlout_hStart(cca_out2_hStart),
             .labelctrlout_hEnd(cca_out2_hEnd),
             .labelctrlout_vStart(cca_out2_vStart),
             .labelctrlout_vEnd(cca_out2_vEnd),
             .labelctrlout_valid(cca_out2_valid),
             .x_o(cca_out3),  // ufix56_En30
             .y_o(cca_out4),  // ufix56_En30
             .area_o(cca_out5),  // ufix17
             .valid_o(cca_out6),
             .last_o(cca_out7),
             .num_o(cca_out8),  // uint16
             .bbox_o(cca_out9)  // ufix34
             );

  assign wren = cca_out1;

  PaletteMap u_PaletteMap (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .In1(wren),  // ufix10
                           .Out1_0(PaletteMap_out1_0),  // uint8
                           .Out1_1(PaletteMap_out1_1),  // uint8
                           .Out1_2(PaletteMap_out1_2)  // uint8
                           );

  assign LabelVideo_o_0 = PaletteMap_out1_0;

  assign LabelVideo_o_1 = PaletteMap_out1_1;

  assign LabelVideo_o_2 = PaletteMap_out1_2;

  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        alpha_reg[0] <= 1'b0;
        alpha_reg[1] <= 1'b0;
        alpha_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg[0] <= alpha_reg_next[0];
          alpha_reg[1] <= alpha_reg_next[1];
          alpha_reg[2] <= alpha_reg_next[2];
        end
      end
    end

  assign Delay1_out1_hStart = alpha_reg[2];
  assign alpha_reg_next[0] = cca_out2_hStart;
  assign alpha_reg_next[1] = alpha_reg[0];
  assign alpha_reg_next[2] = alpha_reg[1];



  assign Ctrl_o_hStart = Delay1_out1_hStart;

  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        alpha_reg_1[0] <= 1'b0;
        alpha_reg_1[1] <= 1'b0;
        alpha_reg_1[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_1[0] <= alpha_reg_next_1[0];
          alpha_reg_1[1] <= alpha_reg_next_1[1];
          alpha_reg_1[2] <= alpha_reg_next_1[2];
        end
      end
    end

  assign Delay1_out1_hEnd = alpha_reg_1[2];
  assign alpha_reg_next_1[0] = cca_out2_hEnd;
  assign alpha_reg_next_1[1] = alpha_reg_1[0];
  assign alpha_reg_next_1[2] = alpha_reg_1[1];



  assign Ctrl_o_hEnd = Delay1_out1_hEnd;

  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        alpha_reg_2[0] <= 1'b0;
        alpha_reg_2[1] <= 1'b0;
        alpha_reg_2[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_2[0] <= alpha_reg_next_2[0];
          alpha_reg_2[1] <= alpha_reg_next_2[1];
          alpha_reg_2[2] <= alpha_reg_next_2[2];
        end
      end
    end

  assign Delay1_out1_vStart = alpha_reg_2[2];
  assign alpha_reg_next_2[0] = cca_out2_vStart;
  assign alpha_reg_next_2[1] = alpha_reg_2[0];
  assign alpha_reg_next_2[2] = alpha_reg_2[1];



  assign Ctrl_o_vStart = Delay1_out1_vStart;

  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        alpha_reg_3[0] <= 1'b0;
        alpha_reg_3[1] <= 1'b0;
        alpha_reg_3[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_3[0] <= alpha_reg_next_3[0];
          alpha_reg_3[1] <= alpha_reg_next_3[1];
          alpha_reg_3[2] <= alpha_reg_next_3[2];
        end
      end
    end

  assign Delay1_out1_vEnd = alpha_reg_3[2];
  assign alpha_reg_next_3[0] = cca_out2_vEnd;
  assign alpha_reg_next_3[1] = alpha_reg_3[0];
  assign alpha_reg_next_3[2] = alpha_reg_3[1];



  assign Ctrl_o_vEnd = Delay1_out1_vEnd;

  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        alpha_reg_4[0] <= 1'b0;
        alpha_reg_4[1] <= 1'b0;
        alpha_reg_4[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          alpha_reg_4[0] <= alpha_reg_next_4[0];
          alpha_reg_4[1] <= alpha_reg_next_4[1];
          alpha_reg_4[2] <= alpha_reg_next_4[2];
        end
      end
    end

  assign Delay1_out1_valid = alpha_reg_4[2];
  assign alpha_reg_next_4[0] = cca_out2_valid;
  assign alpha_reg_next_4[1] = alpha_reg_4[0];
  assign alpha_reg_next_4[2] = alpha_reg_4[1];



  assign Ctrl_o_valid = Delay1_out1_valid;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 1'b0;
        Delay_reg[1] <= 1'b0;
        Delay_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
          Delay_reg[2] <= Delay_reg_next[2];
        end
      end
    end

  assign Delay_out1 = Delay_reg[2];
  assign Delay_reg_next[0] = TimingSubsystem_out1;
  assign Delay_reg_next[1] = Delay_reg[0];
  assign Delay_reg_next[2] = Delay_reg[1];



  assign Data_Type_Conversion_out1 = {7'b0, Delay_out1};



  assign Gain_mul_temp = 8'b11111111 * Data_Type_Conversion_out1;
  assign Gain_out1 = Gain_mul_temp[7:0];



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        Signal_Specification1_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Signal_Specification1_out1 <= Gain_out1;
        end
      end
    end



  assign BWVideo_o_0 = Signal_Specification1_out1;

  assign BWVideo_o_1 = Signal_Specification1_out1;

  assign BWVideo_o_2 = Signal_Specification1_out1;

  gatheroutput u_gatheroutput (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .x_in(cca_out3),  // ufix56_En30
                               .y_in(cca_out4),  // ufix56_En30
                               .area_in(cca_out5),  // ufix17
                               .valid_in(cca_out6),
                               .numTotalBlobs_in(cca_out8),  // uint16
                               .bbox_in(cca_out9),  // ufix34
                               .lastIdx_in(cca_out7),
                               .AreaMin_in(AreaMin),  // uint32
                               .x_out(gatheroutput_out1),  // ufix16_En5
                               .y_out(gatheroutput_out2),  // ufix16_En5
                               .area_out(gatheroutput_out3),  // ufix17
                               .valid_out(gatheroutput_out4),
                               .bbox_out(gatheroutput_out5),  // ufix34
                               .numBlobs_out(gatheroutput_out7),  // uint16
                               .numTotalBlobs_out(gatheroutput_out8)  // uint16
                               );

  assign x_o = gatheroutput_out1;

  assign y_o = gatheroutput_out2;

  assign area_o = gatheroutput_out3;

  assign bbox_o = gatheroutput_out5;

  assign num_o = gatheroutput_out7;

  assign valid_o = gatheroutput_out4;

  assign last_o = cca_out7;

  assign totalNum_o = gatheroutput_out8;

endmodule  // CCA_Algorithm

