// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\Horizontal_Padder_block.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Horizontal_Padder_block
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/Closing/LineBuffer/Horizontal Padder
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Horizontal_Padder_block
          (clk,
           reset,
           enb,
           dataVectorIn_0,
           dataVectorIn_1,
           dataVectorIn_2,
           dataVectorIn_3,
           horPadCount,
           padShift,
           dataVector_0,
           dataVector_1,
           dataVector_2,
           dataVector_3);


  input   clk;
  input   reset;
  input   enb;
  input   dataVectorIn_0;  // boolean
  input   dataVectorIn_1;  // boolean
  input   dataVectorIn_2;  // boolean
  input   dataVectorIn_3;  // boolean
  input   [10:0] horPadCount;  // ufix11
  input   padShift;
  output  dataVector_0;  // boolean
  output  dataVector_1;  // boolean
  output  dataVector_2;  // boolean
  output  dataVector_3;  // boolean


  wire [0:3] DataPadValue;  // boolean [4]
  wire [0:3] dataVectorIn;  // boolean [4]
  reg  [0:3] intdelay_reg;  // ufix1 [4]
  wire [0:3] intdelay_reg_next;  // ufix1 [4]
  wire [0:3] DataMuxIn;  // boolean [4]
  wire [0:3] dataVector;  // boolean [4]


  assign DataPadValue[0] = 1'b1;
  assign DataPadValue[1] = 1'b1;
  assign DataPadValue[2] = 1'b1;
  assign DataPadValue[3] = 1'b1;



  assign dataVectorIn[0] = dataVectorIn_0;
  assign dataVectorIn[1] = dataVectorIn_1;
  assign dataVectorIn[2] = dataVectorIn_2;
  assign dataVectorIn[3] = dataVectorIn_3;

  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 1'b0;
        intdelay_reg[1] <= 1'b0;
        intdelay_reg[2] <= 1'b0;
        intdelay_reg[3] <= 1'b0;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
          intdelay_reg[2] <= intdelay_reg_next[2];
          intdelay_reg[3] <= intdelay_reg_next[3];
        end
      end
    end

  assign DataMuxIn[0] = intdelay_reg[0];
  assign DataMuxIn[1] = intdelay_reg[1];
  assign DataMuxIn[2] = intdelay_reg[2];
  assign DataMuxIn[3] = intdelay_reg[3];
  assign intdelay_reg_next[0] = dataVectorIn[0];
  assign intdelay_reg_next[1] = dataVectorIn[1];
  assign intdelay_reg_next[2] = dataVectorIn[2];
  assign intdelay_reg_next[3] = dataVectorIn[3];



  assign dataVector[0] = (horPadCount == 11'b00000000000 ? DataPadValue[0] :
              (horPadCount == 11'b00000000001 ? DataMuxIn[0] :
              (horPadCount == 11'b00000000010 ? DataPadValue[0] :
              DataPadValue[0])));
  assign dataVector[1] = (horPadCount == 11'b00000000000 ? DataPadValue[1] :
              (horPadCount == 11'b00000000001 ? DataMuxIn[1] :
              (horPadCount == 11'b00000000010 ? DataPadValue[1] :
              DataPadValue[1])));
  assign dataVector[2] = (horPadCount == 11'b00000000000 ? DataPadValue[2] :
              (horPadCount == 11'b00000000001 ? DataMuxIn[2] :
              (horPadCount == 11'b00000000010 ? DataPadValue[2] :
              DataPadValue[2])));
  assign dataVector[3] = (horPadCount == 11'b00000000000 ? DataPadValue[3] :
              (horPadCount == 11'b00000000001 ? DataMuxIn[3] :
              (horPadCount == 11'b00000000010 ? DataPadValue[3] :
              DataPadValue[3])));



  assign dataVector_0 = dataVector[0];

  assign dataVector_1 = dataVector[1];

  assign dataVector_2 = dataVector[2];

  assign dataVector_3 = dataVector[3];

endmodule  // Horizontal_Padder_block

