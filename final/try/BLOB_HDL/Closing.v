// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\Closing.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Closing
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/Closing
// Hierarchy Level: 2
// 
// Closing
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Closing
          (clk,
           reset,
           enb,
           in0,
           in1_hStart,
           in1_hEnd,
           in1_vStart,
           in1_vEnd,
           in1_valid,
           out0,
           out1_hStart,
           out1_hEnd,
           out1_vStart,
           out1_vEnd,
           out1_valid);


  input   clk;
  input   reset;
  input   enb;
  input   in0;
  input   in1_hStart;
  input   in1_hEnd;
  input   in1_vStart;
  input   in1_vEnd;
  input   in1_valid;
  output  out0;
  output  out1_hStart;
  output  out1_hEnd;
  output  out1_vStart;
  output  out1_vEnd;
  output  out1_valid;


  wire lbufData_0;
  wire lbufData_1;
  wire lbufData_2;
  wire lbufData_3;
  wire lbufhstart;
  wire lbufhend;
  wire lbufvstart;
  wire lbufvend;
  wire lbufvalid;
  wire processData;
  wire dpixelOut;
  wire dhsOut;
  wire dheOut;
  wire dvsOut;
  wire dveOut;
  wire dvalidOut;
  wire elbufData_0;
  wire elbufData_1;
  wire elbufData_2;
  wire elbufData_3;
  wire elbufhstart;
  wire elbufhend;
  wire elbufvstart;
  wire elbufvend;
  wire elbufvalid;
  wire eprocessData;
  wire dataOut;
  wire hStartOut;
  wire hEndOut;
  wire vStartOut;
  wire vEndOut;
  wire validOut;


  LineBuffer u_LineBuffer (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .dataIn(in0),
                           .hStartIn(in1_hStart),
                           .hEndIn(in1_hEnd),
                           .vStartIn(in1_vStart),
                           .vEndIn(in1_vEnd),
                           .validIn(in1_valid),
                           .dataOut_0(lbufData_0),  // boolean
                           .dataOut_1(lbufData_1),  // boolean
                           .dataOut_2(lbufData_2),  // boolean
                           .dataOut_3(lbufData_3),  // boolean
                           .hStartOut(lbufhstart),
                           .hEndOut(lbufhend),
                           .vStartOut(lbufvstart),
                           .vEndOut(lbufvend),
                           .validOut(lbufvalid),
                           .processDataOut(processData)
                           );

  DilationCore u_DilationCore (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .pixelInVec_0(lbufData_0),  // boolean
                               .pixelInVec_1(lbufData_1),  // boolean
                               .pixelInVec_2(lbufData_2),  // boolean
                               .pixelInVec_3(lbufData_3),  // boolean
                               .hStartIn(lbufhstart),
                               .hEndIn(lbufhend),
                               .vStartIn(lbufvstart),
                               .vEndIn(lbufvend),
                               .validIn(lbufvalid),
                               .processData(processData),
                               .pixelOut(dpixelOut),
                               .hStartOut(dhsOut),
                               .hEndOut(dheOut),
                               .vStartOut(dvsOut),
                               .vEndOut(dveOut),
                               .validOut(dvalidOut)
                               );

  LineBuffer_block u_eLineBuffer (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .dataIn(dpixelOut),
                                  .hStartIn(dhsOut),
                                  .hEndIn(dheOut),
                                  .vStartIn(dvsOut),
                                  .vEndIn(dveOut),
                                  .validIn(dvalidOut),
                                  .dataOut_0(elbufData_0),  // boolean
                                  .dataOut_1(elbufData_1),  // boolean
                                  .dataOut_2(elbufData_2),  // boolean
                                  .dataOut_3(elbufData_3),  // boolean
                                  .hStartOut(elbufhstart),
                                  .hEndOut(elbufhend),
                                  .vStartOut(elbufvstart),
                                  .vEndOut(elbufvend),
                                  .validOut(elbufvalid),
                                  .processDataOut(eprocessData)
                                  );

  ErosionCore u_ErosionCore (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .pixelInVec_0(elbufData_0),  // boolean
                             .pixelInVec_1(elbufData_1),  // boolean
                             .pixelInVec_2(elbufData_2),  // boolean
                             .pixelInVec_3(elbufData_3),  // boolean
                             .hStartIn(elbufhstart),
                             .hEndIn(elbufhend),
                             .vStartIn(elbufvstart),
                             .vEndIn(elbufvend),
                             .validIn(elbufvalid),
                             .processData(eprocessData),
                             .pixelOut(dataOut),
                             .hStartOut(hStartOut),
                             .hEndOut(hEndOut),
                             .vStartOut(vStartOut),
                             .vEndOut(vEndOut),
                             .validOut(validOut)
                             );

  assign out0 = dataOut;

  assign out1_hStart = hStartOut;

  assign out1_hEnd = hEndOut;

  assign out1_vStart = vStartOut;

  assign out1_vEnd = vEndOut;

  assign out1_valid = validOut;

endmodule  // Closing

