// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\Merge.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Merge
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/cca/Merge
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Merge
          (clk,
           reset,
           enb,
           alphahStart,
           alphahEnd,
           mergePush,
           mergeIndex,
           mergeEn);


  input   clk;
  input   reset;
  input   enb;
  input   alphahStart;
  input   alphahEnd;
  input   [31:0] mergePush;  // uint32
  output  [9:0] mergeIndex;  // ufix10
  output  mergeEn;


  wire Hold_Signal_out1;
  reg  mergedFlag;
  wire Compare_To_Zero_out1;
  wire NOT1_out1;
  reg  mergedFlag_1;
  wire mergerdy;
  wire pop;
  wire [31:0] mergeIndexes;  // uint32
  wire HDL_FIFO_out2;
  wire NOT_out1;
  reg  mergedFlag_2;
  wire mergedFlag_3;
  wire [15:0] m1;  // uint16
  wire [15:0] Bit_Slice1_out1;  // uint16
  reg [15:0] m2;  // uint16
  wire [15:0] Multiport_Switch_out1;  // uint16
  wire [9:0] Data_Type_Conversion_out1;  // ufix10
  wire OR_out1;


  Hold_Signal_block u_Hold_Signal (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .triggerStart(alphahEnd),
                                   .triggerEnd(alphahStart),
                                   .Signal(Hold_Signal_out1)
                                   );

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        mergedFlag <= 1'b0;
      end
      else begin
        if (enb) begin
          mergedFlag <= Hold_Signal_out1;
        end
      end
    end



  assign Compare_To_Zero_out1 = mergePush != 32'b00000000000000000000000000000000;



  assign NOT1_out1 =  ~ Hold_Signal_out1;



  counterTrigger u_counterTrigger (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .triggerStart(mergedFlag_1),
                                   .suppress(NOT1_out1),
                                   .Signal(mergerdy)
                                   );

  HDL_FIFO u_HDL_FIFO (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .In(mergePush),  // uint32
                       .Push(Compare_To_Zero_out1),
                       .Pop(pop),
                       .Out(mergeIndexes),  // uint32
                       .Empty(HDL_FIFO_out2)
                       );

  assign NOT_out1 =  ~ HDL_FIFO_out2;



  assign pop = mergerdy & (mergedFlag & NOT_out1);



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        mergedFlag_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          mergedFlag_1 <= pop;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        mergedFlag_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          mergedFlag_2 <= mergedFlag_1;
        end
      end
    end



  assign mergedFlag_3 = mergedFlag_2;

  assign m1 = mergeIndexes[15:0];



  assign Bit_Slice1_out1 = mergeIndexes[31:16];



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        m2 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          m2 <= Bit_Slice1_out1;
        end
      end
    end



  assign Multiport_Switch_out1 = (mergedFlag_3 == 1'b0 ? m1 :
              m2);



  assign Data_Type_Conversion_out1 = Multiport_Switch_out1[9:0];



  assign mergeIndex = Data_Type_Conversion_out1;

  // Hold for 2 Clocks
  assign OR_out1 = mergedFlag_1 | mergedFlag_2;



  assign mergeEn = OR_out1;

endmodule  // Merge

