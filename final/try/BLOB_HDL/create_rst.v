// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\create_rst.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: create_rst
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/TimingSubsystem/create_rst
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module create_rst
          (clk,
           reset,
           enb,
           Video_i,
           ctrl_i_hStart,
           ctrl_i_hEnd,
           ctrl_i_vStart,
           ctrl_i_vEnd,
           ctrl_i_valid,
           Video_o,
           Ctrl_o_hStart,
           Ctrl_o_hEnd,
           Ctrl_o_vStart,
           Ctrl_o_vEnd,
           Ctrl_o_valid,
           Rst);


  input   clk;
  input   reset;
  input   enb;
  input   Video_i;
  input   ctrl_i_hStart;
  input   ctrl_i_hEnd;
  input   ctrl_i_vStart;
  input   ctrl_i_vEnd;
  input   ctrl_i_valid;
  output  Video_o;
  output  Ctrl_o_hStart;
  output  Ctrl_o_hEnd;
  output  Ctrl_o_vStart;
  output  Ctrl_o_vEnd;
  output  Ctrl_o_valid;
  output  Rst;


  reg  Delay2_out1;
  reg  Delay3_out1_hStart;
  reg  Delay3_out1_hEnd;
  reg  Delay3_out1_vStart;
  reg  Delay3_out1_vEnd;
  reg  Delay3_out1_valid;
  wire hStart;
  wire vStart;
  wire valid;
  wire Logical_Operator_out1;


  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Video_i;
        end
      end
    end



  assign Video_o = Delay2_out1;

  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        Delay3_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_hStart <= ctrl_i_hStart;
        end
      end
    end



  assign Ctrl_o_hStart = Delay3_out1_hStart;

  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        Delay3_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_hEnd <= ctrl_i_hEnd;
        end
      end
    end



  assign Ctrl_o_hEnd = Delay3_out1_hEnd;

  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Delay3_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_vStart <= ctrl_i_vStart;
        end
      end
    end



  assign Ctrl_o_vStart = Delay3_out1_vStart;

  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        Delay3_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_vEnd <= ctrl_i_vEnd;
        end
      end
    end



  assign Ctrl_o_vEnd = Delay3_out1_vEnd;

  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        Delay3_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_valid <= ctrl_i_valid;
        end
      end
    end



  assign Ctrl_o_valid = Delay3_out1_valid;

  assign hStart = ctrl_i_hStart;

  assign vStart = ctrl_i_vStart;

  assign valid = ctrl_i_valid;

  assign Logical_Operator_out1 = valid & (hStart & vStart);



  assign Rst = Logical_Operator_out1;

endmodule  // create_rst

