// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\labelandmerge.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: labelandmerge
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/cca/labelandmerge
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module labelandmerge
          (clk,
           reset,
           enb,
           pixIn,
           ctrlIn_hStart,
           ctrlIn_hEnd,
           ctrlIn_vStart,
           ctrlIn_vEnd,
           ctrlIn_valid,
           labelAbove,
           labelAboveLeft,
           labelAboveRight,
           rst,
           newLabel,
           mergeIndxs,
           maxIdx);


  input   clk;
  input   reset;
  input   enb;
  input   pixIn;
  input   ctrlIn_hStart;
  input   ctrlIn_hEnd;
  input   ctrlIn_vStart;
  input   ctrlIn_vEnd;
  input   ctrlIn_valid;
  input   [9:0] labelAbove;  // ufix10
  input   [9:0] labelAboveLeft;  // ufix10
  input   [9:0] labelAboveRight;  // ufix10
  input   rst;
  output  [9:0] newLabel;  // ufix10
  output  [31:0] mergeIndxs;  // uint32
  output  [10:0] maxIdx;  // ufix11


  reg [9:0] newLabel_1;  // ufix10
  reg [31:0] mergeIndxs_1;  // uint32
  reg [10:0] maxIdx_1;  // ufix11
  reg [9:0] nextLabel;  // ufix10
  reg [9:0] newLabelReg;  // ufix10
  reg [31:0] mergeIndxsReg;  // ufix32
  reg [31:0] mergeIndxsRegLast;  // ufix32
  reg [9:0] nextLabel_next;  // ufix10
  reg [9:0] newLabelReg_next;  // ufix10
  reg [31:0] mergeIndxsReg_next;  // ufix32
  reg [31:0] mergeIndxsRegLast_next;  // ufix32
  reg [15:0] labelAboveMerged;  // ufix16
  reg [9:0] beforeLabel;  // ufix10
  reg [9:0] nextLabel_temp;  // ufix10
  reg [31:0] mergeIndxsReg_temp;  // ufix32
  reg [31:0] mergeIndxsRegLast_temp;  // ufix32
  reg [15:0] labelAboveMerged_0;  // ufix16
  reg [15:0] labelAboveMerged_1;  // ufix16
  reg signed [11:0] sub_temp;  // sfix12
  reg [10:0] add_temp;  // ufix11
  reg [15:0] t_0;  // ufix16
  reg [15:0] t_1;  // ufix16
  reg [15:0] t_2;  // ufix16
  reg [15:0] t_3;  // ufix16
  reg [15:0] t_4;  // ufix16
  reg [15:0] t_5;  // ufix16
  reg [15:0] t_6;  // ufix16
  reg [15:0] t_7;  // ufix16
  reg [15:0] t_8;  // ufix16
  reg [15:0] t_9;  // ufix16
  reg [15:0] t_10;  // ufix16
  reg [10:0] t_11;  // ufix11
  reg signed [11:0] t_12;  // sfix12
  reg [10:0] t_13;  // ufix11


  always @(posedge clk or posedge reset)
    begin : labelandmerge_1_process
      if (reset == 1'b1) begin
        nextLabel <= 10'b0000000001;
        // uint16(1);
        // uint16(1);
        newLabelReg <= 10'b0000000000;
        // uint16(0);
        mergeIndxsReg <= 32'b00000000000000000000000000000000;
        mergeIndxsRegLast <= 32'b00000000000000000000000000000000;
        //numBlobsReg = uint32(0);
      end
      else begin
        if (enb) begin
          nextLabel <= nextLabel_next;
          newLabelReg <= newLabelReg_next;
          mergeIndxsReg <= mergeIndxsReg_next;
          mergeIndxsRegLast <= mergeIndxsRegLast_next;
        end
      end
    end

  always @(ctrlIn_hStart, ctrlIn_valid, labelAbove, labelAboveLeft, labelAboveRight,
       mergeIndxsReg, mergeIndxsRegLast, newLabelReg, nextLabel, pixIn, rst) begin
    labelAboveMerged_1 = 16'b0000000000000000;
    labelAboveMerged_0 = 16'b0000000000000000;
    labelAboveMerged = 16'b0000000000000000;
    add_temp = 11'b00000000000;
    t_5 = 16'b0000000000000000;
    t_7 = 16'b0000000000000000;
    t_9 = 16'b0000000000000000;
    t_0 = 16'b0000000000000000;
    t_1 = 16'b0000000000000000;
    t_2 = 16'b0000000000000000;
    t_3 = 16'b0000000000000000;
    t_4 = 16'b0000000000000000;
    t_6 = 16'b0000000000000000;
    t_8 = 16'b0000000000000000;
    t_10 = 16'b0000000000000000;
    t_13 = 11'b00000000000;
    nextLabel_temp = nextLabel;
    mergeIndxsRegLast_temp = mergeIndxsRegLast;
    mergeIndxs_1 = mergeIndxsReg;
    // numBlobs = numBlobsReg;
    beforeLabel = newLabelReg;
    newLabelReg_next = 10'b0000000000;
    mergeIndxsReg_temp = 32'b00000000000000000000000000000000;
    if (rst) begin
      nextLabel_temp = 10'b0000000001;
      beforeLabel = 10'b0000000000;
      //numBlobsReg(:) = 0;
    end
    if (ctrlIn_hStart) begin
      mergeIndxsRegLast_temp = 32'b00000000000000000000000000000000;
    end
    if (pixIn && ctrlIn_valid) begin
      // assign new value by priority - LAST < ABOVE < NEW
      if (beforeLabel != 10'b0000000000) begin
        // look for label on the same line just before
        newLabelReg_next = beforeLabel;
        // check to see if we need to merge
        if ((labelAbove != 10'b0000000000) && (beforeLabel != labelAbove)) begin
          t_0 = {6'b0, labelAbove};
          t_1 = {6'b0, beforeLabel};
          mergeIndxsReg_temp = {t_0, t_1};
          if (mergeIndxsReg_temp == mergeIndxsRegLast_temp) begin
            mergeIndxsReg_temp = 32'b00000000000000000000000000000000;
          end
          else begin
            mergeIndxsRegLast_temp = mergeIndxsReg_temp;
            //numBlobsReg(:) = numBlobsReg - 1;
          end
        end
        else if ((labelAboveRight != 10'b0000000000) && (beforeLabel != labelAboveRight)) begin
          t_2 = {6'b0, labelAboveRight};
          t_3 = {6'b0, beforeLabel};
          mergeIndxsReg_temp = {t_2, t_3};
          if (mergeIndxsReg_temp == mergeIndxsRegLast_temp) begin
            mergeIndxsReg_temp = 32'b00000000000000000000000000000000;
          end
          else begin
            mergeIndxsRegLast_temp = mergeIndxsReg_temp;
            //numBlobsReg(:) = numBlobsReg - 1;
          end
        end
      end
      else if (labelAbove != 10'b0000000000) begin
        // look for label in the same column just above
        newLabelReg_next = labelAbove;
        // check to see if already merged on this same line
        if (mergeIndxsRegLast_temp != 32'b00000000000000000000000000000000) begin
          labelAboveMerged_1 = mergeIndxsRegLast_temp[31:16];
          t_4 = {6'b0, labelAbove};
          if (t_4 == labelAboveMerged_1) begin
            t_5 = mergeIndxsRegLast_temp[15:0];
            if (t_5[15:10] != 6'b000000) begin
              newLabelReg_next = 10'b1111111111;
            end
            else begin
              newLabelReg_next = t_5[9:0];
            end
          end
        end
      end
      else if (labelAboveLeft != 10'b0000000000) begin
        // look for label in the same column just above and to the left
        newLabelReg_next = labelAboveLeft;
        // check to see if already merged on this same line
        if (mergeIndxsRegLast_temp != 32'b00000000000000000000000000000000) begin
          labelAboveMerged_0 = mergeIndxsRegLast_temp[31:16];
          t_6 = {6'b0, labelAboveLeft};
          if (t_6 == labelAboveMerged_0) begin
            t_7 = mergeIndxsRegLast_temp[15:0];
            if (t_7[15:10] != 6'b000000) begin
              newLabelReg_next = 10'b1111111111;
            end
            else begin
              newLabelReg_next = t_7[9:0];
            end
          end
        end
      end
      else if (labelAboveRight != 10'b0000000000) begin
        // look for label in the same column just above and to the left
        newLabelReg_next = labelAboveRight;
        // check to see if already merged on this same line
        if (mergeIndxsRegLast_temp != 32'b00000000000000000000000000000000) begin
          labelAboveMerged = mergeIndxsRegLast_temp[31:16];
          t_8 = {6'b0, labelAboveRight};
          if (t_8 == labelAboveMerged) begin
            t_9 = mergeIndxsRegLast_temp[15:0];
            if (t_9[15:10] != 6'b000000) begin
              newLabelReg_next = 10'b1111111111;
            end
            else begin
              newLabelReg_next = t_9[9:0];
            end
          end
        end
      end
      else begin
        // else just assign a new label
        newLabelReg_next = nextLabel_temp;
        t_10 = {6'b0, nextLabel_temp};
        if (t_10 == 16'b0000001111111111) begin
          nextLabel_temp = 10'b0000000001;
        end
        else begin
          t_13 = {1'b0, nextLabel_temp};
          add_temp = t_13 + 11'b00000000001;
          if (add_temp[10] != 1'b0) begin
            nextLabel_temp = 10'b1111111111;
          end
          else begin
            nextLabel_temp = add_temp[9:0];
          end
        end
        //numBlobsReg(:) = numBlobsReg + 1;
      end
    end
    newLabel_1 = newLabelReg;
    t_11 = {1'b0, nextLabel};
    t_12 = {1'b0, t_11};
    sub_temp = t_12 - 12'sb000000000001;
    if (sub_temp[11] == 1'b1) begin
      maxIdx_1 = 11'b00000000000;
    end
    else begin
      maxIdx_1 = sub_temp[10:0];
    end
    nextLabel_next = nextLabel_temp;
    mergeIndxsReg_next = mergeIndxsReg_temp;
    mergeIndxsRegLast_next = mergeIndxsRegLast_temp;
  end



  assign newLabel = newLabel_1;

  assign mergeIndxs = mergeIndxs_1;

  assign maxIdx = maxIdx_1;

endmodule  // labelandmerge

