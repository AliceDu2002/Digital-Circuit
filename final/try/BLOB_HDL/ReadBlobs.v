// -------------------------------------------------------------
// 
// File Name: C:\Users\team06\Documents\MATLAB\Examples\R2022b\visionhdl\BlobAnalysisExample\verilog_hdl\BlobAnalysisHDL\ReadBlobs.v
// Created: 2022-12-23 11:30:02
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: ReadBlobs
// Source Path: BlobAnalysisHDL/BlobDetector/CCA_Algorithm/cca/ReadBlobs
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module ReadBlobs
          (clk,
           reset,
           enb,
           start,
           maxIdx,
           skipidx,
           blobIdx,
           valid,
           rdreset,
           numFnd);


  input   clk;
  input   reset;
  input   enb;
  input   start;
  input   [10:0] maxIdx;  // ufix11
  input   skipidx;  // ufix1
  output  [9:0] blobIdx;  // ufix10
  output  valid;
  output  rdreset;
  output  [15:0] numFnd;  // uint16


  reg [9:0] blobIdx_1;  // ufix10
  reg  valid_1;
  reg  rdreset_1;
  reg [15:0] numFnd_1;  // uint16
  reg [2:0] state;  // ufix3
  reg [9:0] index;  // ufix10
  reg [15:0] numFndIncr;  // uint16
  reg  validreg;
  reg  rdresetreg;
  reg [2:0] state_next;  // ufix3
  reg [9:0] index_next;  // ufix10
  reg [15:0] numFndIncr_next;  // uint16
  reg  validreg_next;
  reg  rdresetreg_next;
  reg [10:0] add_temp;  // ufix11
  reg [16:0] add_temp_0;  // ufix17
  reg [10:0] add_temp_1;  // ufix11
  reg [10:0] t_0;  // ufix11
  reg [10:0] t_1;  // ufix11
  reg [16:0] t_2;  // ufix17
  reg [10:0] t_3;  // ufix11


  always @(posedge clk or posedge reset)
    begin : ReadBlobs_1_process
      if (reset == 1'b1) begin
        state <= 3'b000;
        index <= 10'b0000000000;
        numFndIncr <= 16'd0;
        validreg <= 1'b0;
        rdresetreg <= 1'b0;
      end
      else begin
        if (enb) begin
          state <= state_next;
          index <= index_next;
          numFndIncr <= numFndIncr_next;
          validreg <= validreg_next;
          rdresetreg <= rdresetreg_next;
        end
      end
    end

  always @(index, maxIdx, numFndIncr, rdresetreg, skipidx, start, state, validreg) begin
    add_temp = 11'b00000000000;
    add_temp_0 = 17'b00000000000000000;
    add_temp_1 = 11'b00000000000;
    t_0 = 11'b00000000000;
    t_1 = 11'b00000000000;
    t_2 = 17'b00000000000000000;
    t_3 = 11'b00000000000;
    state_next = state;
    index_next = index;
    numFndIncr_next = numFndIncr;
    validreg_next = validreg;
    rdresetreg_next = rdresetreg;
    case ( state)
      3'b000 :
        begin
          index_next = 10'b0000000000;
          rdresetreg_next = 1'b0;
          validreg_next = 1'b0;
          if (start) begin
            index_next = 10'b0000000001;
            state_next = 3'b001;
            rdresetreg_next = 1'b1;
            numFndIncr_next = 16'd0;
          end
        end
      3'b001 :
        begin
          state_next = 3'b011;
          t_1 = {1'b0, index};
          add_temp = t_1 + 11'b00000000001;
          if (add_temp[10] != 1'b0) begin
            index_next = 10'b1111111111;
          end
          else begin
            index_next = add_temp[9:0];
          end
        end
      3'b011 :
        begin
          validreg_next = 1'b0;
          if (skipidx == 1'b0) begin
            validreg_next = 1'b1;
            t_2 = {1'b0, numFndIncr};
            add_temp_0 = t_2 + 17'b00000000000000001;
            if (add_temp_0[16] != 1'b0) begin
              numFndIncr_next = 16'b1111111111111111;
            end
            else begin
              numFndIncr_next = add_temp_0[15:0];
            end
          end
          t_0 = {1'b0, index};
          if (t_0 > maxIdx) begin
            state_next = 3'b000;
          end
          t_3 = {1'b0, index};
          add_temp_1 = t_3 + 11'b00000000001;
          if (add_temp_1[10] != 1'b0) begin
            index_next = 10'b1111111111;
          end
          else begin
            index_next = add_temp_1[9:0];
          end
        end
    endcase
    blobIdx_1 = index;
    valid_1 = validreg;
    rdreset_1 = rdresetreg;
    numFnd_1 = numFndIncr;
  end



  assign blobIdx = blobIdx_1;

  assign valid = valid_1;

  assign rdreset = rdreset_1;

  assign numFnd = numFnd_1;

endmodule  // ReadBlobs

